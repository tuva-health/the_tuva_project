{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.3", "generated_at": "2024-10-11T23:52:55.179431Z", "invocation_id": "fd924ca3-3f8a-45d4-bc3e-43a53ced4a58", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:32.859647Z", "completed_at": "2024-10-11T23:52:32.948759Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:32.965459Z", "completed_at": "2024-10-11T23:52:32.965476Z"}], "thread_id": "Thread-1", "execution_time": 0.11470699310302734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.input_layer.condition", "compiled": true, "compiled_code": "select\n      cast(null as TEXT ) as condition_id\n    , cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_id\n    , cast(null as TEXT ) as claim_id\n    , cast(null as date) as recorded_date\n    , cast(null as date) as onset_date\n    , cast(null as date) as resolved_date\n    , cast(null as TEXT ) as status\n    , cast(null as TEXT ) as condition_type\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as TEXT ) as normalized_description\n    , cast(null as integer ) as condition_rank\n    , cast(null as TEXT ) as present_on_admit_code\n    , cast(null as TEXT ) as present_on_admit_description\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.condition"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:32.888290Z", "completed_at": "2024-10-11T23:52:32.962910Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:32.966046Z", "completed_at": "2024-10-11T23:52:32.966052Z"}], "thread_id": "Thread-2", "execution_time": 0.1135718822479248, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.input_layer.encounter", "compiled": true, "compiled_code": "select \n      cast(null as TEXT ) as encounter_id\n    , cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_type\n    , cast(null as date) as encounter_start_date\n    , cast(null as date) as encounter_end_date\n    , cast(null as integer ) as length_of_stay\n    , cast(null as TEXT ) as admit_source_code\n    , cast(null as TEXT ) as admit_source_description\n    , cast(null as TEXT ) as admit_type_code\n    , cast(null as TEXT ) as admit_type_description\n    , cast(null as TEXT ) as discharge_disposition_code\n    , cast(null as TEXT ) as discharge_disposition_description\n    , cast(null as TEXT ) as attending_provider_id\n    , cast(null as TEXT ) as attending_provider_name\n    , cast(null as TEXT ) as facility_id\n    , cast(null as TEXT ) as facility_name\n    , cast(null as TEXT ) as primary_diagnosis_code_type\n    , cast(null as TEXT ) as primary_diagnosis_code\n    , cast(null as TEXT ) as primary_diagnosis_description\n    , cast(null as TEXT ) as ms_drg_code\n    , cast(null as TEXT ) as ms_drg_description\n    , cast(null as TEXT ) as apr_drg_code\n    , cast(null as TEXT ) as apr_drg_description\n    , cast(null as numeric(28,6) ) as paid_amount\n    , cast(null as numeric(28,6) ) as allowed_amount\n    , cast(null as numeric(28,6) ) as charge_amount\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:32.903139Z", "completed_at": "2024-10-11T23:52:32.963329Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:32.966526Z", "completed_at": "2024-10-11T23:52:32.966531Z"}], "thread_id": "Thread-3", "execution_time": 0.11273694038391113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.input_layer.lab_result", "compiled": true, "compiled_code": "select\n      cast(null as TEXT ) as lab_result_id\n    , cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_id\n    , cast(null as TEXT ) as accession_number\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(null as TEXT ) as source_component\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as TEXT ) as normalized_description\n    , cast(null as TEXT ) as normalized_component\n    , cast(null as TEXT ) as status\n    , cast(null as TEXT ) as result\n    , cast(null as date) as result_date\n    , cast(null as date) as collection_date\n    , cast(null as TEXT ) as source_units\n    , cast(null as TEXT ) as normalized_units\n    , cast(null as TEXT ) as source_reference_range_low\n    , cast(null as TEXT ) as source_reference_range_high\n    , cast(null as TEXT ) as normalized_reference_range_low\n    , cast(null as TEXT ) as normalized_reference_range_high\n    , cast(null as integer ) as source_abnormal_flag\n    , cast(null as integer ) as normalized_abnormal_flag\n    , cast(null as TEXT ) as specimen\n    , cast(null as TEXT ) as ordering_practitioner_id\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.lab_result"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:32.912358Z", "completed_at": "2024-10-11T23:52:32.963749Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:32.967008Z", "completed_at": "2024-10-11T23:52:32.967013Z"}], "thread_id": "Thread-4", "execution_time": 0.11239504814147949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.input_layer.location", "compiled": true, "compiled_code": "select\n      cast(null as TEXT ) as location_id\n    , cast(null as TEXT ) as npi\n    , cast(null as TEXT ) as name\n    , cast(null as TEXT ) as facility_type\n    , cast(null as TEXT ) as parent_organization\n    , cast(null as TEXT ) as address\n    , cast(null as TEXT ) as city\n    , cast(null as TEXT ) as state\n    , cast(null as TEXT ) as zip_code\n    , cast(null as float ) as latitude\n    , cast(null as float ) as longitude\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.location"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:32.926528Z", "completed_at": "2024-10-11T23:52:32.964078Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:32.967470Z", "completed_at": "2024-10-11T23:52:32.967473Z"}], "thread_id": "Thread-6", "execution_time": 0.11161589622497559, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.input_layer.observation", "compiled": true, "compiled_code": "select\n      cast(null as TEXT ) as observation_id\n    , cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_id\n    , cast(null as TEXT ) as panel_id\n    , cast(null as date) as observation_date\n    , cast(null as TEXT ) as observation_type\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as TEXT ) as normalized_description\n    , cast(null as TEXT ) as result\n    , cast(null as TEXT ) as source_units\n    , cast(null as TEXT ) as normalized_units\n    , cast(null as TEXT ) as source_reference_range_low\n    , cast(null as TEXT ) as source_reference_range_high\n    , cast(null as TEXT ) as normalized_reference_range_low\n    , cast(null as TEXT ) as normalized_reference_range_high\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.observation"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:32.939002Z", "completed_at": "2024-10-11T23:52:32.964469Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:32.968163Z", "completed_at": "2024-10-11T23:52:32.968168Z"}], "thread_id": "Thread-8", "execution_time": 0.11111021041870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.input_layer.practitioner", "compiled": true, "compiled_code": "select\n      cast(null as TEXT ) as practitioner_id\n    , cast(null as TEXT ) as npi\n    , cast(null as TEXT ) as first_name\n    , cast(null as TEXT ) as last_name\n    , cast(null as TEXT ) as practice_affiliation\n    , cast(null as TEXT ) as specialty\n    , cast(null as TEXT ) as sub_specialty\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.practitioner"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:32.933532Z", "completed_at": "2024-10-11T23:52:32.964739Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:32.968606Z", "completed_at": "2024-10-11T23:52:32.968610Z"}], "thread_id": "Thread-7", "execution_time": 0.11233210563659668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.input_layer.patient", "compiled": true, "compiled_code": "select\n      cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as first_name\n    , cast(null as TEXT ) as last_name\n    , cast(null as TEXT ) as sex\n    , cast(null as TEXT ) as race\n    , cast(null as date) as birth_date\n    , cast(null as date) as death_date\n    , cast(null as integer ) as death_flag\n    , cast(null as TEXT ) as social_security_number\n    , cast(null as TEXT ) as address\n    , cast(null as TEXT ) as city\n    , cast(null as TEXT ) as state\n    , cast(null as TEXT ) as zip_code\n    , cast(null as TEXT ) as county\n    , cast(null as float ) as latitude\n    , cast(null as float ) as longitude\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:32.918349Z", "completed_at": "2024-10-11T23:52:32.965002Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:32.969035Z", "completed_at": "2024-10-11T23:52:32.969039Z"}], "thread_id": "Thread-5", "execution_time": 0.11359715461730957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.input_layer.medication", "compiled": true, "compiled_code": "select \n      cast(null as TEXT ) as medication_id\n    , cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_id\n    , cast(null as date) as dispensing_date\n    , cast(null as date) as prescribing_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(null as TEXT ) as ndc_code\n    , cast(null as TEXT ) as ndc_description\n    , cast(null as TEXT ) as rxnorm_code\n    , cast(null as TEXT ) as rxnorm_description\n    , cast(null as TEXT ) as atc_code\n    , cast(null as TEXT ) as atc_description\n    , cast(null as TEXT ) as route\n    , cast(null as TEXT ) as strength\n    , cast(null as integer ) as quantity\n    , cast(null as TEXT ) as quantity_unit\n    , cast(null as integer ) as days_supply\n    , cast(null as TEXT ) as practitioner_id\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.medication"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:32.943107Z", "completed_at": "2024-10-11T23:52:32.965230Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:32.969455Z", "completed_at": "2024-10-11T23:52:32.969459Z"}], "thread_id": "Thread-9", "execution_time": 0.11196708679199219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.input_layer.procedure", "compiled": true, "compiled_code": "select\n      cast(null as TEXT ) as procedure_id\n    , cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_id\n    , cast(null as TEXT ) as claim_id\n    , cast(null as date) as procedure_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as TEXT ) as normalized_description\n    , cast(null as TEXT ) as modifier_1\n    , cast(null as TEXT ) as modifier_2\n    , cast(null as TEXT ) as modifier_3\n    , cast(null as TEXT ) as modifier_4\n    , cast(null as TEXT ) as modifier_5\n    , cast(null as TEXT ) as practitioner_id\n    , cast(null as TEXT ) as data_source\n    , cast(null as TEXT ) as file_name\n    , cast(null as timestamp ) as ingest_datetime\nlimit 0", "relation_name": "tuva.input_layer.procedure"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:32.949145Z", "completed_at": "2024-10-11T23:52:32.967899Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:32.972813Z", "completed_at": "2024-10-11T23:52:32.972818Z"}], "thread_id": "Thread-10", "execution_time": 0.1144399642944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "compiled": true, "compiled_code": "\n/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\n/*\n    set performance lookback periods for each type of test\n\n    during the measurement period:\n    - Fecal occult blood test (FOBT) during the measurement period\n\n    during the measurement period or the two years prior:\n    - Fecal immunochemical DNA test (FIT-DNA)\n\n    during the measurement period or the four years prior:\n    - Flexible sigmoidoscopy\n    - Computed tomography (CT) colonography\n\n    during the measurement period or the nine years prior:\n    - Colonoscopy\n\n*/\n, period_lookback as (\n\n    select\n          performance_period_end\n        , performance_period_begin\n        , \n\n    dateadd(\n        year,\n        -2,\n        performance_period_end\n        )\n\n as performance_period_begin_1yp\n        , \n\n    dateadd(\n        year,\n        -3,\n        performance_period_end\n        )\n\n as performance_period_begin_2yp\n        , \n\n    dateadd(\n        year,\n        -5,\n        performance_period_end\n        )\n\n as performance_period_begin_4yp\n        , \n\n    dateadd(\n        year,\n        -10,\n        performance_period_end\n        )\n\n as performance_period_begin_9yp\n    from period_begin\n\n)\n\nselect\n      cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(performance_period_begin_1yp as date) as performance_period_begin_1yp\n    , cast(performance_period_begin_2yp as date) as performance_period_begin_2yp\n    , cast(performance_period_begin_4yp as date) as performance_period_begin_4yp\n    , cast(performance_period_begin_9yp as date) as performance_period_begin_9yp\nfrom period_lookback", "relation_name": "dev_coco.quality_measures._int_nqf0034__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:32.986916Z", "completed_at": "2024-10-11T23:52:32.988456Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.014107Z", "completed_at": "2024-10-11T23:52:33.014114Z"}], "thread_id": "Thread-2", "execution_time": 0.03925776481628418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.input_layer.eligibility_seed", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:32.999451Z", "completed_at": "2024-10-11T23:52:33.000915Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.015348Z", "completed_at": "2024-10-11T23:52:33.015352Z"}], "thread_id": "Thread-3", "execution_time": 0.03944206237792969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.input_layer.lab_result_seed", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.003390Z", "completed_at": "2024-10-11T23:52:33.004856Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.016063Z", "completed_at": "2024-10-11T23:52:33.016067Z"}], "thread_id": "Thread-4", "execution_time": 0.03987407684326172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.input_layer.medical_claim_seed", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.005133Z", "completed_at": "2024-10-11T23:52:33.006603Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.016496Z", "completed_at": "2024-10-11T23:52:33.016499Z"}], "thread_id": "Thread-6", "execution_time": 0.04002499580383301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.input_layer.observation_seed", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.007118Z", "completed_at": "2024-10-11T23:52:33.008587Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.018703Z", "completed_at": "2024-10-11T23:52:33.018707Z"}], "thread_id": "Thread-8", "execution_time": 0.04167819023132324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.input_layer.pharmacy_claim_seed", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.008847Z", "completed_at": "2024-10-11T23:52:33.010312Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.019137Z", "completed_at": "2024-10-11T23:52:33.019140Z"}], "thread_id": "Thread-7", "execution_time": 0.04184222221374512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.input_layer.provider_attribution_seed", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.010572Z", "completed_at": "2024-10-11T23:52:33.012065Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.019565Z", "completed_at": "2024-10-11T23:52:33.019568Z"}], "thread_id": "Thread-5", "execution_time": 0.041999101638793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.ccsr__dxccsr_v2023_1_body_systems", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.012331Z", "completed_at": "2024-10-11T23:52:33.013847Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.019989Z", "completed_at": "2024-10-11T23:52:33.019992Z"}], "thread_id": "Thread-9", "execution_time": 0.04216504096984863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.ccsr__dxccsr_v2023_1_cleaned_map", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.016920Z", "completed_at": "2024-10-11T23:52:33.018392Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.021880Z", "completed_at": "2024-10-11T23:52:33.021884Z"}], "thread_id": "Thread-10", "execution_time": 0.042610883712768555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.ccsr__prccsr_v2023_1_cleaned_map", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.029747Z", "completed_at": "2024-10-11T23:52:33.031406Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.045885Z", "completed_at": "2024-10-11T23:52:33.045892Z"}], "thread_id": "Thread-2", "execution_time": 0.02222275733947754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.chronic_conditions__cms_chronic_conditions_hierarchy", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.031760Z", "completed_at": "2024-10-11T23:52:33.033310Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.046389Z", "completed_at": "2024-10-11T23:52:33.046394Z"}], "thread_id": "Thread-3", "execution_time": 0.022371768951416016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.chronic_conditions__tuva_chronic_conditions_hierarchy", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.033668Z", "completed_at": "2024-10-11T23:52:33.035183Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.046825Z", "completed_at": "2024-10-11T23:52:33.046829Z"}], "thread_id": "Thread-4", "execution_time": 0.022433042526245117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.clinical_concept_library__clinical_concepts", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.035693Z", "completed_at": "2024-10-11T23:52:33.037200Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.047249Z", "completed_at": "2024-10-11T23:52:33.047253Z"}], "thread_id": "Thread-6", "execution_time": 0.022275209426879883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.clinical_concept_library__coding_systems", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.037969Z", "completed_at": "2024-10-11T23:52:33.040266Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.049435Z", "completed_at": "2024-10-11T23:52:33.049440Z"}], "thread_id": "Thread-8", "execution_time": 0.023773193359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.clinical_concept_library__value_set_members", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.040585Z", "completed_at": "2024-10-11T23:52:33.042091Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.049875Z", "completed_at": "2024-10-11T23:52:33.049879Z"}], "thread_id": "Thread-7", "execution_time": 0.023871898651123047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__adjustment_rates", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.042391Z", "completed_at": "2024-10-11T23:52:33.043872Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.050297Z", "completed_at": "2024-10-11T23:52:33.050301Z"}], "thread_id": "Thread-5", "execution_time": 0.024019241333007812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__cpt_hcpcs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.044155Z", "completed_at": "2024-10-11T23:52:33.045619Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.050708Z", "completed_at": "2024-10-11T23:52:33.050711Z"}], "thread_id": "Thread-9", "execution_time": 0.024167776107788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__demographic_factors", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.047670Z", "completed_at": "2024-10-11T23:52:33.049171Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.052280Z", "completed_at": "2024-10-11T23:52:33.052284Z"}], "thread_id": "Thread-10", "execution_time": 0.024538040161132812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__disabled_interaction_factors", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.058608Z", "completed_at": "2024-10-11T23:52:33.060162Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.078195Z", "completed_at": "2024-10-11T23:52:33.078200Z"}], "thread_id": "Thread-2", "execution_time": 0.024302959442138672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__disease_factors", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.060419Z", "completed_at": "2024-10-11T23:52:33.062629Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.078684Z", "completed_at": "2024-10-11T23:52:33.078688Z"}], "thread_id": "Thread-3", "execution_time": 0.02448105812072754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__disease_hierarchy", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.062888Z", "completed_at": "2024-10-11T23:52:33.064367Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.079139Z", "completed_at": "2024-10-11T23:52:33.079142Z"}], "thread_id": "Thread-4", "execution_time": 0.024667978286743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__disease_interaction_factors", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.064674Z", "completed_at": "2024-10-11T23:52:33.066136Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.079585Z", "completed_at": "2024-10-11T23:52:33.079589Z"}], "thread_id": "Thread-6", "execution_time": 0.024853229522705078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__enrollment_interaction_factors", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.067497Z", "completed_at": "2024-10-11T23:52:33.068982Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.081858Z", "completed_at": "2024-10-11T23:52:33.081862Z"}], "thread_id": "Thread-8", "execution_time": 0.02650284767150879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__icd_10_cm_mappings", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.071955Z", "completed_at": "2024-10-11T23:52:33.073512Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.082300Z", "completed_at": "2024-10-11T23:52:33.082303Z"}], "thread_id": "Thread-7", "execution_time": 0.02664494514465332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.cms_hcc__payment_hcc_count_factors", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.073787Z", "completed_at": "2024-10-11T23:52:33.075322Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.082729Z", "completed_at": "2024-10-11T23:52:33.082732Z"}], "thread_id": "Thread-5", "execution_time": 0.02680206298828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.data_quality__crosswalk_field_info", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.075590Z", "completed_at": "2024-10-11T23:52:33.077861Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.083150Z", "completed_at": "2024-10-11T23:52:33.083153Z"}], "thread_id": "Thread-9", "execution_time": 0.026966094970703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.data_quality__crosswalk_field_to_mart", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.080030Z", "completed_at": "2024-10-11T23:52:33.081590Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.084855Z", "completed_at": "2024-10-11T23:52:33.084859Z"}], "thread_id": "Thread-10", "execution_time": 0.027496814727783203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.data_quality__crosswalk_mart_to_outcome_measure", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.095237Z", "completed_at": "2024-10-11T23:52:33.096853Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.111031Z", "completed_at": "2024-10-11T23:52:33.111037Z"}], "thread_id": "Thread-2", "execution_time": 0.02094578742980957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.data_quality__crosswalk_measure_reasonable_ranges", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.097130Z", "completed_at": "2024-10-11T23:52:33.098691Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.111697Z", "completed_at": "2024-10-11T23:52:33.111702Z"}], "thread_id": "Thread-3", "execution_time": 0.02127528190612793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.ed_classification__categories", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.098961Z", "completed_at": "2024-10-11T23:52:33.100517Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.112169Z", "completed_at": "2024-10-11T23:52:33.112173Z"}], "thread_id": "Thread-4", "execution_time": 0.0214388370513916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.ed_classification__icd_10_cm_to_ccs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.100785Z", "completed_at": "2024-10-11T23:52:33.102356Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.112620Z", "completed_at": "2024-10-11T23:52:33.112624Z"}], "thread_id": "Thread-6", "execution_time": 0.021594762802124023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.ed_classification__johnston_icd10", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.102875Z", "completed_at": "2024-10-11T23:52:33.105241Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.114842Z", "completed_at": "2024-10-11T23:52:33.114847Z"}], "thread_id": "Thread-8", "execution_time": 0.02320098876953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.ed_classification__johnston_icd9", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.105548Z", "completed_at": "2024-10-11T23:52:33.107111Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.115291Z", "completed_at": "2024-10-11T23:52:33.115295Z"}], "thread_id": "Thread-7", "execution_time": 0.023334026336669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.hcc_suspecting__clinical_concepts", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.107403Z", "completed_at": "2024-10-11T23:52:33.108915Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.115724Z", "completed_at": "2024-10-11T23:52:33.115727Z"}], "thread_id": "Thread-5", "execution_time": 0.023473262786865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.hcc_suspecting__hcc_descriptions", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.109184Z", "completed_at": "2024-10-11T23:52:33.110684Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.116149Z", "completed_at": "2024-10-11T23:52:33.116153Z"}], "thread_id": "Thread-9", "execution_time": 0.023612022399902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.hcc_suspecting__icd_10_cm_mappings", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.113062Z", "completed_at": "2024-10-11T23:52:33.114578Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.117963Z", "completed_at": "2024-10-11T23:52:33.117967Z"}], "thread_id": "Thread-10", "execution_time": 0.02410292625427246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.pharmacy__rxnorm_generic_available", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.124280Z", "completed_at": "2024-10-11T23:52:33.125875Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.140108Z", "completed_at": "2024-10-11T23:52:33.140113Z"}], "thread_id": "Thread-2", "execution_time": 0.02049994468688965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.pqi__measures", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.126146Z", "completed_at": "2024-10-11T23:52:33.128429Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.140572Z", "completed_at": "2024-10-11T23:52:33.140576Z"}], "thread_id": "Thread-3", "execution_time": 0.020669221878051758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.pqi__value_sets", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.128706Z", "completed_at": "2024-10-11T23:52:33.130181Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.141003Z", "completed_at": "2024-10-11T23:52:33.141007Z"}], "thread_id": "Thread-4", "execution_time": 0.02084183692932129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.quality_measures__concepts", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.130457Z", "completed_at": "2024-10-11T23:52:33.131933Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.141427Z", "completed_at": "2024-10-11T23:52:33.141430Z"}], "thread_id": "Thread-6", "execution_time": 0.021004199981689453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.quality_measures__measures", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.132462Z", "completed_at": "2024-10-11T23:52:33.133939Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.143596Z", "completed_at": "2024-10-11T23:52:33.143601Z"}], "thread_id": "Thread-8", "execution_time": 0.02259683609008789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.quality_measures__value_sets", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.134202Z", "completed_at": "2024-10-11T23:52:33.135658Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.144035Z", "completed_at": "2024-10-11T23:52:33.144038Z"}], "thread_id": "Thread-7", "execution_time": 0.022746801376342773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.readmissions__acute_diagnosis_ccs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.135916Z", "completed_at": "2024-10-11T23:52:33.137401Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.144461Z", "completed_at": "2024-10-11T23:52:33.144465Z"}], "thread_id": "Thread-5", "execution_time": 0.02291131019592285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.readmissions__acute_diagnosis_icd_10_cm", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.137664Z", "completed_at": "2024-10-11T23:52:33.139838Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.144884Z", "completed_at": "2024-10-11T23:52:33.144887Z"}], "thread_id": "Thread-9", "execution_time": 0.023074865341186523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.readmissions__always_planned_ccs_diagnosis_category", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.141843Z", "completed_at": "2024-10-11T23:52:33.143326Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.146742Z", "completed_at": "2024-10-11T23:52:33.146747Z"}], "thread_id": "Thread-10", "execution_time": 0.02372598648071289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.readmissions__always_planned_ccs_procedure_category", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.152960Z", "completed_at": "2024-10-11T23:52:33.154429Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.167756Z", "completed_at": "2024-10-11T23:52:33.167761Z"}], "thread_id": "Thread-2", "execution_time": 0.019449949264526367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.readmissions__exclusion_ccs_diagnosis_category", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.154692Z", "completed_at": "2024-10-11T23:52:33.156187Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.168207Z", "completed_at": "2024-10-11T23:52:33.168211Z"}], "thread_id": "Thread-3", "execution_time": 0.019620180130004883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.readmissions__icd_10_cm_to_ccs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.156439Z", "completed_at": "2024-10-11T23:52:33.157908Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.168634Z", "completed_at": "2024-10-11T23:52:33.168637Z"}], "thread_id": "Thread-4", "execution_time": 0.01983928680419922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.readmissions__icd_10_pcs_to_ccs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.158162Z", "completed_at": "2024-10-11T23:52:33.159646Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.169107Z", "completed_at": "2024-10-11T23:52:33.169111Z"}], "thread_id": "Thread-6", "execution_time": 0.020010948181152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.readmissions__potentially_planned_ccs_procedure_category", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.160957Z", "completed_at": "2024-10-11T23:52:33.162373Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.171266Z", "completed_at": "2024-10-11T23:52:33.171270Z"}], "thread_id": "Thread-8", "execution_time": 0.021653175354003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.readmissions__potentially_planned_icd_10_pcs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.162634Z", "completed_at": "2024-10-11T23:52:33.164100Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.171696Z", "completed_at": "2024-10-11T23:52:33.171699Z"}], "thread_id": "Thread-7", "execution_time": 0.02180194854736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.readmissions__specialty_cohort", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.164353Z", "completed_at": "2024-10-11T23:52:33.165807Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.172114Z", "completed_at": "2024-10-11T23:52:33.172117Z"}], "thread_id": "Thread-5", "execution_time": 0.021963119506835938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.readmissions__surgery_gynecology_cohort", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.166059Z", "completed_at": "2024-10-11T23:52:33.167504Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.172530Z", "completed_at": "2024-10-11T23:52:33.172534Z"}], "thread_id": "Thread-9", "execution_time": 0.022028684616088867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.reference_data__ansi_fips_state", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.169529Z", "completed_at": "2024-10-11T23:52:33.171012Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.174065Z", "completed_at": "2024-10-11T23:52:33.174069Z"}], "thread_id": "Thread-10", "execution_time": 0.022372007369995117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.reference_data__calendar", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.180327Z", "completed_at": "2024-10-11T23:52:33.182631Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.195821Z", "completed_at": "2024-10-11T23:52:33.195827Z"}], "thread_id": "Thread-2", "execution_time": 0.020318031311035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.reference_data__code_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.182897Z", "completed_at": "2024-10-11T23:52:33.184367Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.196292Z", "completed_at": "2024-10-11T23:52:33.196296Z"}], "thread_id": "Thread-3", "execution_time": 0.020498991012573242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.reference_data__fips_county", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.184625Z", "completed_at": "2024-10-11T23:52:33.186080Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.196716Z", "completed_at": "2024-10-11T23:52:33.196720Z"}], "thread_id": "Thread-4", "execution_time": 0.02066802978515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.reference_data__ssa_fips_state", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.186337Z", "completed_at": "2024-10-11T23:52:33.187792Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.197135Z", "completed_at": "2024-10-11T23:52:33.197138Z"}], "thread_id": "Thread-6", "execution_time": 0.02083587646484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.service_category__service_categories", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.188284Z", "completed_at": "2024-10-11T23:52:33.189728Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.199274Z", "completed_at": "2024-10-11T23:52:33.199278Z"}], "thread_id": "Thread-8", "execution_time": 0.022463083267211914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__admit_source", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.189975Z", "completed_at": "2024-10-11T23:52:33.191425Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.199696Z", "completed_at": "2024-10-11T23:52:33.199700Z"}], "thread_id": "Thread-7", "execution_time": 0.02253890037536621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__admit_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.191674Z", "completed_at": "2024-10-11T23:52:33.193863Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.200114Z", "completed_at": "2024-10-11T23:52:33.200117Z"}], "thread_id": "Thread-5", "execution_time": 0.02269887924194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__apr_drg", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.194113Z", "completed_at": "2024-10-11T23:52:33.195573Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.200522Z", "completed_at": "2024-10-11T23:52:33.200525Z"}], "thread_id": "Thread-9", "execution_time": 0.02284717559814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__bill_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.197555Z", "completed_at": "2024-10-11T23:52:33.199023Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.202197Z", "completed_at": "2024-10-11T23:52:33.202202Z"}], "thread_id": "Thread-10", "execution_time": 0.023200035095214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__ccs_services_procedures", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.212052Z", "completed_at": "2024-10-11T23:52:33.213723Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.231874Z", "completed_at": "2024-10-11T23:52:33.231880Z"}], "thread_id": "Thread-2", "execution_time": 0.024567127227783203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__claim_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.213993Z", "completed_at": "2024-10-11T23:52:33.215558Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.232348Z", "completed_at": "2024-10-11T23:52:33.232352Z"}], "thread_id": "Thread-3", "execution_time": 0.024729013442993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__discharge_disposition", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.219372Z", "completed_at": "2024-10-11T23:52:33.221067Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.232799Z", "completed_at": "2024-10-11T23:52:33.232803Z"}], "thread_id": "Thread-4", "execution_time": 0.024903059005737305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__encounter_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.221357Z", "completed_at": "2024-10-11T23:52:33.223939Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.233246Z", "completed_at": "2024-10-11T23:52:33.233250Z"}], "thread_id": "Thread-6", "execution_time": 0.025084257125854492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__ethnicity", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.224506Z", "completed_at": "2024-10-11T23:52:33.226130Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.235562Z", "completed_at": "2024-10-11T23:52:33.235567Z"}], "thread_id": "Thread-8", "execution_time": 0.02683281898498535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__gender", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.226402Z", "completed_at": "2024-10-11T23:52:33.227949Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.236009Z", "completed_at": "2024-10-11T23:52:33.236012Z"}], "thread_id": "Thread-7", "execution_time": 0.026982784271240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__hcpcs_level_2", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.228215Z", "completed_at": "2024-10-11T23:52:33.229787Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.236446Z", "completed_at": "2024-10-11T23:52:33.236449Z"}], "thread_id": "Thread-5", "execution_time": 0.02714705467224121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__hcpcs_to_rbcs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.230052Z", "completed_at": "2024-10-11T23:52:33.231607Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.236881Z", "completed_at": "2024-10-11T23:52:33.236885Z"}], "thread_id": "Thread-9", "execution_time": 0.027312755584716797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__icd_10_cm", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.233692Z", "completed_at": "2024-10-11T23:52:33.235291Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.238604Z", "completed_at": "2024-10-11T23:52:33.238608Z"}], "thread_id": "Thread-10", "execution_time": 0.027824878692626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__icd_10_pcs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.254455Z", "completed_at": "2024-10-11T23:52:33.256062Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.347862Z", "completed_at": "2024-10-11T23:52:33.347871Z"}], "thread_id": "Thread-2", "execution_time": 0.09907770156860352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__icd_9_cm", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.256322Z", "completed_at": "2024-10-11T23:52:33.257808Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.348544Z", "completed_at": "2024-10-11T23:52:33.348549Z"}], "thread_id": "Thread-3", "execution_time": 0.09926819801330566, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__icd_9_pcs", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.258061Z", "completed_at": "2024-10-11T23:52:33.259545Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.349091Z", "completed_at": "2024-10-11T23:52:33.349096Z"}], "thread_id": "Thread-4", "execution_time": 0.09949111938476562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__loinc", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.259794Z", "completed_at": "2024-10-11T23:52:33.261271Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.349592Z", "completed_at": "2024-10-11T23:52:33.349597Z"}], "thread_id": "Thread-6", "execution_time": 0.09966897964477539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__loinc_deprecated_mapping", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.261768Z", "completed_at": "2024-10-11T23:52:33.263207Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.352182Z", "completed_at": "2024-10-11T23:52:33.352187Z"}], "thread_id": "Thread-8", "execution_time": 0.1010751724243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__mdc", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.263457Z", "completed_at": "2024-10-11T23:52:33.265700Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.352691Z", "completed_at": "2024-10-11T23:52:33.352696Z"}], "thread_id": "Thread-7", "execution_time": 0.10120606422424316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__medicare_dual_eligibility", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.339017Z", "completed_at": "2024-10-11T23:52:33.340860Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.353210Z", "completed_at": "2024-10-11T23:52:33.353215Z"}], "thread_id": "Thread-9", "execution_time": 0.10120511054992676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__medicare_status", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.265961Z", "completed_at": "2024-10-11T23:52:33.347061Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.353744Z", "completed_at": "2024-10-11T23:52:33.353749Z"}], "thread_id": "Thread-5", "execution_time": 0.10198187828063965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__medicare_orec", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.350079Z", "completed_at": "2024-10-11T23:52:33.351868Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.356067Z", "completed_at": "2024-10-11T23:52:33.356073Z"}], "thread_id": "Thread-10", "execution_time": 0.10285210609436035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__ms_drg", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.363205Z", "completed_at": "2024-10-11T23:52:33.365069Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.380449Z", "completed_at": "2024-10-11T23:52:33.380457Z"}], "thread_id": "Thread-2", "execution_time": 0.022634029388427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__ms_drg_weights_los", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.365352Z", "completed_at": "2024-10-11T23:52:33.367075Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.381033Z", "completed_at": "2024-10-11T23:52:33.381038Z"}], "thread_id": "Thread-3", "execution_time": 0.022856950759887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__ndc", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.367355Z", "completed_at": "2024-10-11T23:52:33.369064Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.381561Z", "completed_at": "2024-10-11T23:52:33.381566Z"}], "thread_id": "Thread-4", "execution_time": 0.023092031478881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__nitos", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.369347Z", "completed_at": "2024-10-11T23:52:33.371025Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.382081Z", "completed_at": "2024-10-11T23:52:33.382085Z"}], "thread_id": "Thread-6", "execution_time": 0.0233306884765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__other_provider_taxonomy", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.371615Z", "completed_at": "2024-10-11T23:52:33.374190Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.384588Z", "completed_at": "2024-10-11T23:52:33.384593Z"}], "thread_id": "Thread-8", "execution_time": 0.02514815330505371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__payer_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.374492Z", "completed_at": "2024-10-11T23:52:33.376144Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.385106Z", "completed_at": "2024-10-11T23:52:33.385111Z"}], "thread_id": "Thread-7", "execution_time": 0.02530813217163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__place_of_service", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.376456Z", "completed_at": "2024-10-11T23:52:33.378121Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.385616Z", "completed_at": "2024-10-11T23:52:33.385622Z"}], "thread_id": "Thread-9", "execution_time": 0.02548670768737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__present_on_admission", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.378434Z", "completed_at": "2024-10-11T23:52:33.380156Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.386114Z", "completed_at": "2024-10-11T23:52:33.386118Z"}], "thread_id": "Thread-5", "execution_time": 0.025689125061035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__provider", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.382566Z", "completed_at": "2024-10-11T23:52:33.384286Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.387843Z", "completed_at": "2024-10-11T23:52:33.387848Z"}], "thread_id": "Thread-10", "execution_time": 0.026112079620361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__race", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.394399Z", "completed_at": "2024-10-11T23:52:33.396822Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.419837Z", "completed_at": "2024-10-11T23:52:33.419848Z"}], "thread_id": "Thread-2", "execution_time": 0.03032994270324707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__revenue_center", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.397097Z", "completed_at": "2024-10-11T23:52:33.398532Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.421936Z", "completed_at": "2024-10-11T23:52:33.421942Z"}], "thread_id": "Thread-3", "execution_time": 0.0320131778717041, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__rxnorm_brand_generic", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.398794Z", "completed_at": "2024-10-11T23:52:33.400272Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.422704Z", "completed_at": "2024-10-11T23:52:33.422710Z"}], "thread_id": "Thread-4", "execution_time": 0.032510995864868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__rxnorm_to_atc", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.400526Z", "completed_at": "2024-10-11T23:52:33.401985Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.423270Z", "completed_at": "2024-10-11T23:52:33.423275Z"}], "thread_id": "Thread-6", "execution_time": 0.0328068733215332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__snomed_ct", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.402477Z", "completed_at": "2024-10-11T23:52:33.403935Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.427848Z", "completed_at": "2024-10-11T23:52:33.427855Z"}], "thread_id": "Thread-8", "execution_time": 0.036859989166259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__snomed_ct_transitive_closures", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.404204Z", "completed_at": "2024-10-11T23:52:33.405723Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.428496Z", "completed_at": "2024-10-11T23:52:33.428500Z"}], "thread_id": "Thread-7", "execution_time": 0.0371551513671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.the_tuva_project.terminology__snomed_icd_10_map", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.416025Z", "completed_at": "2024-10-11T23:52:33.430908Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.433610Z", "completed_at": "2024-10-11T23:52:33.433615Z"}], "thread_id": "Thread-5", "execution_time": 0.04163789749145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_claim_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'CLAIM_ID' AS field_name\n    , case when m.claim_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(claim_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_claim_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.405991Z", "completed_at": "2024-10-11T23:52:33.431200Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.434058Z", "completed_at": "2024-10-11T23:52:33.434062Z"}], "thread_id": "Thread-9", "execution_time": 0.04234910011291504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_condition", "compiled": true, "compiled_code": "\n\nselect\n    cast(condition_id as TEXT ) as condition_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(claim_id as TEXT ) as claim_id\n    , try_cast( recorded_date as date ) as recorded_date\n    , try_cast( onset_date as date ) as onset_date\n    , try_cast( resolved_date as date ) as resolved_date\n    , cast(status as TEXT ) as status\n    , cast(condition_type as TEXT ) as condition_type\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(condition_rank as integer ) as condition_rank\n    , cast(present_on_admit_code as TEXT ) as present_on_admit_code\n    , cast(present_on_admit_description as TEXT ) as present_on_admit_description\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-11 23:52:28.343846+00:00' as timestamp ) as tuva_last_run\nfrom tuva.input_layer.condition", "relation_name": "dev_coco.core._stg_clinical_condition"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.423731Z", "completed_at": "2024-10-11T23:52:33.432787Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.435558Z", "completed_at": "2024-10-11T23:52:33.435562Z"}], "thread_id": "Thread-10", "execution_time": 0.04239296913146973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_condition_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'CONDITION_ID' AS field_name\n    , case when m.condition_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(condition_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_condition_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.437818Z", "completed_at": "2024-10-11T23:52:33.465775Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.467851Z", "completed_at": "2024-10-11T23:52:33.467860Z"}], "thread_id": "Thread-2", "execution_time": 0.03544497489929199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_condition_rank", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'CONDITION_RANK' AS field_name\n    , case when m.condition_rank is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(condition_rank as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_condition_rank"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.446442Z", "completed_at": "2024-10-11T23:52:33.466656Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.477510Z", "completed_at": "2024-10-11T23:52:33.477519Z"}], "thread_id": "Thread-4", "execution_time": 0.0442812442779541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_data_source", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' AS field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.442307Z", "completed_at": "2024-10-11T23:52:33.466918Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.478044Z", "completed_at": "2024-10-11T23:52:33.478049Z"}], "thread_id": "Thread-3", "execution_time": 0.04505777359008789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_condition_type", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'CONDITION_TYPE' AS field_name\n    , case when m.condition_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(condition_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_condition_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.455899Z", "completed_at": "2024-10-11T23:52:33.468339Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.485532Z", "completed_at": "2024-10-11T23:52:33.485539Z"}], "thread_id": "Thread-8", "execution_time": 0.05086183547973633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_normalized_description", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_DESCRIPTION' AS field_name\n    , case when m.normalized_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(normalized_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_normalized_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.451921Z", "completed_at": "2024-10-11T23:52:33.472850Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.486124Z", "completed_at": "2024-10-11T23:52:33.486130Z"}], "thread_id": "Thread-6", "execution_time": 0.05170106887817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_encounter_id", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    ,'CONDITION' AS table_name\n    ,'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    ,'ENCOUNTER_ID' AS field_name\n    ,case when m.encounter_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(encounter_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.459937Z", "completed_at": "2024-10-11T23:52:33.473133Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.486609Z", "completed_at": "2024-10-11T23:52:33.486614Z"}], "thread_id": "Thread-7", "execution_time": 0.051629066467285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_onset_date", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    ,'CONDITION' AS table_name\n    ,'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    ,'ONSET_DATE' AS field_name\n    ,case\n        when m.onset_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.onset_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.onset_date > m.resolved_date then 'invalid'\n        when m.onset_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when m.onset_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.onset_date <= cast('1901-01-01' as date) then 'too old'\n        WHEN m.onset_date < m.resolved_date THEN 'Onset date after resolved date'\n        else null\n    end as invalid_reason\n    ,cast(onset_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_onset_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.468633Z", "completed_at": "2024-10-11T23:52:33.487157Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.490125Z", "completed_at": "2024-10-11T23:52:33.490131Z"}], "thread_id": "Thread-5", "execution_time": 0.038909912109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_patient_id", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.recorded_date,cast('1900-01-01' as date) ) as source_date\n    ,'CONDITION' AS table_name\n    ,'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    ,'PATIENT_ID' AS field_name\n    ,case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(patient_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.473397Z", "completed_at": "2024-10-11T23:52:33.488135Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.491258Z", "completed_at": "2024-10-11T23:52:33.491264Z"}], "thread_id": "Thread-9", "execution_time": 0.03970193862915039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_present_on_admit_description", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    ,'CONDITION' AS table_name\n    ,'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    ,'PRESENT_ON_ADMIT_DESCRIPTION' AS field_name\n    ,case when m.present_on_admit_description is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(substring(present_on_admit_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_present_on_admit_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.478513Z", "completed_at": "2024-10-11T23:52:33.489480Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.492594Z", "completed_at": "2024-10-11T23:52:33.492599Z"}], "thread_id": "Thread-10", "execution_time": 0.02739715576171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_recorded_date", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    ,'CONDITION' AS table_name\n    ,'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    ,'RECORDED_DATE' AS field_name\n    ,CASE\n        when m.recorded_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.recorded_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.recorded_date < m.onset_date then 'invalid'\n        when m.recorded_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when m.recorded_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.recorded_date <= cast('1901-01-01' as date) then 'too old'\n        WHEN m.recorded_date < m.onset_date THEN 'Recorded date before onset date'\n        else null\n    end as invalid_reason\n    ,cast(recorded_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_recorded_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.494548Z", "completed_at": "2024-10-11T23:52:33.517841Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.531747Z", "completed_at": "2024-10-11T23:52:33.531756Z"}], "thread_id": "Thread-2", "execution_time": 0.04340076446533203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_resolved_date", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'RESOLVED_DATE' AS field_name\n    , CASE\n        when m.resolved_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.resolved_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.resolved_date < m.onset_date then 'invalid'\n        when m.resolved_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.resolved_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.resolved_date <= cast('1901-01-01' as date) then 'too old'\n        when m.resolved_date < m.onset_date THEN 'Resolved date before onset date'\n        else null\n    end as invalid_reason\n    , cast(resolved_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_resolved_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.501313Z", "completed_at": "2024-10-11T23:52:33.531382Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.541211Z", "completed_at": "2024-10-11T23:52:33.541219Z"}], "thread_id": "Thread-4", "execution_time": 0.050657033920288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_source_code", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    ,'CONDITION' AS table_name\n    ,'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    ,'SOURCE_CODE' AS field_name\n    ,case when m.source_code is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(source_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_source_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.505080Z", "completed_at": "2024-10-11T23:52:33.532292Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.543184Z", "completed_at": "2024-10-11T23:52:33.543188Z"}], "thread_id": "Thread-3", "execution_time": 0.05231785774230957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_source_code_type", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE_TYPE' AS field_name\n    , case when m.source_code_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_source_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.509247Z", "completed_at": "2024-10-11T23:52:33.532578Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.543671Z", "completed_at": "2024-10-11T23:52:33.543675Z"}], "thread_id": "Thread-8", "execution_time": 0.05172586441040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_source_description", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'SOURCE_DESCRIPTION' AS field_name\n    , case when m.source_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(source_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_source_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.513159Z", "completed_at": "2024-10-11T23:52:33.533085Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.548789Z", "completed_at": "2024-10-11T23:52:33.548796Z"}], "thread_id": "Thread-6", "execution_time": 0.05656170845031738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_status", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'STATUS' AS field_name\n    , case when m.status is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(status as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m", "relation_name": "dev_coco.data_quality.condition_status"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.518426Z", "completed_at": "2024-10-11T23:52:33.541690Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.549825Z", "completed_at": "2024-10-11T23:52:33.549830Z"}], "thread_id": "Thread-7", "execution_time": 0.0568239688873291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_encounter", "compiled": true, "compiled_code": "\n\nselect\n    cast(encounter_id as TEXT) as encounter_id\n  , cast(patient_id as TEXT) as patient_id\n  , cast(encounter_type as TEXT) as encounter_type\n  , cast('clinical' as TEXT) as encounter_group\n  , try_cast( encounter_start_date as date ) as encounter_start_date\n  , try_cast( encounter_end_date as date ) as encounter_end_date\n  , cast(length_of_stay as integer) as length_of_stay\n  , cast(admit_source_code as TEXT) as admit_source_code\n  , cast(admit_source_description as TEXT) as admit_source_description\n  , cast(admit_type_code as TEXT) as admit_type_code\n  , cast(admit_type_description as TEXT) as admit_type_description\n  , cast(discharge_disposition_code as TEXT) as discharge_disposition_code\n  , cast(discharge_disposition_description as TEXT) as discharge_disposition_description\n  , cast(attending_provider_id as TEXT) as attending_provider_id\n  , cast(attending_provider_name as TEXT) as attending_provider_name\n  , cast(facility_id as TEXT) as facility_id\n  , cast(facility_name as TEXT) as facility_name\n  , cast(null as TEXT) as facility_type\n  , cast(null as integer) as observation_flag\n  , cast(null as integer) as lab_flag\n  , cast(null as integer) as dme_flag\n  , cast(null as integer) as ambulance_flag\n  , cast(null as integer) as pharmacy_flag\n  , cast(null as integer) as ed_flag\n  , cast(null as integer) as delivery_flag\n  , cast(null as TEXT) as delivery_type\n  , cast(null as integer) as newborn_flag\n  , cast(null as integer) as nicu_flag\n  , cast(primary_diagnosis_code_type as TEXT) as primary_diagnosis_code_type\n  , cast(primary_diagnosis_code as TEXT) as primary_diagnosis_code\n  , cast(primary_diagnosis_description as TEXT) as primary_diagnosis_description\n  , cast(ms_drg_code as TEXT) as ms_drg_code\n  , cast(ms_drg_description as TEXT) as ms_drg_description\n  , cast(apr_drg_code as TEXT) as apr_drg_code\n  , cast(apr_drg_description as TEXT) as apr_drg_description\n  , cast(paid_amount as numeric(28,6) ) as paid_amount\n  , cast(allowed_amount as numeric(28,6) ) as allowed_amount\n  , cast(charge_amount as numeric(28,6) ) as charge_amount\n  , cast(null as integer) as claim_count\n  , cast(null as integer) as inst_claim_count\n  , cast(null as integer) as prof_claim_count\n  , cast(null as TEXT) as source_model\n  , cast(data_source as TEXT) as data_source\n  , cast('2024-10-11 23:52:28.343846+00:00' as timestamp) as tuva_last_run\nfrom tuva.input_layer.encounter", "relation_name": "dev_coco.core._stg_clinical_encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.537311Z", "completed_at": "2024-10-11T23:52:33.550703Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.556268Z", "completed_at": "2024-10-11T23:52:33.556274Z"}], "thread_id": "Thread-9", "execution_time": 0.04752707481384277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_admit_type_description", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    ,'ENCOUNTER' AS table_name\n    ,'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    ,'ADMIT_TYPE_DESCRIPTION' AS field_name\n    ,case when m.admit_type_description is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(substring(admit_type_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_coco.data_quality.encounter_admit_type_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.533367Z", "completed_at": "2024-10-11T23:52:33.550978Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.556740Z", "completed_at": "2024-10-11T23:52:33.556744Z"}], "thread_id": "Thread-5", "execution_time": 0.05579233169555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_admit_source_description", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ADMIT_SOURCE_DESCRIPTION' AS field_name\n    , case when m.admit_source_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(admit_source_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_coco.data_quality.encounter_admit_source_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.544124Z", "completed_at": "2024-10-11T23:52:33.555726Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.558995Z", "completed_at": "2024-10-11T23:52:33.558999Z"}], "thread_id": "Thread-10", "execution_time": 0.040946245193481445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_allowed_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ALLOWED_AMOUNT' AS field_name\n    , case when m.allowed_amount is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(allowed_amount as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_coco.data_quality.encounter_allowed_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.559442Z", "completed_at": "2024-10-11T23:52:33.579679Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.591300Z", "completed_at": "2024-10-11T23:52:33.591308Z"}], "thread_id": "Thread-2", "execution_time": 0.04101085662841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_apr_drg_description", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'APR_DRG_DESCRIPTION' AS field_name\n    , case when m.apr_drg_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(apr_drg_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_coco.data_quality.encounter_apr_drg_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.565629Z", "completed_at": "2024-10-11T23:52:33.590671Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.598423Z", "completed_at": "2024-10-11T23:52:33.598430Z"}], "thread_id": "Thread-4", "execution_time": 0.043366193771362305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_charge_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'CHARGE_AMOUNT' AS field_name\n    , case when m.charge_amount is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(charge_amount as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_coco.data_quality.encounter_charge_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.575851Z", "completed_at": "2024-10-11T23:52:33.591981Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.603086Z", "completed_at": "2024-10-11T23:52:33.603091Z"}], "thread_id": "Thread-8", "execution_time": 0.04541492462158203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_discharge_disposition_description", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'DISCHARGE_DISPOSITION_DESCRIPTION' AS field_name\n    , case when m.discharge_disposition_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(discharge_disposition_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_coco.data_quality.encounter_discharge_disposition_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.571803Z", "completed_at": "2024-10-11T23:52:33.592287Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.603564Z", "completed_at": "2024-10-11T23:52:33.603568Z"}], "thread_id": "Thread-3", "execution_time": 0.04616403579711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_data_source", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    ,'ENCOUNTER' AS table_name\n    ,'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    ,'DATA_SOURCE' AS field_name\n    ,case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(data_source as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_coco.data_quality.encounter_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.579949Z", "completed_at": "2024-10-11T23:52:33.592549Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.604008Z", "completed_at": "2024-10-11T23:52:33.604012Z"}], "thread_id": "Thread-6", "execution_time": 0.046048879623413086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_encounter_end_date", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ENCOUNTER_END_DATE' AS field_name\n    , case\n        when m.encounter_end_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.encounter_end_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.encounter_end_date < m.encounter_start_date then 'invalid'\n        when m.encounter_end_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.encounter_end_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.encounter_end_date <= cast('1901-01-01' as date) then 'too old'\n        when m.encounter_end_date < m.encounter_start_date then 'Encounter end date before encounter start date'\n        else null\n    end as invalid_reason\n    , cast(encounter_end_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_coco.data_quality.encounter_encounter_end_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.586163Z", "completed_at": "2024-10-11T23:52:33.593018Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.608337Z", "completed_at": "2024-10-11T23:52:33.608343Z"}], "thread_id": "Thread-7", "execution_time": 0.04969596862792969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_encounter_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ENCOUNTER_ID' AS field_name\n    , case when m.encounter_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(encounter_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_coco.data_quality.encounter_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.593261Z", "completed_at": "2024-10-11T23:52:33.609804Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.612495Z", "completed_at": "2024-10-11T23:52:33.612500Z"}], "thread_id": "Thread-9", "execution_time": 0.04143500328063965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_encounter_start_date", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ENCOUNTER_START_DATE' AS field_name\n    , case\n        when m.encounter_start_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.encounter_start_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.encounter_start_date > m.encounter_end_date then 'invalid'\n        when m.encounter_start_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.encounter_start_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.encounter_start_date <= cast('1901-01-01' as date) then 'too old'\n        when m.encounter_start_date > m.encounter_end_date then 'Encounter start date after encounter end date'\n        else null\n    end as invalid_reason\n    , cast(encounter_start_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_coco.data_quality.encounter_encounter_start_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.598928Z", "completed_at": "2024-10-11T23:52:33.610341Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.613237Z", "completed_at": "2024-10-11T23:52:33.613241Z"}], "thread_id": "Thread-5", "execution_time": 0.041812896728515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_length_of_stay", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    ,'ENCOUNTER' AS table_name\n    ,'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    ,'LENGTH_OF_STAY' AS field_name\n    ,case when m.length_of_stay is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(length_of_stay as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_coco.data_quality.encounter_length_of_stay"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.604448Z", "completed_at": "2024-10-11T23:52:33.612242Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.618712Z", "completed_at": "2024-10-11T23:52:33.618718Z"}], "thread_id": "Thread-10", "execution_time": 0.028733015060424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_ms_drg_description", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'MS_DRG_DESCRIPTION' AS field_name\n    , case when m.ms_drg_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(ms_drg_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_coco.data_quality.encounter_ms_drg_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.614745Z", "completed_at": "2024-10-11T23:52:33.630291Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.649298Z", "completed_at": "2024-10-11T23:52:33.649306Z"}], "thread_id": "Thread-2", "execution_time": 0.039917945861816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_paid_amount", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    ,'ENCOUNTER' AS table_name\n    ,'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    ,'PAID_AMOUNT' AS field_name\n    ,case when m.paid_amount is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(paid_amount as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_coco.data_quality.encounter_paid_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.620959Z", "completed_at": "2024-10-11T23:52:33.650541Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.661694Z", "completed_at": "2024-10-11T23:52:33.661702Z"}], "thread_id": "Thread-4", "execution_time": 0.05017805099487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_patient_id", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    ,'ENCOUNTER' AS table_name\n    ,'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    ,'PATIENT_ID' AS field_name\n    ,case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(patient_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_coco.data_quality.encounter_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.626489Z", "completed_at": "2024-10-11T23:52:33.651419Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.666027Z", "completed_at": "2024-10-11T23:52:33.666033Z"}], "thread_id": "Thread-8", "execution_time": 0.0531461238861084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_primary_diagnosis_description", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'PRIMARY_DIAGNOSIS_DESCRIPTION' AS field_name\n    , case when m.primary_diagnosis_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(primary_diagnosis_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m", "relation_name": "dev_coco.data_quality.encounter_primary_diagnosis_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.630847Z", "completed_at": "2024-10-11T23:52:33.657083Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.666896Z", "completed_at": "2024-10-11T23:52:33.666900Z"}], "thread_id": "Thread-3", "execution_time": 0.05329489707946777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_lab_result", "compiled": true, "compiled_code": "\n\nselect\n    cast(lab_result_id as TEXT ) as lab_result_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(accession_number as TEXT ) as accession_number\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(source_component as TEXT ) as source_component\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(normalized_component as TEXT ) as normalized_component\n    , cast(status as TEXT ) as status\n    , cast(result as TEXT ) as result\n    , try_cast( result_date as date ) as result_date\n    , try_cast( collection_date as date ) as collection_date\n    , cast(source_units as TEXT ) as source_units\n    , cast(normalized_units as TEXT ) as normalized_units\n    , cast(source_reference_range_low as TEXT ) as source_reference_range_low\n    , cast(source_reference_range_high as TEXT ) as source_reference_range_high\n    , cast(normalized_reference_range_low as TEXT ) as normalized_reference_range_low\n    , cast(normalized_reference_range_high as TEXT ) as normalized_reference_range_high\n    , cast(source_abnormal_flag as TEXT ) as source_abnormal_flag\n    , cast(normalized_abnormal_flag as TEXT ) as normalized_abnormal_flag\n    , cast(specimen as TEXT ) as specimen\n    , cast(ordering_practitioner_id as TEXT ) as ordering_practitioner_id\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-11 23:52:28.343846+00:00' as timestamp ) as tuva_last_run\nfrom tuva.input_layer.lab_result", "relation_name": "dev_coco.core._stg_clinical_lab_result"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.643338Z", "completed_at": "2024-10-11T23:52:33.657372Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.667371Z", "completed_at": "2024-10-11T23:52:33.667375Z"}], "thread_id": "Thread-7", "execution_time": 0.053215980529785156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_collection_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'COLLECTION_DATE' AS field_name\n    , case\n        when m.collection_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.collection_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.collection_date > m.result_date then 'invalid'\n        when m.collection_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.collection_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.collection_date <= cast('1901-01-01' as date) then 'too old'\n        when m.collection_date > m.result_date then 'Collection date after result date'\n        else null\n    end as invalid_reason\n    , cast(collection_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_collection_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.639573Z", "completed_at": "2024-10-11T23:52:33.661420Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.668134Z", "completed_at": "2024-10-11T23:52:33.668138Z"}], "thread_id": "Thread-6", "execution_time": 0.05425882339477539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_accession_number", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'ACCESSION_NUMBER' AS field_name\n    , case when m.accession_number is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(accession_number as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_accession_number"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.651738Z", "completed_at": "2024-10-11T23:52:33.667829Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.671764Z", "completed_at": "2024-10-11T23:52:33.671769Z"}], "thread_id": "Thread-9", "execution_time": 0.045723915100097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_data_source", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' AS field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.657614Z", "completed_at": "2024-10-11T23:52:33.669957Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.673992Z", "completed_at": "2024-10-11T23:52:33.673997Z"}], "thread_id": "Thread-5", "execution_time": 0.043511152267456055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_encounter_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'ENCOUNTER_ID' as field_name\n    , case when m.encounter_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(encounter_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.662196Z", "completed_at": "2024-10-11T23:52:33.670845Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.678897Z", "completed_at": "2024-10-11T23:52:33.678904Z"}], "thread_id": "Thread-10", "execution_time": 0.03038477897644043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_lab_result_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'LAB_RESULT_ID' as field_name\n    , case when m.lab_result_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(lab_result_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_lab_result_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.674734Z", "completed_at": "2024-10-11T23:52:33.682568Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.701574Z", "completed_at": "2024-10-11T23:52:33.701583Z"}], "thread_id": "Thread-2", "execution_time": 0.03510117530822754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_abnormal_flag", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_ABNORMAL_FLAG' as field_name\n    , case when m.normalized_abnormal_flag is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_abnormal_flag as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_normalized_abnormal_flag"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.687911Z", "completed_at": "2024-10-11T23:52:33.708145Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.723645Z", "completed_at": "2024-10-11T23:52:33.723652Z"}], "thread_id": "Thread-8", "execution_time": 0.0492708683013916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_reference_range_high", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_REFERENCE_RANGE_HIGH' as field_name\n    , case when m.normalized_reference_range_high is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_reference_range_high as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_normalized_reference_range_high"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.693445Z", "completed_at": "2024-10-11T23:52:33.712424Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.724187Z", "completed_at": "2024-10-11T23:52:33.724192Z"}], "thread_id": "Thread-3", "execution_time": 0.0448908805847168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_reference_range_low", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_REFERENCE_RANGE_LOW' as field_name\n    , case when m.normalized_reference_range_low is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_reference_range_low as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_normalized_reference_range_low"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.697587Z", "completed_at": "2024-10-11T23:52:33.712741Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.724693Z", "completed_at": "2024-10-11T23:52:33.724697Z"}], "thread_id": "Thread-7", "execution_time": 0.04510378837585449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_units", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_UNITS' as field_name\n    , case when m.normalized_units is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_units as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_normalized_units"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.683328Z", "completed_at": "2024-10-11T23:52:33.713017Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.725427Z", "completed_at": "2024-10-11T23:52:33.725432Z"}], "thread_id": "Thread-4", "execution_time": 0.05296683311462402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_DESCRIPTION' AS field_name\n    , case when m.normalized_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(normalized_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_normalized_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.702673Z", "completed_at": "2024-10-11T23:52:33.723396Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.726570Z", "completed_at": "2024-10-11T23:52:33.726574Z"}], "thread_id": "Thread-6", "execution_time": 0.04636502265930176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_patient_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'PATIENT_ID' AS field_name\n    , case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(patient_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.708472Z", "completed_at": "2024-10-11T23:52:33.725165Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.728277Z", "completed_at": "2024-10-11T23:52:33.728281Z"}], "thread_id": "Thread-9", "execution_time": 0.04553985595703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_result", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'RESULT' AS field_name\n    , case when m.result is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(result as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_result"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.713282Z", "completed_at": "2024-10-11T23:52:33.726283Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.733033Z", "completed_at": "2024-10-11T23:52:33.733040Z"}], "thread_id": "Thread-5", "execution_time": 0.04555487632751465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_result_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'RESULT_DATE' as field_name\n    , case\n        when m.result_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.result_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.result_date < m.collection_date then 'invalid'\n        when m.result_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.result_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.result_date <= cast('1901-01-01' as date) then 'too old'\n        when m.result_date < m.collection_date then 'Result date before collection date'\n        else null\n    end as invalid_reason\n    , cast(result_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_result_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.719311Z", "completed_at": "2024-10-11T23:52:33.727392Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.734145Z", "completed_at": "2024-10-11T23:52:33.734150Z"}], "thread_id": "Thread-10", "execution_time": 0.04113483428955078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_abnormal_flag", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SOURCE_ABNORMAL_FLAG' AS field_name\n    , case when m.source_abnormal_flag is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_abnormal_flag as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_source_abnormal_flag"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.729051Z", "completed_at": "2024-10-11T23:52:33.736821Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.742781Z", "completed_at": "2024-10-11T23:52:33.742788Z"}], "thread_id": "Thread-2", "execution_time": 0.019788026809692383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE' AS field_name\n    , case when m.source_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_source_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.738898Z", "completed_at": "2024-10-11T23:52:33.761144Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.774581Z", "completed_at": "2024-10-11T23:52:33.774590Z"}], "thread_id": "Thread-8", "execution_time": 0.04082298278808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_code_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE_TYPE' as field_name\n    , case when m.source_code_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_source_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.743546Z", "completed_at": "2024-10-11T23:52:33.761454Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.775092Z", "completed_at": "2024-10-11T23:52:33.775096Z"}], "thread_id": "Thread-3", "execution_time": 0.0405580997467041, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_component", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SOURCE_COMPONENT' AS field_name\n    , case when m.source_component is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_component as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_source_component"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.747376Z", "completed_at": "2024-10-11T23:52:33.769521Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.775654Z", "completed_at": "2024-10-11T23:52:33.775659Z"}], "thread_id": "Thread-7", "execution_time": 0.040846824645996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SOURCE_DESCRIPTION' as field_name\n    , case when m.source_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(source_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_source_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.751460Z", "completed_at": "2024-10-11T23:52:33.770189Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.776919Z", "completed_at": "2024-10-11T23:52:33.776924Z"}], "thread_id": "Thread-4", "execution_time": 0.04152178764343262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_reference_range_high", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SOURCE_REFERENCE_RANGE_HIGH' AS field_name\n    , case when m.source_reference_range_high is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_reference_range_high as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_source_reference_range_high"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.756519Z", "completed_at": "2024-10-11T23:52:33.774313Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.777433Z", "completed_at": "2024-10-11T23:52:33.777438Z"}], "thread_id": "Thread-6", "execution_time": 0.04139113426208496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_reference_range_low", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SOURCE_REFERENCE_RANGE_LOW' AS field_name\n    , case when m.source_reference_range_low is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_reference_range_low as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_source_reference_range_low"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.761698Z", "completed_at": "2024-10-11T23:52:33.776427Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.786293Z", "completed_at": "2024-10-11T23:52:33.786301Z"}], "thread_id": "Thread-9", "execution_time": 0.048513174057006836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_source_units", "compiled": true, "compiled_code": "\n\n\nSELECT\n    m.data_source\n    ,coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    ,'LAB_RESULT' AS table_name\n    ,'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    ,'SOURCE_UNITS' AS field_name\n    ,case when m.source_units is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(source_units as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_source_units"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.765674Z", "completed_at": "2024-10-11T23:52:33.776690Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.786783Z", "completed_at": "2024-10-11T23:52:33.786787Z"}], "thread_id": "Thread-5", "execution_time": 0.04846000671386719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_specimen", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'SPECIMEN' as field_name\n    , case when m.specimen is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(specimen as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_specimen"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.770476Z", "completed_at": "2024-10-11T23:52:33.778551Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.788467Z", "completed_at": "2024-10-11T23:52:33.788471Z"}], "thread_id": "Thread-10", "execution_time": 0.045269012451171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_status", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'STATUS' as field_name\n    , case when m.status is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(status as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m", "relation_name": "dev_coco.data_quality.lab_result_status"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.779136Z", "completed_at": "2024-10-11T23:52:33.790438Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.792821Z", "completed_at": "2024-10-11T23:52:33.792825Z"}], "thread_id": "Thread-2", "execution_time": 0.023020029067993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_location", "compiled": true, "compiled_code": "\n\nselect\n    cast(location_id as TEXT ) as location_id\n    , cast(npi as TEXT ) as npi\n    , cast(name as TEXT ) as name\n    , cast(facility_type as TEXT ) as facility_type\n    , cast(parent_organization as TEXT ) as parent_organization\n    , cast(address as TEXT ) as address\n    , cast(city as TEXT ) as city\n    , cast(state as TEXT ) as state\n    , cast(zip_code as TEXT ) as zip_code\n    , cast(latitude as float ) as latitude\n    , cast(longitude as float ) as longitude\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-11 23:52:28.343846+00:00' as timestamp ) as tuva_last_run\nfrom tuva.input_layer.location", "relation_name": "dev_coco.core._stg_clinical_location"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.801231Z", "completed_at": "2024-10-11T23:52:33.827038Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.839084Z", "completed_at": "2024-10-11T23:52:33.839093Z"}], "thread_id": "Thread-3", "execution_time": 0.05099797248840332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_address", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'ADDRESS' AS field_name\n    , case when m.address is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(address as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_coco.data_quality.location_address"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.793266Z", "completed_at": "2024-10-11T23:52:33.827309Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.839615Z", "completed_at": "2024-10-11T23:52:33.839620Z"}], "thread_id": "Thread-8", "execution_time": 0.05180788040161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_observation", "compiled": true, "compiled_code": "\n\n\nselect\n    cast(observation_id as TEXT ) as observation_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(panel_id as TEXT ) as panel_id\n    , try_cast( observation_date as date ) as observation_date\n    , cast(observation_type as TEXT ) as observation_type\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(result as TEXT ) as result\n    , cast(source_units as TEXT ) as source_units\n    , cast(normalized_units as TEXT ) as normalized_units\n    , cast(source_reference_range_low as TEXT ) as source_reference_range_low\n    , cast(source_reference_range_high as TEXT ) as source_reference_range_high\n    , cast(normalized_reference_range_low as TEXT ) as normalized_reference_range_low\n    , cast(normalized_reference_range_high as TEXT ) as normalized_reference_range_high\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-11 23:52:28.343846+00:00' as timestamp ) as tuva_last_run\nfrom tuva.input_layer.observation", "relation_name": "dev_coco.core._stg_clinical_observation"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.806026Z", "completed_at": "2024-10-11T23:52:33.831899Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.840418Z", "completed_at": "2024-10-11T23:52:33.840423Z"}], "thread_id": "Thread-7", "execution_time": 0.051583051681518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_city", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'CITY' AS field_name\n    , case when m.city is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(city as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_coco.data_quality.location_city"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.815421Z", "completed_at": "2024-10-11T23:52:33.838523Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.841737Z", "completed_at": "2024-10-11T23:52:33.841741Z"}], "thread_id": "Thread-6", "execution_time": 0.051629066467285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_facility_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n    m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    ,'LOCATION' AS table_name\n    ,'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    ,'FACILITY_TYPE' AS field_name\n    ,case when m.facility_type is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(facility_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_coco.data_quality.location_facility_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.810996Z", "completed_at": "2024-10-11T23:52:33.838797Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.842224Z", "completed_at": "2024-10-11T23:52:33.842228Z"}], "thread_id": "Thread-4", "execution_time": 0.05253291130065918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_data_source", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' AS field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_coco.data_quality.location_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.822442Z", "completed_at": "2024-10-11T23:52:33.840136Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.843699Z", "completed_at": "2024-10-11T23:52:33.843703Z"}], "thread_id": "Thread-9", "execution_time": 0.05202484130859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_latitude", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'LATITUDE' as field_name\n    , case when m.latitude is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(latitude as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_coco.data_quality.location_latitude"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.827565Z", "completed_at": "2024-10-11T23:52:33.841442Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.849761Z", "completed_at": "2024-10-11T23:52:33.849769Z"}], "thread_id": "Thread-5", "execution_time": 0.057821035385131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_location_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n    m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    ,'LOCATION' AS table_name\n    ,'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    ,'LOCATION_ID' AS field_name\n    ,case when m.location_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(location_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_coco.data_quality.location_location_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.833882Z", "completed_at": "2024-10-11T23:52:33.843114Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.851362Z", "completed_at": "2024-10-11T23:52:33.851367Z"}], "thread_id": "Thread-10", "execution_time": 0.045723915100097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_longitude", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'LONGITUDE' as field_name\n    , case when m.longitude is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(longitude as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_coco.data_quality.location_longitude"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.844808Z", "completed_at": "2024-10-11T23:52:33.854540Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.862413Z", "completed_at": "2024-10-11T23:52:33.862420Z"}], "thread_id": "Thread-2", "execution_time": 0.028943777084350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_name", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'NAME' as field_name\n    , case when m.name is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(name as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_coco.data_quality.location_name"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.856615Z", "completed_at": "2024-10-11T23:52:33.880876Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.894871Z", "completed_at": "2024-10-11T23:52:33.894879Z"}], "thread_id": "Thread-3", "execution_time": 0.0439753532409668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_parent_organization", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'PARENT_ORGANIZATION' AS field_name\n    , case when m.parent_organization is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(parent_organization as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_coco.data_quality.location_parent_organization"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.863206Z", "completed_at": "2024-10-11T23:52:33.889646Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.895800Z", "completed_at": "2024-10-11T23:52:33.895805Z"}], "thread_id": "Thread-8", "execution_time": 0.04390597343444824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_state", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'STATE' as field_name\n    , case when m.state is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(state as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_coco.data_quality.location_state"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.867931Z", "completed_at": "2024-10-11T23:52:33.889959Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.896291Z", "completed_at": "2024-10-11T23:52:33.896296Z"}], "thread_id": "Thread-7", "execution_time": 0.043630123138427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_zip_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'ZIP_CODE' as field_name\n    , case when m.zip_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(zip_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.location m", "relation_name": "dev_coco.data_quality.location_zip_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.872642Z", "completed_at": "2024-10-11T23:52:33.894609Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.897603Z", "completed_at": "2024-10-11T23:52:33.897608Z"}], "thread_id": "Thread-6", "execution_time": 0.04417610168457031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_data_source", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' as field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.876396Z", "completed_at": "2024-10-11T23:52:33.895342Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.898456Z", "completed_at": "2024-10-11T23:52:33.898460Z"}], "thread_id": "Thread-4", "execution_time": 0.044648170471191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_encounter_id", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    ,'OBSERVATION' AS table_name\n    ,'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    ,'ENCOUNTER_ID' as field_name\n    ,case when m.encounter_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(encounter_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.885792Z", "completed_at": "2024-10-11T23:52:33.896804Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.899776Z", "completed_at": "2024-10-11T23:52:33.899779Z"}], "thread_id": "Thread-5", "execution_time": 0.04398608207702637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_normalized_code_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE_TYPE' AS field_name\n    , case when m.normalized_code_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_code_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_normalized_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.881134Z", "completed_at": "2024-10-11T23:52:33.897299Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.904243Z", "completed_at": "2024-10-11T23:52:33.904250Z"}], "thread_id": "Thread-9", "execution_time": 0.048975229263305664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_normalized_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE' as field_name\n    , case when m.normalized_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_normalized_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.890605Z", "completed_at": "2024-10-11T23:52:33.898895Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.905643Z", "completed_at": "2024-10-11T23:52:33.905647Z"}], "thread_id": "Thread-10", "execution_time": 0.042788028717041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_normalized_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_DESCRIPTION' as field_name\n    , case when m.normalized_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(normalized_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_normalized_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.900226Z", "completed_at": "2024-10-11T23:52:33.907861Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.913965Z", "completed_at": "2024-10-11T23:52:33.913972Z"}], "thread_id": "Thread-2", "execution_time": 0.023792743682861328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_normalized_reference_range_high", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_REFERENCE_RANGE_HIGH' as field_name\n    , case when m.normalized_reference_range_high is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_reference_range_high as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_normalized_reference_range_high"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.909980Z", "completed_at": "2024-10-11T23:52:33.933565Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.948492Z", "completed_at": "2024-10-11T23:52:33.948502Z"}], "thread_id": "Thread-3", "execution_time": 0.043560028076171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_normalized_reference_range_low", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_REFERENCE_RANGE_LOW' AS field_name\n    , case when m.normalized_reference_range_low is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_reference_range_low as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_normalized_reference_range_low"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.914988Z", "completed_at": "2024-10-11T23:52:33.937772Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.949437Z", "completed_at": "2024-10-11T23:52:33.949442Z"}], "thread_id": "Thread-8", "execution_time": 0.043431997299194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_normalized_units", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_UNITS' as field_name\n    , case when m.normalized_units is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(normalized_units as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_normalized_units"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.919769Z", "completed_at": "2024-10-11T23:52:33.941782Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.950051Z", "completed_at": "2024-10-11T23:52:33.950058Z"}], "thread_id": "Thread-7", "execution_time": 0.043768882751464844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_observation_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'OBSERVATION_DATE' as field_name\n    , case\n        when m.observation_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.observation_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.observation_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.observation_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.observation_date <= cast('1901-01-01' as date) then 'too old'\n        else null\n    end as invalid_reason\n    , cast(observation_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_observation_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.925268Z", "completed_at": "2024-10-11T23:52:33.948101Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.951453Z", "completed_at": "2024-10-11T23:52:33.951458Z"}], "thread_id": "Thread-6", "execution_time": 0.04422330856323242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_observation_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'OBSERVATION_ID' as field_name\n    , case when m.observation_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(observation_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_observation_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.929474Z", "completed_at": "2024-10-11T23:52:33.949138Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.952734Z", "completed_at": "2024-10-11T23:52:33.952739Z"}], "thread_id": "Thread-4", "execution_time": 0.044712066650390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_observation_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'OBSERVATION_TYPE' as field_name\n    , case when m.observation_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(observation_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_observation_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.933929Z", "completed_at": "2024-10-11T23:52:33.950561Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.954766Z", "completed_at": "2024-10-11T23:52:33.954771Z"}], "thread_id": "Thread-5", "execution_time": 0.045660972595214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_panel_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'PANEL_ID' as field_name\n    , case when m.panel_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(panel_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_panel_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.938037Z", "completed_at": "2024-10-11T23:52:33.951196Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.959705Z", "completed_at": "2024-10-11T23:52:33.959713Z"}], "thread_id": "Thread-9", "execution_time": 0.05033397674560547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_patient_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'PATIENT_ID' as field_name\n    , case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(patient_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.942553Z", "completed_at": "2024-10-11T23:52:33.954150Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.963024Z", "completed_at": "2024-10-11T23:52:33.963030Z"}], "thread_id": "Thread-10", "execution_time": 0.048397064208984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_result", "compiled": true, "compiled_code": "\n\n\nSELECT\n    m.data_source\n    ,coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    ,'OBSERVATION' AS table_name\n    ,'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    ,'RESULT' as field_name\n    ,case when m.result is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(substring(result, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_result"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.955273Z", "completed_at": "2024-10-11T23:52:33.965508Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:33.972587Z", "completed_at": "2024-10-11T23:52:33.972596Z"}], "thread_id": "Thread-2", "execution_time": 0.030597925186157227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_source_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE' as field_name\n    , case when m.source_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_source_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.967786Z", "completed_at": "2024-10-11T23:52:33.994996Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.007878Z", "completed_at": "2024-10-11T23:52:34.007887Z"}], "thread_id": "Thread-3", "execution_time": 0.04734301567077637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_source_code_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE_TYPE' as field_name\n    , case when m.source_code_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_source_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.973213Z", "completed_at": "2024-10-11T23:52:33.995549Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.013830Z", "completed_at": "2024-10-11T23:52:34.013838Z"}], "thread_id": "Thread-8", "execution_time": 0.051223039627075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_source_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'SOURCE_DESCRIPTION' as field_name\n    , case when m.source_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(source_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_source_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.978495Z", "completed_at": "2024-10-11T23:52:34.007134Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.014561Z", "completed_at": "2024-10-11T23:52:34.014566Z"}], "thread_id": "Thread-7", "execution_time": 0.05110931396484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_source_reference_range_high", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'SOURCE_REFERENCE_RANGE_HIGH' as field_name\n    , case when m.source_reference_range_high is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_reference_range_high as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_source_reference_range_high"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.983617Z", "completed_at": "2024-10-11T23:52:34.008416Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.015718Z", "completed_at": "2024-10-11T23:52:34.015722Z"}], "thread_id": "Thread-6", "execution_time": 0.0511927604675293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_source_reference_range_low", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS table_name\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'SOURCE_REFERENCE_RANGE_LOW' as field_name\n    , case when m.source_reference_range_low is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_reference_range_low as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_source_reference_range_low"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.989354Z", "completed_at": "2024-10-11T23:52:34.008666Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.016187Z", "completed_at": "2024-10-11T23:52:34.016191Z"}], "thread_id": "Thread-4", "execution_time": 0.05104422569274902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__observation_source_units", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.observation_date,cast('1900-01-01' as date)) as source_date\n    , 'OBSERVATION' AS TABLE_NAME\n    , 'Observation ID' as drill_down_key\n    , coalesce(observation_id, 'NULL') AS drill_down_value\n    , 'SOURCE_UNITS' as field_name\n    , case when m.source_units is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_units as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.observation m", "relation_name": "dev_coco.data_quality.observation_source_units"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:33.995944Z", "completed_at": "2024-10-11T23:52:34.016612Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.023766Z", "completed_at": "2024-10-11T23:52:34.023773Z"}], "thread_id": "Thread-5", "execution_time": 0.056915283203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_practitioner", "compiled": true, "compiled_code": "\n\nselect\n    cast(practitioner_id as TEXT ) as practitioner_id\n    , cast(npi as TEXT ) as npi\n    , cast(first_name as TEXT ) as first_name\n    , cast(last_name as TEXT ) as last_name\n    , cast(practice_affiliation as TEXT ) as practice_affiliation\n    , cast(specialty as TEXT ) as specialty\n    , cast(sub_specialty as TEXT ) as sub_specialty\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-11 23:52:28.343846+00:00' as timestamp ) as tuva_last_run\nfrom tuva.input_layer.practitioner", "relation_name": "dev_coco.core._stg_clinical_practitioner"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.001938Z", "completed_at": "2024-10-11T23:52:34.016894Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.024236Z", "completed_at": "2024-10-11T23:52:34.024240Z"}], "thread_id": "Thread-9", "execution_time": 0.05708789825439453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_data_source", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' as field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m", "relation_name": "dev_coco.data_quality.practitioner_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.008956Z", "completed_at": "2024-10-11T23:52:34.022524Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.026413Z", "completed_at": "2024-10-11T23:52:34.026418Z"}], "thread_id": "Thread-10", "execution_time": 0.04874920845031738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_first_name", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'FIRST_NAME' as field_name\n    , case when m.first_name is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(first_name as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m", "relation_name": "dev_coco.data_quality.practitioner_first_name"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.017836Z", "completed_at": "2024-10-11T23:52:34.028195Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.035665Z", "completed_at": "2024-10-11T23:52:34.035672Z"}], "thread_id": "Thread-2", "execution_time": 0.028278827667236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_last_name", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'LAST_NAME' as field_name\n    , case when m.last_name is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(last_name as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m", "relation_name": "dev_coco.data_quality.practitioner_last_name"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.030407Z", "completed_at": "2024-10-11T23:52:34.068799Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.075305Z", "completed_at": "2024-10-11T23:52:34.075315Z"}], "thread_id": "Thread-3", "execution_time": 0.052613019943237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_practice_affiliation", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'PRACTICE_AFFILIATION' AS field_name\n    , case when m.practice_affiliation is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(practice_affiliation as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m", "relation_name": "dev_coco.data_quality.practitioner_practice_affiliation"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.037052Z", "completed_at": "2024-10-11T23:52:34.069757Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.086953Z", "completed_at": "2024-10-11T23:52:34.086963Z"}], "thread_id": "Thread-8", "execution_time": 0.062372684478759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_practitioner_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'PRACTITIONER_ID' as field_name\n    , case when m.practitioner_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(practitioner_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m", "relation_name": "dev_coco.data_quality.practitioner_practitioner_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.041763Z", "completed_at": "2024-10-11T23:52:34.070408Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.087778Z", "completed_at": "2024-10-11T23:52:34.087784Z"}], "thread_id": "Thread-7", "execution_time": 0.06287622451782227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_specialty", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'SPECIALTY' as field_name\n    , case when m.specialty is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(specialty as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m", "relation_name": "dev_coco.data_quality.practitioner_specialty"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.046670Z", "completed_at": "2024-10-11T23:52:34.075829Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.088679Z", "completed_at": "2024-10-11T23:52:34.088683Z"}], "thread_id": "Thread-6", "execution_time": 0.06084084510803223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_sub_specialty", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'SUB_SPECIALTY' as field_name\n    , case when m.sub_specialty is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(sub_specialty as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m", "relation_name": "dev_coco.data_quality.practitioner_sub_specialty"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.052093Z", "completed_at": "2024-10-11T23:52:34.076093Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.089165Z", "completed_at": "2024-10-11T23:52:34.089170Z"}], "thread_id": "Thread-4", "execution_time": 0.060781002044677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_patient", "compiled": true, "compiled_code": "\n\nwith tuva_last_run as(\n    select\n       cast('2024-10-11 23:52:28.343846+00:00' as timestamp ) as tuva_last_run_datetime\n       , cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date ) as tuva_last_run_date\n)\nSELECT\n    cast(patient_id as TEXT ) as patient_id\n    , cast(first_name as TEXT ) as first_name\n    , cast(last_name as TEXT ) as last_name\n    , cast(sex as TEXT ) as sex\n    , cast(race as TEXT ) as race\n    , try_cast( birth_date as date ) as birth_date\n    , try_cast( death_date as date ) as death_date\n    , cast(death_flag as integer ) as death_flag\n    , cast(social_security_number as TEXT ) as social_security_number\n    , cast(address as TEXT ) as address\n    , cast(city as TEXT ) as city\n    , cast(state as TEXT ) as state\n    , cast(zip_code as TEXT ) as zip_code\n    , cast(county as TEXT ) as county\n    , cast(latitude as float ) as latitude\n    , cast(longitude as float ) as longitude\n    , cast(data_source as TEXT ) as data_source\n    , cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) as age\n    , cast(\n        CASE\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 10 THEN '0-9'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 20 THEN '10-19'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 30 THEN '20-29'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 40 THEN '30-39'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 50 THEN '40-49'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 60 THEN '50-59'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 70 THEN '60-69'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 80 THEN '70-79'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 90 THEN '80-89'\n            ELSE '90+'\n        END as TEXT\n    ) AS age_group\n    , tuva_last_run_datetime as tuva_last_run\nFROM tuva.input_layer.patient\ncross join tuva_last_run", "relation_name": "dev_coco.core._stg_clinical_patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.070730Z", "completed_at": "2024-10-11T23:52:34.089705Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.096906Z", "completed_at": "2024-10-11T23:52:34.096912Z"}], "thread_id": "Thread-5", "execution_time": 0.060526132583618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_address", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'ADDRESS' as field_name\n    , case when m.address is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(address as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_coco.data_quality.patient_address"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.076323Z", "completed_at": "2024-10-11T23:52:34.095652Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.098254Z", "completed_at": "2024-10-11T23:52:34.098259Z"}], "thread_id": "Thread-9", "execution_time": 0.06156492233276367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_birth_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'BIRTH_DATE' AS field_name\n    , case\n        when m.birth_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.birth_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.birth_date > m.death_date then 'invalid'\n        when m.birth_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.birth_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.birth_date <= cast('1901-01-01' as date) then 'too old'\n        when m.birth_date > m.death_date then 'Birth date after death date'\n        else null\n    end as invalid_reason\n    , cast(birth_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_coco.data_quality.patient_birth_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.082374Z", "completed_at": "2024-10-11T23:52:34.095932Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.098703Z", "completed_at": "2024-10-11T23:52:34.098707Z"}], "thread_id": "Thread-10", "execution_time": 0.052481889724731445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_city", "compiled": true, "compiled_code": "\n\n\nSELECT\n    m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    ,'PATIENT' AS table_name\n    ,'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    ,'CITY' AS field_name\n    ,case when m.city is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(city as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_coco.data_quality.patient_city"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.090343Z", "completed_at": "2024-10-11T23:52:34.099162Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.106774Z", "completed_at": "2024-10-11T23:52:34.106780Z"}], "thread_id": "Thread-2", "execution_time": 0.03680300712585449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_county", "compiled": true, "compiled_code": "\n\n\nSELECT\n    m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    ,'PATIENT' AS table_name\n    ,'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    ,'COUNTY' as field_name\n    ,case when m.county is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(county as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_coco.data_quality.patient_county"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.100745Z", "completed_at": "2024-10-11T23:52:34.122481Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.133826Z", "completed_at": "2024-10-11T23:52:34.133834Z"}], "thread_id": "Thread-3", "execution_time": 0.03856992721557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_data_source", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' as field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_coco.data_quality.patient_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.108944Z", "completed_at": "2024-10-11T23:52:34.133084Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.149540Z", "completed_at": "2024-10-11T23:52:34.149548Z"}], "thread_id": "Thread-8", "execution_time": 0.052252769470214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_death_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'DEATH_DATE' AS field_name\n    , case\n        when m.death_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.death_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.death_date > m.birth_date then 'invalid'\n        when m.death_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.death_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.death_date <= cast('1901-01-01' as date) then 'too old'\n        when m.death_date > m.birth_date then 'Death date after birth date'\n        else null\n    end as invalid_reason\n    , cast(death_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_coco.data_quality.patient_death_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.115359Z", "completed_at": "2024-10-11T23:52:34.133568Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.150257Z", "completed_at": "2024-10-11T23:52:34.150263Z"}], "thread_id": "Thread-7", "execution_time": 0.052637338638305664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_death_flag", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'DEATH_FLAG' as field_name\n    , case when m.death_flag is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(death_flag as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_coco.data_quality.patient_death_flag"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.122753Z", "completed_at": "2024-10-11T23:52:34.148757Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.151722Z", "completed_at": "2024-10-11T23:52:34.151729Z"}], "thread_id": "Thread-6", "execution_time": 0.052413225173950195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_first_name", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'FIRST_NAME' as field_name\n    , case when m.first_name is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(first_name as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_coco.data_quality.patient_first_name"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.127394Z", "completed_at": "2024-10-11T23:52:34.149260Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.157902Z", "completed_at": "2024-10-11T23:52:34.157910Z"}], "thread_id": "Thread-4", "execution_time": 0.058303117752075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_last_name", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'LAST_NAME' AS field_name\n    , case when m.last_name is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(last_name as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_coco.data_quality.patient_last_name"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.134405Z", "completed_at": "2024-10-11T23:52:34.152263Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.160114Z", "completed_at": "2024-10-11T23:52:34.160119Z"}], "thread_id": "Thread-5", "execution_time": 0.0515289306640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_latitude", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'LATITUDE' as field_name\n    , case when m.latitude is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(latitude as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_coco.data_quality.patient_latitude"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.144264Z", "completed_at": "2024-10-11T23:52:34.157298Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.160721Z", "completed_at": "2024-10-11T23:52:34.160727Z"}], "thread_id": "Thread-10", "execution_time": 0.04020524024963379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_patient_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'PATIENT_ID' as field_name\n    , case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(patient_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_coco.data_quality.patient_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.138840Z", "completed_at": "2024-10-11T23:52:34.157541Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.161213Z", "completed_at": "2024-10-11T23:52:34.161217Z"}], "thread_id": "Thread-9", "execution_time": 0.041043996810913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_longitude", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'LONGITUDE' as field_name\n    , case when m.longitude is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(longitude as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_coco.data_quality.patient_longitude"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.152553Z", "completed_at": "2024-10-11T23:52:34.162320Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.165119Z", "completed_at": "2024-10-11T23:52:34.165124Z"}], "thread_id": "Thread-2", "execution_time": 0.03246593475341797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_state", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'STATE' as field_name\n    , case when m.state is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(state as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_coco.data_quality.patient_state"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.165823Z", "completed_at": "2024-10-11T23:52:34.189632Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.203646Z", "completed_at": "2024-10-11T23:52:34.203657Z"}], "thread_id": "Thread-3", "execution_time": 0.044365882873535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_zip_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'ZIP_CODE' as field_name\n    , case when m.zip_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(zip_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m", "relation_name": "dev_coco.data_quality.patient_zip_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.185130Z", "completed_at": "2024-10-11T23:52:34.204167Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.210842Z", "completed_at": "2024-10-11T23:52:34.210848Z"}], "thread_id": "Thread-6", "execution_time": 0.047669172286987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_data_source", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' AS field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.180215Z", "completed_at": "2024-10-11T23:52:34.209191Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.211873Z", "completed_at": "2024-10-11T23:52:34.211878Z"}], "thread_id": "Thread-7", "execution_time": 0.049347877502441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_atc_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'ATC_DESCRIPTION' as field_name\n    , case when m.atc_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(atc_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_atc_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.172062Z", "completed_at": "2024-10-11T23:52:34.209440Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.212364Z", "completed_at": "2024-10-11T23:52:34.212368Z"}], "thread_id": "Thread-8", "execution_time": 0.0504150390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_medication", "compiled": true, "compiled_code": "\n\nselect\n    cast(medication_id as TEXT ) as medication_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , try_cast( dispensing_date as date ) as dispensing_date\n    , try_cast( prescribing_date as date ) as prescribing_date\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(ndc_code as TEXT ) as ndc_code\n    , cast(ndc_description as TEXT ) as ndc_description\n    , cast(rxnorm_code as TEXT ) as rxnorm_code\n    , cast(rxnorm_description as TEXT ) as rxnorm_description \n    , cast(atc_code as TEXT ) as atc_code\n    , cast(atc_description as TEXT ) as atc_description\n    , cast(route as TEXT ) as route\n    , cast(strength as TEXT ) as strength\n    , cast(quantity as integer ) as quantity\n    , cast(quantity_unit as TEXT ) as quantity_unit\n    , cast(days_supply as integer ) as days_supply\n    , cast(practitioner_id as TEXT ) as practitioner_id\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-11 23:52:28.343846+00:00' as timestamp ) as tuva_last_run\nfrom tuva.input_layer.medication", "relation_name": "dev_coco.core._stg_clinical_medication"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.190139Z", "completed_at": "2024-10-11T23:52:34.210158Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.217192Z", "completed_at": "2024-10-11T23:52:34.217199Z"}], "thread_id": "Thread-4", "execution_time": 0.052726030349731445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_days_supply", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'DAYS_SUPPLY' AS field_name\n    , case when m.days_supply is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(days_supply as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_days_supply"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.199695Z", "completed_at": "2024-10-11T23:52:34.211335Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.218311Z", "completed_at": "2024-10-11T23:52:34.218315Z"}], "thread_id": "Thread-10", "execution_time": 0.04711794853210449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_encounter_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'ENCOUNTER_ID' as field_name\n    , case when m.encounter_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(encounter_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.194530Z", "completed_at": "2024-10-11T23:52:34.211592Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.218783Z", "completed_at": "2024-10-11T23:52:34.218788Z"}], "thread_id": "Thread-5", "execution_time": 0.04790019989013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_dispensing_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'DISPENSING_DATE' as field_name\n    , case\n        when m.dispensing_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.dispensing_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.dispensing_date < m.prescribing_date then 'invalid'\n        when m.dispensing_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.dispensing_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.dispensing_date <= cast('1901-01-01' as date) then 'too old'\n        when m.dispensing_date < m.prescribing_date then 'Dispensing date before prescribing date'\n        else null\n    end as invalid_reason\n    , cast(dispensing_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_dispensing_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.204435Z", "completed_at": "2024-10-11T23:52:34.216912Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.220057Z", "completed_at": "2024-10-11T23:52:34.220062Z"}], "thread_id": "Thread-9", "execution_time": 0.04860997200012207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_medication_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'MEDICATION_ID' AS field_name\n    , case when m.medication_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(medication_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_medication_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.212854Z", "completed_at": "2024-10-11T23:52:34.221163Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.227795Z", "completed_at": "2024-10-11T23:52:34.227802Z"}], "thread_id": "Thread-2", "execution_time": 0.03390312194824219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_ndc_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'NDC_CODE' as field_name\n    , case when m.ndc_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(ndc_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_ndc_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.223515Z", "completed_at": "2024-10-11T23:52:34.234994Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.258034Z", "completed_at": "2024-10-11T23:52:34.258043Z"}], "thread_id": "Thread-3", "execution_time": 0.04043984413146973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_patient_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'PATIENT_ID' as field_name\n    , case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(patient_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.230523Z", "completed_at": "2024-10-11T23:52:34.257747Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.264217Z", "completed_at": "2024-10-11T23:52:34.264224Z"}], "thread_id": "Thread-6", "execution_time": 0.04289698600769043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_practitioner_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'PRACTITIONER_ID' as field_name\n    , case when m.practitioner_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(practitioner_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_practitioner_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.235224Z", "completed_at": "2024-10-11T23:52:34.263368Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.270949Z", "completed_at": "2024-10-11T23:52:34.270956Z"}], "thread_id": "Thread-7", "execution_time": 0.04871010780334473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_prescribing_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'PRESCRIBING_DATE' as field_name\n    , case\n        when m.prescribing_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.prescribing_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.prescribing_date > m.dispensing_date then 'invalid'\n        when m.prescribing_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.prescribing_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.prescribing_date <= cast('1901-01-01' as date) then 'too old'\n        when m.prescribing_date > m.dispensing_date then 'Prescribing date after dispensing date'\n        else null\n    end as invalid_reason\n    , cast(prescribing_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_prescribing_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.240341Z", "completed_at": "2024-10-11T23:52:34.263619Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.271459Z", "completed_at": "2024-10-11T23:52:34.271463Z"}], "thread_id": "Thread-8", "execution_time": 0.04891610145568848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_quantity", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'QUANTITY' as field_name\n    , case when m.quantity is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(quantity as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_quantity"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.244386Z", "completed_at": "2024-10-11T23:52:34.263929Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.271917Z", "completed_at": "2024-10-11T23:52:34.271921Z"}], "thread_id": "Thread-4", "execution_time": 0.04877805709838867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_quantity_unit", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'QUANTITY_UNIT' as field_name\n    , case when m.quantity_unit is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(quantity_unit as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_quantity_unit"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.249528Z", "completed_at": "2024-10-11T23:52:34.266245Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.273493Z", "completed_at": "2024-10-11T23:52:34.273497Z"}], "thread_id": "Thread-10", "execution_time": 0.04500603675842285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_route", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'ROUTE' as field_name\n    , case when m.route is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(route as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_route"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.253860Z", "completed_at": "2024-10-11T23:52:34.266598Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.273926Z", "completed_at": "2024-10-11T23:52:34.273930Z"}], "thread_id": "Thread-5", "execution_time": 0.0451509952545166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_rxnorm_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'RXNORM_DESCRIPTION' as field_name\n    , case when m.rxnorm_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(rxnorm_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_rxnorm_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.259192Z", "completed_at": "2024-10-11T23:52:34.272341Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.275620Z", "completed_at": "2024-10-11T23:52:34.275624Z"}], "thread_id": "Thread-9", "execution_time": 0.04607510566711426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_source_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE' as field_name\n    , case when m.source_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_source_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.266879Z", "completed_at": "2024-10-11T23:52:34.275077Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.278444Z", "completed_at": "2024-10-11T23:52:34.278449Z"}], "thread_id": "Thread-2", "execution_time": 0.029364824295043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_source_code_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE_TYPE' as field_name\n    , case when m.source_code_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_source_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.279778Z", "completed_at": "2024-10-11T23:52:34.310523Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.324594Z", "completed_at": "2024-10-11T23:52:34.324604Z"}], "thread_id": "Thread-3", "execution_time": 0.05176591873168945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_source_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'SOURCE_DESCRIPTION' as field_name\n    , case when m.source_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(source_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_source_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.288808Z", "completed_at": "2024-10-11T23:52:34.324269Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.329988Z", "completed_at": "2024-10-11T23:52:34.329996Z"}], "thread_id": "Thread-6", "execution_time": 0.0540008544921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_strength", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'STRENGTH' as field_name\n    , case when m.strength is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(strength as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m", "relation_name": "dev_coco.data_quality.medication_strength"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.297329Z", "completed_at": "2024-10-11T23:52:34.325154Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.330841Z", "completed_at": "2024-10-11T23:52:34.330846Z"}], "thread_id": "Thread-7", "execution_time": 0.053405046463012695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_procedure", "compiled": true, "compiled_code": "\n\nselect\n    cast(procedure_id as TEXT ) as procedure_id \n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(claim_id as TEXT ) as claim_id\n    , try_cast( procedure_date as date ) as procedure_date\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(modifier_1 as TEXT ) as modifier_1\n    , cast(modifier_2 as TEXT ) as modifier_2\n    , cast(modifier_3 as TEXT ) as modifier_3\n    , cast(modifier_4 as TEXT ) as modifier_4\n    , cast(modifier_5 as TEXT ) as modifier_5\n    , cast(practitioner_id as TEXT ) as practitioner_id\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-11 23:52:28.343846+00:00' as timestamp ) as tuva_last_run\nfrom tuva.input_layer.procedure", "relation_name": "dev_coco.core._stg_clinical_procedure"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.306441Z", "completed_at": "2024-10-11T23:52:34.325717Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.335656Z", "completed_at": "2024-10-11T23:52:34.335663Z"}], "thread_id": "Thread-8", "execution_time": 0.057630062103271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_claim_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'CLAIM_ID' as field_name\n    , case when m.claim_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(claim_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_coco.data_quality.procedure_claim_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.315491Z", "completed_at": "2024-10-11T23:52:34.335121Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.337659Z", "completed_at": "2024-10-11T23:52:34.337664Z"}], "thread_id": "Thread-10", "execution_time": 0.05273103713989258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_encounter_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'ENCOUNTER_ID' as field_name\n    , case when m.encounter_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(encounter_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_coco.data_quality.procedure_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.311142Z", "completed_at": "2024-10-11T23:52:34.335392Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.338129Z", "completed_at": "2024-10-11T23:52:34.338133Z"}], "thread_id": "Thread-4", "execution_time": 0.059290170669555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_data_source", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'DATA_SOURCE' as field_name\n    , case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_coco.data_quality.procedure_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.320364Z", "completed_at": "2024-10-11T23:52:34.336101Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.339170Z", "completed_at": "2024-10-11T23:52:34.339174Z"}], "thread_id": "Thread-5", "execution_time": 0.053772926330566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_normalized_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_DESCRIPTION' AS field_name\n    , case when m.normalized_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(normalized_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_coco.data_quality.procedure_normalized_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.325991Z", "completed_at": "2024-10-11T23:52:34.337321Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.340424Z", "completed_at": "2024-10-11T23:52:34.340428Z"}], "thread_id": "Thread-9", "execution_time": 0.051988840103149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_patient_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'PATIENT_ID' AS field_name\n    , case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(patient_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_coco.data_quality.procedure_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.331351Z", "completed_at": "2024-10-11T23:52:34.338912Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.341766Z", "completed_at": "2024-10-11T23:52:34.341771Z"}], "thread_id": "Thread-2", "execution_time": 0.03102588653564453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_practitioner_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'PRACTITIONER_ID' AS field_name\n    , case when m.practitioner_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(practitioner_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_coco.data_quality.procedure_practitioner_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.342767Z", "completed_at": "2024-10-11T23:52:34.359310Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.368561Z", "completed_at": "2024-10-11T23:52:34.368570Z"}], "thread_id": "Thread-3", "execution_time": 0.0319058895111084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_procedure_date", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'PROCEDURE_DATE' as field_name\n    , case\n        when m.procedure_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.procedure_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.procedure_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.procedure_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.procedure_date <= cast('1901-01-01' as date) then 'too old'\n        else null\n    end as invalid_reason\n    , cast(procedure_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_coco.data_quality.procedure_procedure_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.353865Z", "completed_at": "2024-10-11T23:52:34.369037Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.378992Z", "completed_at": "2024-10-11T23:52:34.378998Z"}], "thread_id": "Thread-7", "execution_time": 0.038926124572753906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_source_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE' as field_name\n    , case when m.source_code is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_coco.data_quality.procedure_source_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.349873Z", "completed_at": "2024-10-11T23:52:34.369284Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.379525Z", "completed_at": "2024-10-11T23:52:34.379529Z"}], "thread_id": "Thread-6", "execution_time": 0.03998208045959473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_procedure_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'PROCEDURE_ID' AS field_name\n    , case when m.procedure_id is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(procedure_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_coco.data_quality.procedure_procedure_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.359797Z", "completed_at": "2024-10-11T23:52:34.378342Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.382836Z", "completed_at": "2024-10-11T23:52:34.382844Z"}], "thread_id": "Thread-8", "execution_time": 0.041435956954956055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_source_code_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'SOURCE_CODE_TYPE' as field_name\n    , case when m.source_code_type is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(source_code_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_coco.data_quality.procedure_source_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.364675Z", "completed_at": "2024-10-11T23:52:34.380011Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.385170Z", "completed_at": "2024-10-11T23:52:34.385174Z"}], "thread_id": "Thread-10", "execution_time": 0.03676414489746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_source_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'SOURCE_DESCRIPTION' as field_name\n    , case when m.source_description is not null then 'valid' else 'null' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(substring(source_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m", "relation_name": "dev_coco.data_quality.procedure_source_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.369513Z", "completed_at": "2024-10-11T23:52:34.383379Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.386359Z", "completed_at": "2024-10-11T23:52:34.386364Z"}], "thread_id": "Thread-4", "execution_time": 0.03766298294067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.input_layer.eligibility", "compiled": true, "compiled_code": "select\n      patient_id\n    , member_id\n    , subscriber_id\n    , gender\n    , race\n    , birth_date\n    , death_date\n    , death_flag\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , payer_type\n    , plan\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , first_name\n    , last_name\n    , social_security_number\n    , subscriber_relation\n    , address\n    , city\n    , state\n    , zip_code\n    , phone\n    , data_source\n    , file_name\n    , ingest_datetime\nfrom dev_coco._tuva_synthetic.eligibility_seed", "relation_name": "tuva.input_layer.eligibility"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.375153Z", "completed_at": "2024-10-11T23:52:34.384337Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.387369Z", "completed_at": "2024-10-11T23:52:34.387374Z"}], "thread_id": "Thread-9", "execution_time": 0.028706073760986328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.input_layer.pharmacy_claim", "compiled": true, "compiled_code": "select\n      claim_id\n    , claim_line_number\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , prescribing_provider_npi\n    , dispensing_provider_npi\n    , dispensing_date\n    , ndc_code\n    , quantity\n    , days_supply\n    , refills\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , in_network_flag\n    , data_source\n    , file_name\n    , ingest_datetime\nfrom dev_coco._tuva_synthetic.pharmacy_claim_seed", "relation_name": "tuva.input_layer.pharmacy_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.372233Z", "completed_at": "2024-10-11T23:52:34.384608Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.387805Z", "completed_at": "2024-10-11T23:52:34.387809Z"}], "thread_id": "Thread-5", "execution_time": 0.03827714920043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.input_layer.medical_claim", "compiled": true, "compiled_code": "select\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\n    , file_name\n    , ingest_datetime\nfrom dev_coco._tuva_synthetic.medical_claim_seed", "relation_name": "tuva.input_layer.medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.380279Z", "completed_at": "2024-10-11T23:52:34.386082Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.389102Z", "completed_at": "2024-10-11T23:52:34.389106Z"}], "thread_id": "Thread-2", "execution_time": 0.025454044342041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.input_layer.provider_attribution", "compiled": true, "compiled_code": "select\n      patient_id\n    , year_month\n    , payer\n    , plan\n    , data_source\n    , payer_attributed_provider\n    , payer_attributed_provider_practice\n    , payer_attributed_provider_organization\n    , payer_attributed_provider_lob\n    , custom_attributed_provider\n    , custom_attributed_provider_practice\n    , custom_attributed_provider_organization\n    , custom_attributed_provider_lob\nfrom dev_coco._tuva_synthetic.provider_attribution_seed", "relation_name": "tuva.input_layer.provider_attribution"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.389820Z", "completed_at": "2024-10-11T23:52:34.407328Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.420063Z", "completed_at": "2024-10-11T23:52:34.420071Z"}], "thread_id": "Thread-3", "execution_time": 0.03650808334350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ccsr__dx_vertical_pivot", "compiled": true, "compiled_code": "\n\nwith codes as (\n    \n    select\n        icd_10_cm_code as code, \n        icd_10_cm_code_description as code_description,\n        -- loop to generate columns for CCSR categories 1-6\n        ccsr_category_1,\n        ccsr_category_1_description,\n        ccsr_category_2,\n        ccsr_category_2_description,\n        ccsr_category_3,\n        ccsr_category_3_description,\n        ccsr_category_4,\n        ccsr_category_4_description,\n        ccsr_category_5,\n        ccsr_category_5_description,\n        ccsr_category_6,\n        ccsr_category_6_description,\n        default_ccsr_category_ip,\n        default_ccsr_category_op\n    from dev_coco.ccsr._value_set_dxccsr_v2023_1_cleaned_map\n\n), long_union as (\n    -- generate select & union statements to pivot category columns to rows\n    \n    select \n        code,\n        code_description,\n        substring(ccsr_category_1, 1, 3) as ccsr_parent_category,\n        ccsr_category_1 as ccsr_category,\n        ccsr_category_1_description as ccsr_category_description,\n        1 as ccsr_category_rank,\n        CASE WHEN ccsr_category_1 = default_ccsr_category_ip THEN 1 ELSE 0 END as is_ip_default_category,\n        CASE WHEN ccsr_category_1 = default_ccsr_category_op THEN 1 ELSE 0 END as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        substring(ccsr_category_2, 1, 3) as ccsr_parent_category,\n        ccsr_category_2 as ccsr_category,\n        ccsr_category_2_description as ccsr_category_description,\n        2 as ccsr_category_rank,\n        CASE WHEN ccsr_category_2 = default_ccsr_category_ip THEN 1 ELSE 0 END as is_ip_default_category,\n        CASE WHEN ccsr_category_2 = default_ccsr_category_op THEN 1 ELSE 0 END as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        substring(ccsr_category_3, 1, 3) as ccsr_parent_category,\n        ccsr_category_3 as ccsr_category,\n        ccsr_category_3_description as ccsr_category_description,\n        3 as ccsr_category_rank,\n        CASE WHEN ccsr_category_3 = default_ccsr_category_ip THEN 1 ELSE 0 END as is_ip_default_category,\n        CASE WHEN ccsr_category_3 = default_ccsr_category_op THEN 1 ELSE 0 END as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        substring(ccsr_category_4, 1, 3) as ccsr_parent_category,\n        ccsr_category_4 as ccsr_category,\n        ccsr_category_4_description as ccsr_category_description,\n        4 as ccsr_category_rank,\n        CASE WHEN ccsr_category_4 = default_ccsr_category_ip THEN 1 ELSE 0 END as is_ip_default_category,\n        CASE WHEN ccsr_category_4 = default_ccsr_category_op THEN 1 ELSE 0 END as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        substring(ccsr_category_5, 1, 3) as ccsr_parent_category,\n        ccsr_category_5 as ccsr_category,\n        ccsr_category_5_description as ccsr_category_description,\n        5 as ccsr_category_rank,\n        CASE WHEN ccsr_category_5 = default_ccsr_category_ip THEN 1 ELSE 0 END as is_ip_default_category,\n        CASE WHEN ccsr_category_5 = default_ccsr_category_op THEN 1 ELSE 0 END as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        substring(ccsr_category_6, 1, 3) as ccsr_parent_category,\n        ccsr_category_6 as ccsr_category,\n        ccsr_category_6_description as ccsr_category_description,\n        6 as ccsr_category_rank,\n        CASE WHEN ccsr_category_6 = default_ccsr_category_ip THEN 1 ELSE 0 END as is_ip_default_category,\n        CASE WHEN ccsr_category_6 = default_ccsr_category_op THEN 1 ELSE 0 END as is_op_default_category\n    from codes \n    \n\n)\n\nselect distinct\n    *,\n    '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom long_union\n-- as not all diagnosis codes have multiple categories, we can discard nulls\nwhere ccsr_category is not null", "relation_name": "dev_coco.ccsr.dx_vertical_pivot"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.399824Z", "completed_at": "2024-10-11T23:52:34.419823Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.438114Z", "completed_at": "2024-10-11T23:52:34.438124Z"}], "thread_id": "Thread-7", "execution_time": 0.05114293098449707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ccsr__procedure_category_map", "compiled": true, "compiled_code": "\n\nselect \n    icd_10_pcs as code,\n    icd_10_pcs_description as code_description,\n    prccsr as ccsr_category,\n    substring(prccsr, 1, 3) as ccsr_parent_category,\n    prccsr_description as ccsr_category_description,\n    clinical_domain,\n   '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ccsr._value_set_prccsr_v2023_1_cleaned_map", "relation_name": "dev_coco.ccsr.procedure_category_map"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.404559Z", "completed_at": "2024-10-11T23:52:34.425283Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.439160Z", "completed_at": "2024-10-11T23:52:34.439165Z"}], "thread_id": "Thread-6", "execution_time": 0.051004886627197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.clinical_concept_library__value_set_member_relevant_fields", "compiled": true, "compiled_code": "with value_set_member_relevant_fields as (\nselect \n  aa.concept_id,\n  aa.concept_name,\n  aa.concept_type,\n  \n  bb.value_set_member_id,\n  bb.code,\n  bb.coding_system_id,\n  bb.include_descendants,\n\n  cc.coding_system_name\n  \nfrom dev_coco.clinical_concept_library.clinical_concepts aa\n\nleft join dev_coco.clinical_concept_library.value_set_members bb\non aa.concept_id = bb.concept_id\n\nleft join dev_coco.clinical_concept_library.coding_systems cc\non bb.coding_system_id = cc.coding_system_id\n)\n\n\nselect *\nfrom value_set_member_relevant_fields", "relation_name": "dev_coco.clinical_concept_library.value_set_member_relevant_fields"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.408756Z", "completed_at": "2024-10-11T23:52:34.430259Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.445558Z", "completed_at": "2024-10-11T23:52:34.445566Z"}], "thread_id": "Thread-8", "execution_time": 0.05683422088623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_ed_classification__johnston_icd10_icd10.d04e7f84c7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect icd10\nfrom dev_coco.ed_classification._value_set_johnston_icd10\nwhere icd10 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.420564Z", "completed_at": "2024-10-11T23:52:34.445234Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.448752Z", "completed_at": "2024-10-11T23:52:34.448758Z"}], "thread_id": "Thread-10", "execution_time": 0.05029010772705078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_ed_classification__johnston_icd10_icd10.3d55f2b2dd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    icd10 as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.ed_classification._value_set_johnston_icd10\nwhere icd10 is not null\ngroup by icd10\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.427077Z", "completed_at": "2024-10-11T23:52:34.446226Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.450005Z", "completed_at": "2024-10-11T23:52:34.450010Z"}], "thread_id": "Thread-4", "execution_time": 0.050653934478759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_ed_classification__johnston_icd9_icd9.a7feea49c0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect icd9\nfrom dev_coco.ed_classification._value_set_johnston_icd9\nwhere icd9 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.430499Z", "completed_at": "2024-10-11T23:52:34.447155Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.451333Z", "completed_at": "2024-10-11T23:52:34.451338Z"}], "thread_id": "Thread-9", "execution_time": 0.04748201370239258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_ed_classification__johnston_icd9_icd9.08c1dc4617", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    icd9 as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.ed_classification._value_set_johnston_icd9\nwhere icd9 is not null\ngroup by icd9\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.433547Z", "completed_at": "2024-10-11T23:52:34.447876Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.452430Z", "completed_at": "2024-10-11T23:52:34.452435Z"}], "thread_id": "Thread-5", "execution_time": 0.048235177993774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.pharmacy__int_brand_with_generic_available", "compiled": true, "compiled_code": "\n\nselect distinct \n    product_rxcui as brand_with_generic_available\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.pharmacy.rxnorm_generic_available\nwhere \n    ndc_product_tty in ('SCD', 'GPCK')\n    \n        and cast(product_startmarketingdate as date) <= current_date\n", "relation_name": "dev_coco.pharmacy._int_brand_with_generic_available"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.439995Z", "completed_at": "2024-10-11T23:52:34.449707Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.453659Z", "completed_at": "2024-10-11T23:52:34.453664Z"}], "thread_id": "Thread-2", "execution_time": 0.035118818283081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__quality_measures_value_set", "compiled": true, "compiled_code": "\n\nselect *    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.quality_measures._value_set_measures p", "relation_name": "dev_coco.data_quality.mart_review__quality_measures_value_set"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.454770Z", "completed_at": "2024-10-11T23:52:34.484972Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.494846Z", "completed_at": "2024-10-11T23:52:34.494855Z"}], "thread_id": "Thread-3", "execution_time": 0.048065185546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_adh_diabetes__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\n\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n         \n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'ADH-Diabetes') as TEXT) as measure_id\n    , cast((select name\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'ADH-Diabetes') as TEXT) as measure_name\n    , cast((select version\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'ADH-Diabetes') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_coco.quality_measures._int_adh_diabetes__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.464522Z", "completed_at": "2024-10-11T23:52:34.492492Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.516037Z", "completed_at": "2024-10-11T23:52:34.516045Z"}], "thread_id": "Thread-7", "execution_time": 0.06556010246276855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_adhras__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\n\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n\n)\n\n/*\n    set performance period begin to following day of 1 year prior\n*/\n\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((\n  select id\n  from dev_coco.quality_measures._value_set_measures\n  where id = 'ADH-RAS'\n) as TEXT) as measure_id\n    , cast((\n  select name\n  from dev_coco.quality_measures._value_set_measures\n  where id = 'ADH-RAS'\n) as TEXT) as measure_name\n    , cast((\n  select version\n  from dev_coco.quality_measures._value_set_measures\n  where id = 'ADH-RAS'\n) as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_coco.quality_measures._int_adhras__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.471661Z", "completed_at": "2024-10-11T23:52:34.494573Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.516650Z", "completed_at": "2024-10-11T23:52:34.516656Z"}], "thread_id": "Thread-6", "execution_time": 0.06463313102722168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0055__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n         \n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CBE0055') as TEXT) as measure_id\n    , cast((select name\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CBE0055') as TEXT) as measure_name\n    , cast((select version\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CBE0055') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_coco.quality_measures._int_cbe0055__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.478683Z", "completed_at": "2024-10-11T23:52:34.507662Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.529230Z", "completed_at": "2024-10-11T23:52:34.529237Z"}], "thread_id": "Thread-8", "execution_time": 0.07596516609191895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0101__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided   \n*/\n\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n         \n)\n\n/*\n    set performance period begin to following day of 1 year prior\n*/\n\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CBE0101') as TEXT) as measure_id\n    , cast((select name\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CBE0101') as TEXT) as measure_name\n    , cast((select version\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CBE0101') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_coco.quality_measures._int_cbe0101__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.486822Z", "completed_at": "2024-10-11T23:52:34.517441Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.531869Z", "completed_at": "2024-10-11T23:52:34.531874Z"}], "thread_id": "Thread-10", "execution_time": 0.06864809989929199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm130__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to following day of 1 year prior\n*/\n\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CQM130') as TEXT) as measure_id\n    , cast((select name\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CQM130') as TEXT) as measure_name\n    , cast((select version\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CQM130') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_coco.quality_measures._int_cqm130__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.509314Z", "completed_at": "2024-10-11T23:52:34.530418Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.533040Z", "completed_at": "2024-10-11T23:52:34.533045Z"}], "thread_id": "Thread-5", "execution_time": 0.0550532341003418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm48__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided   \n*/\n\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n         \n)\n\n/*\n    set performance period begin to following day of 1 year prior\n*/\n\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CQM48') as TEXT) as measure_id\n    , cast((select name\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CQM48') as TEXT) as measure_name\n    , cast((select version\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CQM48') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_coco.quality_measures._int_cqm48__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.501384Z", "completed_at": "2024-10-11T23:52:34.531379Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.534266Z", "completed_at": "2024-10-11T23:52:34.534270Z"}], "thread_id": "Thread-9", "execution_time": 0.06299495697021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n         \n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CQM438') as TEXT) as measure_id\n    , cast((select name\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CQM438') as TEXT) as measure_name\n    , cast((select version\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CQM438') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_coco.quality_measures._int_cqm438__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.495695Z", "completed_at": "2024-10-11T23:52:34.531616Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.534709Z", "completed_at": "2024-10-11T23:52:34.534713Z"}], "thread_id": "Thread-4", "execution_time": 0.07057404518127441, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm236__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CQM236') as TEXT) as measure_id\n    , cast((select name\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CQM236') as TEXT) as measure_name\n    , cast((select version\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'CQM236') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_coco.quality_measures._int_cqm236__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.517696Z", "completed_at": "2024-10-11T23:52:34.533761Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.536577Z", "completed_at": "2024-10-11T23:52:34.536582Z"}], "thread_id": "Thread-2", "execution_time": 0.051064252853393555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0041__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n      - set quality_measures_period_end to december end for last quarter measurement period\n      - set quality_measures_period_end to march end for first quarter measurement period     \n*/\n\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n         \n)\n\n/*\n    set performance period begin to following day of 3 months prior\n    for visits in influenza season\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        month,\n        -3,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\n/*\n    lookback_period for august of either current or previous year\n    for immunization qualifying date\n*/\n, lookback_period as (\n\n  select\n      *\n        , case\n            when date_part('month', performance_period_end) between 1 and 8\n            then (cast(date_part('year', performance_period_end) as integer) - 1) || '-08-01'\n            else date_part('year', performance_period_end) || '-08-01'\n        end as lookback_period_august\n  from period_begin\n\n)\n\nselect\n      cast((select id\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0041') as TEXT) as measure_id\n    , cast((select name\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0041') as TEXT) as measure_name\n    , cast((select version\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0041') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(lookback_period_august as date) as lookback_period_august\nfrom lookback_period", "relation_name": "dev_coco.quality_measures._int_nqf0041__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.537024Z", "completed_at": "2024-10-11T23:52:34.564690Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.574017Z", "completed_at": "2024-10-11T23:52:34.574024Z"}], "thread_id": "Thread-3", "execution_time": 0.042997121810913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0053__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\n-- lookback_period for last june 30 and december 31\n, lookback_period as (\n\nSELECT\n  *\n  , case\n      when performance_period_end >= cast((date_part('year', performance_period_end) || '-06-30') as date)\n      then date_part('year', performance_period_end) || '-06-30'\n      else date_part('year', performance_period_begin) || '-06-30'\n    end as lookback_period_june\n  , case\n      when performance_period_end >= cast((date_part('year', performance_period_end) || '-12-31') as date)\n      then date_part('year', performance_period_end) || '-12-31'\n      else date_part('year', performance_period_begin) || '-12-31'\n    end as lookback_period_december\nFROM period_begin\n\n)\n\nselect\n      cast((select id\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0053') as TEXT) as measure_id\n    , cast((select name\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0053') as TEXT) as measure_name\n    , cast((select version\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0053') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(lookback_period_june as date) as lookback_period_june\n    , cast(lookback_period_december as date) as lookback_period_december\nfrom lookback_period", "relation_name": "dev_coco.quality_measures._int_nqf0053__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.548547Z", "completed_at": "2024-10-11T23:52:34.573015Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.590975Z", "completed_at": "2024-10-11T23:52:34.590983Z"}], "thread_id": "Thread-7", "execution_time": 0.05834698677062988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0059__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0059') as TEXT) as measure_id\n    , cast((select name\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0059') as TEXT) as measure_name\n    , cast((select version\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0059') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_coco.quality_measures._int_nqf0059__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.555754Z", "completed_at": "2024-10-11T23:52:34.573525Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.595273Z", "completed_at": "2024-10-11T23:52:34.595279Z"}], "thread_id": "Thread-6", "execution_time": 0.06184816360473633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0097__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n         \n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0097') as TEXT) as measure_id\n    , cast((select name\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0097') as TEXT) as measure_name\n    , cast((select version\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0097') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_coco.quality_measures._int_nqf0097__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.565247Z", "completed_at": "2024-10-11T23:52:34.586887Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.601129Z", "completed_at": "2024-10-11T23:52:34.601138Z"}], "thread_id": "Thread-8", "execution_time": 0.06579303741455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0420__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n         \n)\n\n/*\n    set performance period begin to following day of 1 year prior\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\nselect\n      cast((select id\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0420') as TEXT) as measure_id\n    , cast((select name\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0420') as TEXT) as measure_name\n    , cast((select version\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0420') as TEXT) as measure_version\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\nfrom period_begin", "relation_name": "dev_coco.quality_measures._int_nqf0420__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.574486Z", "completed_at": "2024-10-11T23:52:34.601664Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.604825Z", "completed_at": "2024-10-11T23:52:34.604830Z"}], "thread_id": "Thread-10", "execution_time": 0.056928157806396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', convert_timezone('UTC', current_timestamp()))\n        )\n\n\n        )\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\n/*\n    set performance lookback period to 27 months prior to the end of the\n    performance period\n*/\n, period_lookback as (\n\n    select\n          performance_period_end\n        , performance_period_begin\n        , \n\n    dateadd(\n        month,\n        -27,\n        performance_period_end\n        )\n\n as performance_period_lookback\n    from period_begin\n\n\n)\n\nselect\n      cast((select id\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF2372') as TEXT) as measure_id\n    , cast((select name\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF2372') as TEXT) as measure_name\n    , cast((select version\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF2372') as TEXT) as measure_version\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_lookback as date) as performance_period_lookback\nfrom period_lookback", "relation_name": "dev_coco.quality_measures._int_nqf2372__performance_period"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.582445Z", "completed_at": "2024-10-11T23:52:34.601972Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.605331Z", "completed_at": "2024-10-11T23:52:34.605336Z"}], "thread_id": "Thread-5", "execution_time": 0.050557851791381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__calendar_month", "compiled": true, "compiled_code": "\n\n\nselect distinct\ncast(year_month_int as TEXT) as year_month\n, full_date\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.reference_data.calendar c\nwhere day = 1", "relation_name": "dev_coco.data_quality.mart_review__calendar_month"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.587148Z", "completed_at": "2024-10-11T23:52:34.603453Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.606611Z", "completed_at": "2024-10-11T23:52:34.606616Z"}], "thread_id": "Thread-9", "execution_time": 0.04390215873718262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_normalized_code_type", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE_TYPE' AS field_name\n    , case when term.code_type is not null then 'valid'\n           when m.normalized_code_type is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.normalized_code_type is not null and term.code_type is null\n           then 'Normalized Code Type does not join to Terminology code_type table'\n           else null end as invalid_reason\n    , cast(normalized_code_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m\nleft join dev_coco.reference_data.code_type as term on m.normalized_code_type = term.code_type", "relation_name": "dev_coco.data_quality.condition_normalized_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.591474Z", "completed_at": "2024-10-11T23:52:34.604167Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.607323Z", "completed_at": "2024-10-11T23:52:34.607328Z"}], "thread_id": "Thread-4", "execution_time": 0.04425501823425293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_primary_diagnosis_code_type", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'PRIMARY_DIAGNOSIS_CODE_TYPE' AS field_name\n    , case when term.code_type is not null then 'valid'\n          when m.primary_diagnosis_code_type is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.primary_diagnosis_code_type is not null and term.code_type is null\n          then 'Primary Diagnosis Code Type does not join to Terminology code_type table'\n          else null end as invalid_reason\n    , cast(primary_diagnosis_code_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_coco.reference_data.code_type term on m.primary_diagnosis_code_type = term.code_type", "relation_name": "dev_coco.data_quality.encounter_primary_diagnosis_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.596940Z", "completed_at": "2024-10-11T23:52:34.606063Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.608934Z", "completed_at": "2024-10-11T23:52:34.608938Z"}], "thread_id": "Thread-2", "execution_time": 0.03659987449645996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_code_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE_TYPE' as field_name\n    , case when term.code_type is not null then 'valid'\n          when m.normalized_code_type is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.normalized_code_type is not null and term.code_type is null\n           then 'Normalized code type does not join to Terminology code_type table'\n           else null end as invalid_reason\n    , cast(normalized_code_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m\nleft join dev_coco.reference_data.code_type term on m.normalized_code_type = term.code_type", "relation_name": "dev_coco.data_quality.lab_result_normalized_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.609943Z", "completed_at": "2024-10-11T23:52:34.629474Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.635630Z", "completed_at": "2024-10-11T23:52:34.635639Z"}], "thread_id": "Thread-3", "execution_time": 0.031944990158081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_normalized_code_type", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE_TYPE' as field_name\n    , case when term.code_type is not null then 'valid'\n           when m.normalized_code_type is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.normalized_code_type is not null and term.code_type is null\n           then 'Normalized code type does not join to Terminology code_type table'\n           else null end as invalid_reason\n    , cast(normalized_code_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m\nleft join dev_coco.reference_data.code_type term on m.normalized_code_type = term.code_type", "relation_name": "dev_coco.data_quality.procedure_normalized_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.615140Z", "completed_at": "2024-10-11T23:52:34.631047Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.651510Z", "completed_at": "2024-10-11T23:52:34.651521Z"}], "thread_id": "Thread-7", "execution_time": 0.04581713676452637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_admit_source_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ADMIT_SOURCE_CODE' AS field_name\n    , case when term.admit_source_code is not null then 'valid'\n           when m.admit_source_code is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.admit_source_code is not null and term.admit_source_code is null\n           then 'Admit source code does not join to Terminology admit source table'\n           else null end as invalid_reason\n    , cast(m.admit_source_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_coco.terminology.admit_source term on m.admit_source_code = term.admit_source_code", "relation_name": "dev_coco.data_quality.encounter_admit_source_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.620494Z", "completed_at": "2024-10-11T23:52:34.631331Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.652106Z", "completed_at": "2024-10-11T23:52:34.652111Z"}], "thread_id": "Thread-6", "execution_time": 0.04586291313171387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_admit_type_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ADMIT_TYPE_CODE' AS field_name\n    , case when term.admit_type_code is not null then 'valid'\n          when m.admit_type_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.admit_type_code is not null and term.admit_type_code is null\n          then 'Admit Type Code does not join to Terminology admit_type table'\n          else null end as invalid_reason\n    , cast(m.admit_type_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_coco.terminology.admit_type term on m.admit_type_code = term.admit_type_code", "relation_name": "dev_coco.data_quality.encounter_admit_type_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.625087Z", "completed_at": "2024-10-11T23:52:34.640452Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.653211Z", "completed_at": "2024-10-11T23:52:34.653217Z"}], "thread_id": "Thread-8", "execution_time": 0.04552817344665527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_apr_drg_code", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    ,'ENCOUNTER' AS table_name\n    ,'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    ,'APR_DRG_CODE' AS field_name\n    ,case when term.apr_drg_code is not null then 'valid'\n          when m.apr_drg_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    ,case when m.apr_drg_code is not null and term.apr_drg_code is null\n          then 'APR DRG Code does not join to Terminology apr_drg table'\n          else null end as invalid_reason\n    ,cast(m.apr_drg_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_coco.terminology.apr_drg term on m.apr_drg_code = term.apr_drg_code", "relation_name": "dev_coco.data_quality.encounter_apr_drg_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.631622Z", "completed_at": "2024-10-11T23:52:34.658370Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.661069Z", "completed_at": "2024-10-11T23:52:34.661076Z"}], "thread_id": "Thread-10", "execution_time": 0.04658985137939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_discharge_disposition_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'DISCHARGE_DISPOSITION_CODE' AS field_name\n    , case when term.discharge_disposition_code is not null then 'valid'\n           when m.discharge_disposition_code is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.discharge_disposition_code is not null and term.discharge_disposition_code is null\n           then 'Discharge Disposition Code does not join to Terminology discharge_disposition table'\n           else null end as invalid_reason\n    , cast(m.discharge_disposition_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_coco.terminology.discharge_disposition term on m.discharge_disposition_code = term.discharge_disposition_code", "relation_name": "dev_coco.data_quality.encounter_discharge_disposition_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.636184Z", "completed_at": "2024-10-11T23:52:34.658754Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.661602Z", "completed_at": "2024-10-11T23:52:34.661607Z"}], "thread_id": "Thread-5", "execution_time": 0.04681587219238281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_encounter_type", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ENCOUNTER_TYPE' AS field_name\n    , case when term.encounter_type is not null then 'valid'\n          when m.encounter_type is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.encounter_type is not null and term.encounter_type is null\n          then 'Encounter type does not join to Terminology encounter_type table'\n          else null end as invalid_reason\n    , cast(m.encounter_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_coco.terminology.encounter_type term on m.encounter_type = term.encounter_type", "relation_name": "dev_coco.data_quality.encounter_encounter_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.641048Z", "completed_at": "2024-10-11T23:52:34.659357Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.662640Z", "completed_at": "2024-10-11T23:52:34.662644Z"}], "thread_id": "Thread-9", "execution_time": 0.03830099105834961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_sex", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'SEX' as field_name\n    , case when term.gender is not null then 'valid'\n           when m.sex is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.sex is not null and term.gender is null\n           then 'Sex does not join to Terminology gender table'\n           else null end as invalid_reason\n    , cast(sex as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m\nleft join dev_coco.terminology.gender term on m.sex = term.gender", "relation_name": "dev_coco.data_quality.patient_sex"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.647278Z", "completed_at": "2024-10-11T23:52:34.660044Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.663421Z", "completed_at": "2024-10-11T23:52:34.663425Z"}], "thread_id": "Thread-4", "execution_time": 0.038697242736816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_modifier_1", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as SOURCE_DATE\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'MODIFIER_1' as field_name\n    , case when term.hcpcs is not null then 'valid'\n           when m.modifier_1 is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.modifier_1 is not null and term.hcpcs is null\n           then 'Modifier 1 does not join to Terminology hcpcs_level_2 table'\n           else null end as invalid_reason\n    , cast(modifier_1 as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m\nleft join dev_coco.terminology.hcpcs_level_2 term on m.modifier_1 = term.hcpcs", "relation_name": "dev_coco.data_quality.procedure_modifier_1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.653790Z", "completed_at": "2024-10-11T23:52:34.662384Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.665417Z", "completed_at": "2024-10-11T23:52:34.665422Z"}], "thread_id": "Thread-2", "execution_time": 0.035401105880737305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_modifier_2", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'MODIFIER_2' as field_name\n    , case when term.hcpcs is not null then 'valid'\n           when m.modifier_2 is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.modifier_2 is not null and term.hcpcs is null\n           then 'Modifier 2 does not join to Terminology hcpcs_level_2 table'\n           else null end as invalid_reason\n    , cast(modifier_2 as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m\nleft join dev_coco.terminology.hcpcs_level_2 term on m.modifier_2 = term.hcpcs", "relation_name": "dev_coco.data_quality.procedure_modifier_2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.666848Z", "completed_at": "2024-10-11T23:52:34.688915Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.703449Z", "completed_at": "2024-10-11T23:52:34.703458Z"}], "thread_id": "Thread-3", "execution_time": 0.0432279109954834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_modifier_3", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'MODIFIER_3' as field_name\n    , case when term.hcpcs is not null then 'valid'\n           when m.modifier_3 is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.modifier_3 is not null and term.hcpcs is null\n           then 'Modifier 3 does not join to Terminology hcpcs_level_2 table'\n           else null end as invalid_reason\n    , cast(modifier_3 as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m\nleft join dev_coco.terminology.hcpcs_level_2 term on m.modifier_3 = term.hcpcs", "relation_name": "dev_coco.data_quality.procedure_modifier_3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.672218Z", "completed_at": "2024-10-11T23:52:34.689927Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.713590Z", "completed_at": "2024-10-11T23:52:34.713599Z"}], "thread_id": "Thread-7", "execution_time": 0.05159592628479004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_modifier_4", "compiled": true, "compiled_code": "\n\n\nSELECT\n    m.data_source\n    ,coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    ,'PROCEDURE' AS table_name\n    ,'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    ,'MODIFIER_4' as field_name\n    ,case when term.hcpcs is not null then 'valid'\n          when m.modifier_4 is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    ,case when m.modifier_4 is not null and term.hcpcs is null\n          then 'Modifier 4 does not join to Terminology hcpcs_level_2 table'\n    else null end as invalid_reason\n    ,cast(modifier_4 as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m\nleft join dev_coco.terminology.hcpcs_level_2 term on m.modifier_4 = term.hcpcs", "relation_name": "dev_coco.data_quality.procedure_modifier_4"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.677380Z", "completed_at": "2024-10-11T23:52:34.700972Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.714172Z", "completed_at": "2024-10-11T23:52:34.714177Z"}], "thread_id": "Thread-6", "execution_time": 0.05114483833312988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_modifier_5", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'MODIFIER_5' as field_name\n    , case when term.hcpcs is not null then 'valid'\n           when m.modifier_5 is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.modifier_5 is not null and term.hcpcs is null\n           then 'Modifier 5 does not join to Terminology hcpcs_level_2 table'\n           else null end as invalid_reason\n    , cast(modifier_5 as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.procedure m\nleft join dev_coco.terminology.hcpcs_level_2 term on m.modifier_5 = term.hcpcs", "relation_name": "dev_coco.data_quality.procedure_modifier_5"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.682302Z", "completed_at": "2024-10-11T23:52:34.703971Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.719175Z", "completed_at": "2024-10-11T23:52:34.719181Z"}], "thread_id": "Thread-8", "execution_time": 0.05508780479431152, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_normalized_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    , 'CONDITION' AS table_name\n    , 'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE' AS field_name\n    , case when term.icd_10_cm is not null then 'valid'\n          when m.normalized_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.normalized_code is not null and term.icd_10_cm is null\n           then 'Normalized code does not join to Terminology icd_10_cm table'\n           else null end as invalid_reason\n    , cast(normalized_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m\nleft join dev_coco.terminology.icd_10_cm term on m.normalized_code = term.icd_10_cm", "relation_name": "dev_coco.data_quality.condition_normalized_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.694663Z", "completed_at": "2024-10-11T23:52:34.719628Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.724657Z", "completed_at": "2024-10-11T23:52:34.724662Z"}], "thread_id": "Thread-5", "execution_time": 0.052822113037109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__procedure_normalized_code", "compiled": true, "compiled_code": "\n\nwith icd9 as (\n    SELECT\n          m.data_source\n        , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n        , 'PROCEDURE' AS table_name\n        , 'Procedure ID' as drill_down_key\n        , coalesce(procedure_id, 'NULL') AS drill_down_value\n        , 'NORMALIZED_CODE' as field_name\n        , case when term.icd_9_pcs is not null then 'valid'\n               when m.normalized_code is not null then 'invalid'\n               else 'null'\n        end as bucket_name\n        , case when m.normalized_code is not null and term.icd_9_pcs is null\n               then 'Normalized code does not join to Terminology icd_9_pcs table'\n               else null end as invalid_reason\n        , cast(normalized_code as TEXT) as field_value\n    from tuva.input_layer.procedure m\n    left join dev_coco.terminology.icd_9_pcs term on m.normalized_code = term.icd_9_pcs\n    where\n        m.normalized_code_type = 'icd-9-pcs'\n),\nicd10 as (\n    SELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE' as field_name\n    , case when term.icd_10_pcs is not null then 'valid'\n           when m.normalized_code is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.normalized_code is not null and term.icd_10_pcs is null\n           then 'Normalized code does not join to Terminology icd_10_pcs table'\n           else null end as invalid_reason\n    , cast(normalized_code as TEXT) as field_value\nfrom tuva.input_layer.procedure m\nleft join dev_coco.terminology.icd_10_pcs term on m.normalized_code = term.icd_10_pcs\nwhere\n    m.normalized_code_type = 'icd_10_pcs'\n),\nhcpcs_level_2 as (\n    SELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE' as field_name\n    , case when term.hcpcs is not null then 'valid'\n           when m.normalized_code is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.normalized_code is not null and term.hcpcs is null\n           then 'Normalized code does not join to Terminology hcpcs_level_2 table'\n           else null end as invalid_reason\n    , cast(normalized_code as TEXT) as field_value\nfrom tuva.input_layer.procedure m\nleft join dev_coco.terminology.hcpcs_level_2 term on m.normalized_code = term.hcpcs\nwhere\n    m.normalized_code_type = 'hcpcs_level_2'\n),\n\nothers as (\n    SELECT\n      m.data_source\n    , coalesce(m.procedure_date,cast('1900-01-01' as date)) as source_date\n    , 'PROCEDURE' AS table_name\n    , 'Procedure ID' as drill_down_key\n    , coalesce(procedure_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE' as field_name\n    , 'null' as bucket_name\n    , 'code type does not have a matching code terminology table' as invalid_reason\n    , cast(normalized_code as TEXT) as field_value\nfrom tuva.input_layer.procedure m\nwhere\n    m.normalized_code_type not in ('icd-9-pcs', 'icd-10-pcs','hcpcs_level_2')\n)\n\nSELECT *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run FROM icd9\n\nunion all\n\nSELECT * , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run FROM icd10\n\nunion all\n\nSELECT * , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run FROM hcpcs_level_2\n\nunion all\n\nSELECT * , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run FROM others", "relation_name": "dev_coco.data_quality.procedure_normalized_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.690296Z", "completed_at": "2024-10-11T23:52:34.720852Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.725127Z", "completed_at": "2024-10-11T23:52:34.725131Z"}], "thread_id": "Thread-10", "execution_time": 0.05361318588256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_primary_diagnosis_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'PRIMARY_DIAGNOSIS_CODE' AS field_name\n    , case when term.icd_10_cm is not null then 'valid'\n          when m.primary_diagnosis_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.primary_diagnosis_code is not null and term.icd_10_cm is null\n          then 'Primary diagnosis code does not join to Terminology icd_10_cm table'\n    else null end as invalid_reason\n    , cast(primary_diagnosis_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_coco.terminology.icd_10_cm term on m.primary_diagnosis_code = term.icd_10_cm", "relation_name": "dev_coco.data_quality.encounter_primary_diagnosis_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.704254Z", "completed_at": "2024-10-11T23:52:34.723212Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.726412Z", "completed_at": "2024-10-11T23:52:34.726416Z"}], "thread_id": "Thread-9", "execution_time": 0.04946303367614746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_CODE' as field_name\n    , case when term.loinc is not null then 'valid'\n          when m.normalized_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.normalized_code is not null and term.loinc is null\n           then 'Normalized code does not join to Terminology loinc table'\n           else null end as invalid_reason\n    , cast(normalized_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m\nleft join dev_coco.terminology.loinc term on m.normalized_code = term.loinc", "relation_name": "dev_coco.data_quality.lab_result_normalized_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.708850Z", "completed_at": "2024-10-11T23:52:34.723461Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.726853Z", "completed_at": "2024-10-11T23:52:34.726856Z"}], "thread_id": "Thread-4", "execution_time": 0.04504704475402832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_normalized_component", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'NORMALIZED_COMPONENT' as field_name\n    , case when term.loinc is not null then 'valid'\n          when m.normalized_component is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.normalized_component is not null and term.loinc is null\n           then 'Normalized component does not join to Terminology loinc table'\n           else null end as invalid_reason\n    , cast(normalized_component as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m\nleft join dev_coco.terminology.loinc term on m.normalized_component = term.loinc", "relation_name": "dev_coco.data_quality.lab_result_normalized_component"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.714691Z", "completed_at": "2024-10-11T23:52:34.724368Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.727808Z", "completed_at": "2024-10-11T23:52:34.727812Z"}], "thread_id": "Thread-2", "execution_time": 0.03931117057800293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_ms_drg_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'MS_DRG_CODE' AS field_name\n    , case when term.ms_drg_code is not null then 'valid'\n          when m.ms_drg_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.ms_drg_code is not null and term.ms_drg_code is null\n          then 'MS DRG Code does not join to Terminology ms_drg table'\n          else null end as invalid_reason\n    , cast(m.ms_drg_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_coco.terminology.ms_drg term on m.ms_drg_code = term.ms_drg_code", "relation_name": "dev_coco.data_quality.encounter_ms_drg_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.730590Z", "completed_at": "2024-10-11T23:52:34.749913Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.761341Z", "completed_at": "2024-10-11T23:52:34.761350Z"}], "thread_id": "Thread-3", "execution_time": 0.03769397735595703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_ndc_description", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'NDC_DESCRIPTION' as field_name\n    , case when term.ndc is not null then 'valid'\n           when m.ndc_code is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.ndc_code is not null and term.ndc is null\n           then 'NDC code type does not join to Terminology ndc table'\n           else null end as invalid_reason\n    , cast(substring(ndc_description, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m\nleft join dev_coco.terminology.ndc term on m.ndc_code = term.ndc", "relation_name": "dev_coco.data_quality.medication_ndc_description"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.736497Z", "completed_at": "2024-10-11T23:52:34.750832Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.770637Z", "completed_at": "2024-10-11T23:52:34.770644Z"}], "thread_id": "Thread-7", "execution_time": 0.04486393928527832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__condition_present_on_admit_code", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(m.recorded_date,cast('1900-01-01' as date)) as source_date\n    ,'CONDITION' AS table_name\n    ,'Condition ID' as drill_down_key\n    , coalesce(condition_id, 'NULL') AS drill_down_value\n    ,'PRESENT_ON_ADMIT_CODE' AS field_name\n    ,case when term.present_on_admit_code is not null then 'valid'\n          when m.present_on_admit_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    ,case when m.present_on_admit_code is not null and term.present_on_admit_code is null\n          then 'Present On Admit Code does not join to Terminology present_on_admission table'\n          else null\n    end as invalid_reason\n    ,cast(m.present_on_admit_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.condition m\nleft join dev_coco.terminology.present_on_admission term on m.present_on_admit_code = term.present_on_admit_code", "relation_name": "dev_coco.data_quality.condition_present_on_admit_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.740674Z", "completed_at": "2024-10-11T23:52:34.751158Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.771124Z", "completed_at": "2024-10-11T23:52:34.771128Z"}], "thread_id": "Thread-6", "execution_time": 0.04505586624145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_attending_provider_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'ATTENDING_PROVIDER_ID' AS field_name\n    , case when term.npi is not null then 'valid'\n          when m.attending_provider_id is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.attending_provider_id is not null and term.npi is null\n          then 'Attending provider ID does not join to Terminology provider table'\n          else null end as invalid_reason\n    , cast(attending_provider_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_coco.terminology.provider term on m.attending_provider_id = term.npi", "relation_name": "dev_coco.data_quality.encounter_attending_provider_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.745220Z", "completed_at": "2024-10-11T23:52:34.755603Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.775921Z", "completed_at": "2024-10-11T23:52:34.775929Z"}], "thread_id": "Thread-8", "execution_time": 0.04846906661987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__encounter_facility_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(m.encounter_start_date,cast('1900-01-01' as date)) as source_date\n    , 'ENCOUNTER' AS table_name\n    , 'Encounter ID' as drill_down_key\n    , coalesce(encounter_id, 'NULL') AS drill_down_value\n    , 'FACILITY_ID' AS field_name\n    , case when term.npi is not null then 'valid'\n          when m.facility_id is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.facility_id is not null and term.npi is null\n          then 'Facility NPI does not join to Terminology provider table'\n          else null end as invalid_reason\n    , cast(facility_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.encounter m\nleft join dev_coco.terminology.provider term on m.facility_id = term.npi", "relation_name": "dev_coco.data_quality.encounter_facility_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.751687Z", "completed_at": "2024-10-11T23:52:34.777419Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.780010Z", "completed_at": "2024-10-11T23:52:34.780015Z"}], "thread_id": "Thread-5", "execution_time": 0.044322967529296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__lab_result_ordering_practitioner_id", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.result_date,cast('1900-01-01' as date)) as source_date\n    , 'LAB_RESULT' AS table_name\n    , 'Lab Result ID' as drill_down_key\n    , coalesce(lab_result_id, 'NULL') AS drill_down_value\n    , 'ORDERING_PRACTITIONER_ID' as field_name\n    , case when term.npi is not null then 'valid'\n          when m.ordering_practitioner_id is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.ordering_practitioner_id is not null and term.npi is null\n           then 'Ordering practitioner ID does not join to Terminology provider table'\n           else null end as invalid_reason\n    , cast(ordering_practitioner_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.lab_result m\nleft join dev_coco.terminology.provider term on m.ordering_practitioner_id = term.npi", "relation_name": "dev_coco.data_quality.lab_result_ordering_practitioner_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.755859Z", "completed_at": "2024-10-11T23:52:34.777707Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.780461Z", "completed_at": "2024-10-11T23:52:34.780465Z"}], "thread_id": "Thread-10", "execution_time": 0.044354915618896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__location_npi", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'LOCATION' AS table_name\n    , 'Location ID' as drill_down_key\n    , coalesce(location_id, 'NULL') AS drill_down_value\n    , 'NPI' as field_name\n    , case when term.npi is not null then 'valid'\n          when m.npi is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case when m.npi is not null and term.npi is null\n          then 'NPI does not join to Terminology provider table'\n    else null end as invalid_reason\n    , cast(m.npi as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.location m\nleft join dev_coco.terminology.provider term on m.npi = term.npi", "relation_name": "dev_coco.data_quality.location_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.761846Z", "completed_at": "2024-10-11T23:52:34.778303Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.781193Z", "completed_at": "2024-10-11T23:52:34.781198Z"}], "thread_id": "Thread-9", "execution_time": 0.036691904067993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__practitioner_npi", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PRACTITIONER' AS table_name\n    , 'Practitioner ID' as drill_down_key\n    , coalesce(practitioner_id, 'NULL') AS drill_down_value\n    , 'NPI' as field_name\n    , case when term.npi is not null then 'valid'\n           when m.npi is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.npi is not null and term.npi is null\n           then 'NPI does not join to Terminology provider table'\n           else null end as invalid_reason\n    , cast(m.npi as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.practitioner m\nleft join dev_coco.terminology.provider term on m.npi = term.npi", "relation_name": "dev_coco.data_quality.practitioner_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.766263Z", "completed_at": "2024-10-11T23:52:34.778559Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.781649Z", "completed_at": "2024-10-11T23:52:34.781653Z"}], "thread_id": "Thread-4", "execution_time": 0.036843061447143555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__patient_race", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    \n        , cast(coalesce(convert_timezone('UTC', current_timestamp()), cast('1900-01-01' as date)) as date) as source_date\n    \n    , 'PATIENT' AS table_name\n    , 'Patient ID' as drill_down_key\n    , coalesce(patient_id, 'NULL') AS drill_down_value\n    , 'RACE' as field_name\n    , case when term.description is not null then 'valid'\n           when m.race is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.race is not null and term.description is null\n           then 'Race description does not join to Terminology race table'\n           else null end as invalid_reason\n    , cast(race as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.patient m\nleft join dev_coco.terminology.race term on m.race = term.description", "relation_name": "dev_coco.data_quality.patient_race"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.771577Z", "completed_at": "2024-10-11T23:52:34.779741Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.782880Z", "completed_at": "2024-10-11T23:52:34.782884Z"}], "thread_id": "Thread-2", "execution_time": 0.03388500213623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_atc_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'ATC_CODE' as field_name\n    , case when coalesce(term_1.atc_1_name,term_2.atc_2_name,term_3.atc_3_name,term_4.atc_4_name) is not null then 'valid'\n           when m.atc_code is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.atc_code is not null and coalesce(term_1.atc_1_name,term_2.atc_2_name,term_3.atc_3_name,term_4.atc_4_name) is null\n           then 'ATC Code does not join to Terminology rxnorm_to_atc table on any atc level'\n           else null end as invalid_reason\n    , cast(atc_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m\nleft join dev_coco.terminology.rxnorm_to_atc term_1 on m.atc_code = term_1.atc_1_name\nleft join dev_coco.terminology.rxnorm_to_atc term_2 on m.atc_code = term_2.atc_2_name\nleft join dev_coco.terminology.rxnorm_to_atc term_3 on m.atc_code = term_3.atc_3_name\nleft join dev_coco.terminology.rxnorm_to_atc term_4 on m.atc_code = term_4.atc_4_name", "relation_name": "dev_coco.data_quality.medication_atc_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.785052Z", "completed_at": "2024-10-11T23:52:34.807150Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.824265Z", "completed_at": "2024-10-11T23:52:34.824273Z"}], "thread_id": "Thread-3", "execution_time": 0.04520606994628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medication_rxnorm_code", "compiled": true, "compiled_code": "\n\n\nSELECT\n      m.data_source\n    , coalesce(m.dispensing_date,cast('1900-01-01' as date)) as source_date\n    , 'MEDICATION' AS table_name\n    , 'Medication ID' as drill_down_key\n    , coalesce(medication_id, 'NULL') AS drill_down_value\n    , 'RXNORM_CODE' as field_name\n    , case when term.rxcui is not null then 'valid'\n           when m.rxnorm_code is not null then 'invalid'\n           else 'null'\n    end as bucket_name\n    , case when m.rxnorm_code is not null and term.rxcui is null\n           then 'RX norm code does not join to Terminology rxnorm_to_atc table'\n           else null end as invalid_reason\n    , cast(rxnorm_code as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medication m\nleft join dev_coco.terminology.rxnorm_to_atc term on m.rxnorm_code = term.rxcui", "relation_name": "dev_coco.data_quality.medication_rxnorm_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.789241Z", "completed_at": "2024-10-11T23:52:34.807844Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.830565Z", "completed_at": "2024-10-11T23:52:34.830572Z"}], "thread_id": "Thread-7", "execution_time": 0.05116987228393555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_condition_condition_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_coco.data_quality.condition_condition_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.condition_condition_id\n    WHERE\n        bucket_name = 'valid'\n\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.condition_condition_id a\n    inner JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_coco.data_quality.primary_keys_condition_condition_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.794824Z", "completed_at": "2024-10-11T23:52:34.819119Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.835801Z", "completed_at": "2024-10-11T23:52:34.835809Z"}], "thread_id": "Thread-6", "execution_time": 0.054986000061035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_encounter_encounter_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_coco.data_quality.encounter_encounter_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.encounter_encounter_id\n    WHERE\n        bucket_name = 'valid'\n\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.encounter_encounter_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_coco.data_quality.primary_keys_encounter_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.801127Z", "completed_at": "2024-10-11T23:52:34.823989Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.836427Z", "completed_at": "2024-10-11T23:52:34.836433Z"}], "thread_id": "Thread-8", "execution_time": 0.05443120002746582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__lab_result", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n      labs.lab_result_id\n    , labs.patient_id\n    , labs.encounter_id\n    , labs.accession_number\n    , labs.source_code_type\n    , labs.source_code\n    , labs.source_description\n    , labs.source_component\n    , case\n        when labs.normalized_code_type is not null then labs.normalized_code_type\n        when loinc.loinc is not null then 'loinc'\n        when snomed_ct.snomed_ct is not null then 'snomed-ct'\n        else null end as normalized_code_type\n    , coalesce(\n        labs.normalized_code\n        , loinc.loinc\n        , snomed_ct.snomed_ct\n        ) as normalized_code\n    , coalesce(\n        labs.normalized_description\n        , loinc.long_common_name\n        , snomed_ct.description\n        ) normalized_description\n    , case when coalesce(labs.normalized_code, labs.normalized_description) is not null then 'manual'\n         when coalesce(loinc.loinc,snomed_ct.snomed_ct) is not null then 'automatic'\n         end as mapping_method\n    , labs.normalized_component\n    , labs.status\n    , labs.result\n    , labs.result_date\n    , labs.collection_date\n    , labs.source_units\n    , labs.normalized_units\n    , labs.source_reference_range_low\n    , labs.source_reference_range_high\n    , labs.normalized_reference_range_low\n    , labs.normalized_reference_range_high\n    , labs.source_abnormal_flag\n    , labs.normalized_abnormal_flag\n    , labs.specimen\n    , labs.ordering_practitioner_id\n    , labs.data_source\n    , labs.tuva_last_run\nFrom dev_coco.core._stg_clinical_lab_result as labs\nleft join dev_coco.terminology.loinc loinc\n    on labs.source_code_type = 'loinc'\n        and labs.source_code = loinc.loinc\nleft join dev_coco.terminology.snomed_ct snomed_ct\n    on labs.source_code_type = 'snomed-ct'\n        and labs.source_code = snomed_ct.snomed_ct\n\n ", "relation_name": "dev_coco.core.lab_result"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.808384Z", "completed_at": "2024-10-11T23:52:34.836939Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.839879Z", "completed_at": "2024-10-11T23:52:34.839884Z"}], "thread_id": "Thread-5", "execution_time": 0.045742034912109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_lab_result_lab_result_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_coco.data_quality.lab_result_lab_result_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.lab_result_lab_result_id\n    WHERE\n        bucket_name = 'valid'\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.lab_result_lab_result_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_coco.data_quality.primary_keys_lab_result_lab_result_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.819386Z", "completed_at": "2024-10-11T23:52:34.837602Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.840708Z", "completed_at": "2024-10-11T23:52:34.840713Z"}], "thread_id": "Thread-9", "execution_time": 0.040300846099853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_location_location_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_coco.data_quality.location_location_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.location_location_id\n    WHERE\n        bucket_name = 'valid'\n\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.location_location_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_coco.data_quality.primary_keys_location_location_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.812938Z", "completed_at": "2024-10-11T23:52:34.838009Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.841154Z", "completed_at": "2024-10-11T23:52:34.841158Z"}], "thread_id": "Thread-10", "execution_time": 0.04666900634765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__observation", "compiled": true, "compiled_code": "\n\n\nselect\n      obs.observation_id\n    , obs.patient_id\n    , obs.encounter_id\n    , obs.panel_id\n    , obs.observation_date\n    , obs.observation_type\n    , obs.source_code_type\n    , obs.source_code\n    , obs.source_description\n    , case\n        when obs.normalized_code_type is not null then obs.normalized_code_type\n        when icd10cm.icd_10_cm is not null then 'icd-10-cm'\n        when icd9cm.icd_9_cm is not null then 'icd-9-cm'\n        when icd10pcs.icd_10_pcs is not null then 'icd-10-pcs'\n        when icd9pcs.icd_9_pcs is not null then 'icd-10-pcs'\n        when hcpcs.hcpcs is not null then 'hcpcs'\n        when snomed_ct.snomed_ct is not null then 'snomed-ct'\n        when loinc.loinc is not null then 'loinc'\n        end as normalized_code_type\n  , coalesce(\n        obs.normalized_code\n      , icd10cm.icd_10_cm\n      , icd9cm.icd_9_cm\n      , icd10pcs.icd_10_pcs\n      , icd9pcs.icd_9_pcs\n      , hcpcs.hcpcs\n      , snomed_ct.snomed_ct\n      , loinc.loinc\n      ) as normalized_code\n      , coalesce(\n        obs.normalized_description\n      , icd10cm.short_description\n      , icd9cm.short_description\n      , icd10pcs.description\n      , icd9pcs.short_description\n      , hcpcs.short_description\n      , snomed_ct.description\n      , loinc.long_common_name\n      ) as normalized_description\n     , case\n         when coalesce(obs.normalized_code, obs.normalized_description) is not null then 'manual'\n         when coalesce(\n            icd10cm.icd_10_cm\n          , icd9cm.icd_9_cm\n          , icd10pcs.icd_10_pcs\n          , icd9pcs.icd_9_pcs\n          , hcpcs.hcpcs\n          , snomed_ct.snomed_ct\n          , loinc.loinc) is not null then 'automatic'\n         end as mapping_method\n    , obs.result\n    , obs.source_units\n    , obs.normalized_units\n    , obs.source_reference_range_low\n    , obs.source_reference_range_high\n    , obs.normalized_reference_range_low\n    , obs.normalized_reference_range_high\n    , obs.data_source\n    , obs.tuva_last_run\nfrom dev_coco.core._stg_clinical_observation obs\nleft join dev_coco.terminology.icd_10_cm icd10cm\n    on obs.source_code_type = 'icd-10-cm'\n        and replace(obs.source_code,'.','') = icd10cm.icd_10_cm\nleft join dev_coco.terminology.icd_9_cm icd9cm\n    on obs.source_code_type = 'icd-9-cm'\n        and replace(obs.source_code,'.','') = icd9cm.icd_9_cm\nleft join dev_coco.terminology.icd_10_pcs icd10pcs\n    on obs.source_code_type = 'icd-10-pcs'\n        and obs.source_code = icd10pcs.icd_10_pcs\nleft join dev_coco.terminology.icd_9_pcs icd9pcs\n    on obs.source_code_type = 'icd-9-pcs'\n        and replace(obs.source_code,'.','') = icd9pcs.icd_9_pcs\nleft join dev_coco.terminology.hcpcs_level_2 hcpcs\n    on obs.source_code_type = 'hcpcs'\n        and obs.source_code = hcpcs.hcpcs\nleft join dev_coco.terminology.snomed_ct snomed_ct\n    on obs.source_code_type = 'snomed-ct'\n        and obs.source_code = snomed_ct.snomed_ct\nleft join dev_coco.terminology.loinc loinc\n    on obs.source_code_type = 'loinc'\n        and obs.source_code = loinc.loinc\n\n", "relation_name": "dev_coco.core.observation"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.824804Z", "completed_at": "2024-10-11T23:52:34.838970Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.842158Z", "completed_at": "2024-10-11T23:52:34.842162Z"}], "thread_id": "Thread-4", "execution_time": 0.04137921333312988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_observation_observation_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_coco.data_quality.observation_observation_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.observation_observation_id\n    WHERE\n        bucket_name = 'valid'\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.observation_observation_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_coco.data_quality.primary_keys_observation_observation_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.831073Z", "completed_at": "2024-10-11T23:52:34.839584Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.842900Z", "completed_at": "2024-10-11T23:52:34.842904Z"}], "thread_id": "Thread-2", "execution_time": 0.0369720458984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_practitioner_practitioner_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_coco.data_quality.practitioner_practitioner_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.practitioner_practitioner_id\n    WHERE\n        bucket_name = 'valid'\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.practitioner_practitioner_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_coco.data_quality.primary_keys_practitioner_practitioner_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.846186Z", "completed_at": "2024-10-11T23:52:34.867638Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.970860Z", "completed_at": "2024-10-11T23:52:34.970869Z"}], "thread_id": "Thread-3", "execution_time": 0.1305532455444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_patient_patient_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_coco.data_quality.patient_patient_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.patient_patient_id\n    WHERE\n        bucket_name = 'valid'\n\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.patient_patient_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_coco.data_quality.primary_keys_patient_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.851489Z", "completed_at": "2024-10-11T23:52:34.868219Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.975831Z", "completed_at": "2024-10-11T23:52:34.975840Z"}], "thread_id": "Thread-7", "execution_time": 0.13434123992919922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__medication", "compiled": true, "compiled_code": "\n\n\nwith source_mapping as (\n\n    select\n     meds.medication_id\n   , meds.patient_id\n   , meds.encounter_id\n   , meds.dispensing_date\n   , meds.prescribing_date\n   , meds.source_code_type\n   , meds.source_code\n   , meds.source_description\n   , coalesce(\n       meds.ndc_code\n       , ndc.ndc\n       ) as ndc_code\n   ,  coalesce(\n       meds.ndc_description\n       , ndc.fda_description\n       , ndc.rxnorm_description\n       ) as ndc_description\n   , case\n        when meds.ndc_code is not null then 'manual'\n        when ndc.ndc is not null then 'automatic'\n        end as ndc_mapping_method\n   , coalesce(\n        meds.rxnorm_code\n        , rxatc.rxcui\n        ) as rxnorm_code\n   , coalesce(\n       meds.rxnorm_description\n       , rxatc.rxnorm_description\n       ) as rxnorm_description\n   , case\n        when meds.rxnorm_code is not null then 'manual'\n        when rxatc.rxcui is not null then 'automatic'\n        end as rxnorm_mapping_method\n   , coalesce(\n        meds.atc_code\n        , rxatc.atc_3_code\n        ) as atc_code\n   , coalesce(\n        meds.atc_description\n        , rxatc.atc_4_name\n        ) as atc_description\n   , case\n        when meds.atc_code is not null then 'manual'\n        when rxatc.atc_3_name is not null then 'automatic'\n        end as atc_mapping_method\n   , meds.route\n   , meds.strength\n   , meds.quantity\n   , meds.quantity_unit\n   , meds.days_supply\n   , meds.practitioner_id\n   , meds.data_source\n   , meds.tuva_last_run\nfrom dev_coco.core._stg_clinical_medication meds\n    left join dev_coco.terminology.ndc ndc\n        on meds.source_code_type = 'ndc'\n        and meds.source_code = ndc.ndc\n    left join dev_coco.terminology.rxnorm_to_atc rxatc\n        on meds.source_code_type = 'rxnorm'\n        and meds.source_code = rxatc.rxcui\n\n\n\n   )\n\n\n-- add auto rxnorm + atc\nselect\n     sm.medication_id\n   , sm.patient_id\n   , sm.encounter_id\n   , sm.dispensing_date\n   , sm.prescribing_date\n   , sm.source_code_type\n   , sm.source_code\n   , sm.source_description\n   , sm.ndc_code\n   , sm.ndc_description\n   , sm.ndc_mapping_method\n   , coalesce(\n        sm.rxnorm_code\n        , ndc.rxcui\n        ) as rxnorm_code\n   , coalesce(\n        sm.rxnorm_description\n        , ndc.rxnorm_description\n        ) as rxnorm_description\n   , case\n        when sm.rxnorm_mapping_method is not null then sm.rxnorm_mapping_method\n        when ndc.rxcui is not null then 'automatic'\n        end as rxnorm_mapping_method\n   , coalesce(\n        sm.atc_code\n        , rxatc.atc_3_code\n        ) as atc_code\n   , coalesce(\n        sm.atc_description\n        , rxatc.atc_3_name\n        ) as atc_description\n   , case\n        when sm.atc_mapping_method is not null then sm.atc_mapping_method\n        when rxatc.atc_3_name is not null then 'automatic'\n        end as atc_mapping_method\n   , sm.route\n   , sm.strength\n   , sm.quantity\n   , sm.quantity_unit\n   , sm.days_supply\n   , sm.practitioner_id\n   , sm.data_source\n   , sm.tuva_last_run\nfrom source_mapping sm\n    left join dev_coco.terminology.ndc ndc\n        on sm.ndc_code = ndc.ndc\n    left join dev_coco.terminology.rxnorm_to_atc rxatc\n        on coalesce( sm.rxnorm_code, ndc.rxcui ) = rxatc.rxcui", "relation_name": "dev_coco.core.medication"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.857073Z", "completed_at": "2024-10-11T23:52:34.868507Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.976342Z", "completed_at": "2024-10-11T23:52:34.976346Z"}], "thread_id": "Thread-6", "execution_time": 0.13454508781433105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_medication_medication_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_coco.data_quality.medication_medication_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.medication_medication_id\n    WHERE\n        bucket_name = 'valid'\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.medication_medication_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_coco.data_quality.primary_keys_medication_medication_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.861934Z", "completed_at": "2024-10-11T23:52:34.950992Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.983162Z", "completed_at": "2024-10-11T23:52:34.983173Z"}], "thread_id": "Thread-8", "execution_time": 0.14064812660217285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys_procedure_procedure_id", "compiled": true, "compiled_code": "\n\nWITH valid_conditions AS (\n    SELECT\n        *\n    FROM\n        dev_coco.data_quality.procedure_procedure_id\n    WHERE\n        bucket_name = 'valid'\n)\n, uniqueness_check as (\n        SELECT\n                field_value,\n                COUNT(*) AS duplicate_count\n        FROM\n                valid_conditions\n        GROUP BY\n                field_value\n        HAVING\n                COUNT(*) > 1\n)\n\n, random_sample AS (\n    SELECT\n        data_source,\n        source_date,\n        table_name,\n        drill_down_key,\n        drill_down_value,\n        field_name,\n        field_value,\n        bucket_name,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.procedure_procedure_id\n    WHERE\n        bucket_name = 'valid'\n)\n\n, duplicates_summary AS (\n    SELECT\n        a.data_source,\n        a.source_date,\n        a.table_name,\n        a.drill_down_key,\n        a.drill_down_value,\n        a.field_name,\n        a.field_value,\n        a.bucket_name,\n        b.duplicate_count,\n        row_number() over (order by drill_down_key) as row_number_value\n    FROM\n        dev_coco.data_quality.procedure_procedure_id a\n    JOIN\n        uniqueness_check b on a.field_value = b.field_value\n)\n\nSELECT\n    *\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    duplicates_summary\nwhere row_number_value <= 5\n\nunion all\n\nSELECT\n    *,\n    0 as duplicate_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    random_sample\nWHERE\n    row_number_value <= 5\n    and NOT EXISTS (SELECT 1 FROM duplicates_summary)", "relation_name": "dev_coco.data_quality.primary_keys_procedure_procedure_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.869051Z", "completed_at": "2024-10-11T23:52:34.990148Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.993254Z", "completed_at": "2024-10-11T23:52:34.993262Z"}], "thread_id": "Thread-5", "execution_time": 0.14742517471313477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_address", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'eligibility' as table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'ADDRESS' AS field_name\n    ,case when m.address is  null then 'null'\n                             else 'valid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,CAST(address as TEXT) AS field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM tuva.input_layer.eligibility m", "relation_name": "dev_coco.data_quality.eligibility_address"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.951411Z", "completed_at": "2024-10-11T23:52:34.991019Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.994306Z", "completed_at": "2024-10-11T23:52:34.994311Z"}], "thread_id": "Thread-9", "execution_time": 0.1434628963470459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_birth_date", "compiled": true, "compiled_code": "\n\nWITH base as (\n    SELECT * \n    FROM tuva.input_layer.eligibility\n\n),\nunique_field as (\n    SELECT DISTINCT member_id\n        ,cast(birth_date as TEXT) as field\n        ,data_source\n    FROM base\n),\nclaim_grain as (\n    SELECT member_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    GROUP BY member_id\n        ,data_source\n),\nclaim_agg as (\nSELECT\n    member_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) AS field_aggregated\nFROM\n    unique_field\nGROUP BY\n    data_source,\n    member_id\n)\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'BIRTH_DATE' AS field_name\n    ,CASE \n        WHEN cg.frequency > 1 THEN 'multiple'\n        WHEN m.birth_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) THEN 'invalid'\n        WHEN m.birth_date <= cast('1901-01-01' as date) THEN 'invalid'\n        WHEN m.birth_date IS NULL THEN 'null'\n        ELSE 'valid' \n    END AS bucket_name\n    ,CASE \n        WHEN cg.frequency > 1 THEN 'multiple'\n        WHEN m.birth_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) THEN 'future'\n        WHEN m.birth_date <= cast('1901-01-01' as date) THEN 'too old'\n        else null\n    END AS invalid_reason\n,CAST(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) AS field_value\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM base m\nleft join claim_grain cg on m.member_id = cg.member_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.member_id = agg.member_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.eligibility_birth_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.966374Z", "completed_at": "2024-10-11T23:52:34.991267Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.994782Z", "completed_at": "2024-10-11T23:52:34.994786Z"}], "thread_id": "Thread-10", "execution_time": 0.14363598823547363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_city", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n        ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'CITY' AS field_name\n    ,case when m.race is  null then 'null'\n                             else 'valid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,CAST(city as TEXT) AS field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM tuva.input_layer.eligibility m", "relation_name": "dev_coco.data_quality.eligibility_city"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.971408Z", "completed_at": "2024-10-11T23:52:34.992233Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.996909Z", "completed_at": "2024-10-11T23:52:34.996915Z"}], "thread_id": "Thread-4", "execution_time": 0.13535428047180176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_data_source", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n        ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'DATA_SOURCE' AS field_name\n    ,case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(data_source as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM tuva.input_layer.eligibility m", "relation_name": "dev_coco.data_quality.eligibility_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:34.976809Z", "completed_at": "2024-10-11T23:52:34.993753Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:34.998636Z", "completed_at": "2024-10-11T23:52:34.998642Z"}], "thread_id": "Thread-2", "execution_time": 0.13230514526367188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_date_checks", "compiled": true, "compiled_code": "\n\nwith eligibility_spans as(\n    select distinct\n        member_id || '-' || enrollment_start_date || '-' || enrollment_end_date || '-' || payer || '-' || plan as eligibility_span_id\n        , enrollment_start_date\n        , enrollment_end_date\n    from tuva.input_layer.eligibility\n)\n\n, missing_start_date as (\n    select\n        'Missing enrollment_start_date' as data_quality_check,\n        count(*) as result_count\n    from eligibility_spans\n    where enrollment_start_date is null\n),\n\nmissing_end_date as (\n    select\n        'Missing enrollment_end_date' as data_quality_check,\n        count(*) as result_count\n    from eligibility_spans\n    where enrollment_end_date is null\n),\n\ninvalid_start_date as (\n    select\n        'Enrollment_start_date populated with something other than a date' as data_quality_check,\n        count(*) as result_count\n    from eligibility_spans\n    where enrollment_start_date is not null\n    and not try_cast( enrollment_start_date as date ) is not null\n),\n\ninvalid_end_date as (\n    select\n        'Enrollment_end_date populated with something other than a date' as data_quality_check,\n        count(*) as result_count\n    from eligibility_spans\n    where enrollment_end_date is not null\n    and not try_cast( enrollment_end_date as date ) is not null\n),\n\nstart_after_end as (\n    select\n        'Enrollment_start_date after enrollment_end_date' as data_quality_check,\n        count(*) as result_count\n    from eligibility_spans\n    where enrollment_start_date > enrollment_end_date\n),\n\nfuture_end_date as (\n    select\n        'Future enrollment_end_date' as data_quality_check,\n        count(*) as result_count\n    from eligibility_spans\n    \n        where enrollment_end_date > current_date\n    \n\n),\n\nnonsensical_dates as (\n    select\n        'Nonsensical dates' as data_quality_check,\n        count(*) as result_count\n    from eligibility_spans\n    where enrollment_start_date < '1900-01-01'\n    or enrollment_end_date < '1900-01-01'\n    or enrollment_start_date > '2100-01-01'\n)\n\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from missing_start_date\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from missing_end_date\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from invalid_start_date\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from invalid_end_date\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from start_after_end\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from future_end_date\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from nonsensical_dates", "relation_name": "dev_coco.data_quality.eligibility_date_checks"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.001317Z", "completed_at": "2024-10-11T23:52:35.030275Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.041498Z", "completed_at": "2024-10-11T23:52:35.041507Z"}], "thread_id": "Thread-3", "execution_time": 0.04869508743286133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_death_date", "compiled": true, "compiled_code": "\n\nWITH base as (\n    SELECT * \n    FROM tuva.input_layer.eligibility\n\n),\nunique_field as (\n    select distinct member_id\n        ,cast(death_date as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select member_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by member_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    member_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    data_source,\n    member_id\n)\nselect distinct\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'DEATH_DATE' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.death_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.death_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.death_date <= m.birth_date then 'invalid'\n        when m.death_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.death_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.death_date <= cast('1901-01-01' as date) then 'too old'\n        when m.death_date <= m.birth_date then 'death date before birth date'\n        else null\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.member_id = cg.member_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.member_id = agg.member_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.eligibility_death_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.009653Z", "completed_at": "2024-10-11T23:52:35.030840Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.046105Z", "completed_at": "2024-10-11T23:52:35.046110Z"}], "thread_id": "Thread-7", "execution_time": 0.052171945571899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_death_flag", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'DEATH_FLAG' AS field_name\n    ,case\n        when m.death_flag in (1,0) then 'valid'\n        when m.death_flag is null then 'null'\n        else 'invalid'\n        end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(death_flag as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_coco.data_quality.eligibility_death_flag"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.014786Z", "completed_at": "2024-10-11T23:52:35.036732Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.050764Z", "completed_at": "2024-10-11T23:52:35.050770Z"}], "thread_id": "Thread-6", "execution_time": 0.055603981018066406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_demographics", "compiled": true, "compiled_code": "\n\n\nwith eligibility_spans as(\n    select distinct\n        member_id || '-' || enrollment_start_date || '-' || enrollment_end_date || '-' || payer || '-' || plan as eligibility_span_id\n        , patient_id\n        , birth_date\n        , gender\n    from tuva.input_layer.eligibility\n)\n\n, missing_birth_date as(\n    select\n    'Missing birthday' as data_quality_check\n    , count(distinct eligibility_span_id) as result_count\n    from eligibility_spans\n    where birth_date is null\n)\n, invalid_birth_date as(\n    select\n    'Birthday is not a valid date' as data_quality_check\n    , count(distinct eligibility_span_id) as result_count\n    from eligibility_spans e\n    left join reference_data.calendar c\n        on e.birth_date = c.full_date\n    where c.full_date is null\n)\n, future_birth_date as(\n    select\n    'Birthday is in the future' as data_quality_check\n    , count(distinct eligibility_span_id) as result_count\n    from eligibility_spans\n    \n        where birth_date > current_date\n    \n)\n, past_birth_date as(\n    select\n    'Birthday is too far in the past' as data_quality_check\n    , count(distinct eligibility_span_id) as result_count\n    from eligibility_spans\n    \n        where cast(floor(datediff(\n        hour,\n        birth_date,\n        current_date\n        ) / 8760.0) as integer ) > 110\n    \n\n)\n, multiple_birth_date as(\n    select\n    'Patient has multiple birthdays' as data_quality_check\n    , count(distinct patient_id) as result_count\n    from(\n        select\n            patient_id\n            , birth_date\n            , rank() over (partition by patient_id, birth_date order by birth_date) as rank_birth_date\n        from eligibility_spans e\n        where birth_date is not null\n    )x\nwhere rank_birth_date > 1\n)\n, missing_gender as(\n    select\n    'Missing gender' as data_quality_check\n    , count(distinct eligibility_span_id) as result_count\n    from eligibility_spans\n    where birth_date is null\n)\n, invalid_gender as(\n    select\n    'Patient gender does not join to terminology table' as data_quality_check\n    , count(distinct eligibility_span_id) as result_count\n    from eligibility_spans\n    where birth_date is null\n)\n\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from missing_birth_date\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from invalid_birth_date\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from future_birth_date\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from past_birth_date\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from multiple_birth_date\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from missing_gender\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from invalid_gender", "relation_name": "dev_coco.data_quality.eligibility_demographics"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.024916Z", "completed_at": "2024-10-11T23:52:35.037232Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.055465Z", "completed_at": "2024-10-11T23:52:35.055472Z"}], "thread_id": "Thread-8", "execution_time": 0.058937788009643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_dq_stage", "compiled": true, "compiled_code": "\n\nwith month_start_and_end_dates as (\n  select\n      year_month_int as year_month\n    , min(full_date) as month_start_date\n    , max(full_date) as month_end_date\n  from dev_coco.reference_data.calendar\n  group by year_month_int\n)\n\nselect distinct\n    a.patient_id\n  , b.year_month\n  , b.month_start_date\n  , b.month_end_date\n  , a.payer\n  , a.plan\n  , data_source\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility a\ninner join month_start_and_end_dates b\n  on a.enrollment_start_date <= b.month_end_date\n  and a.enrollment_end_date >= b.month_start_date", "relation_name": "dev_coco.data_quality.data_quality__eligibility_dq_stage"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.031468Z", "completed_at": "2024-10-11T23:52:35.055998Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.058649Z", "completed_at": "2024-10-11T23:52:35.058653Z"}], "thread_id": "Thread-5", "execution_time": 0.04979085922241211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_dual_status_code", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n        ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'DUAL_STATUS_CODE' AS field_name\n    ,case when m.dual_status_code is null then 'null'\n          when term.dual_status_code is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.dual_status_code is not null and term.dual_status_code is null then 'Dual Status Code does not join to Terminology Medicare Dual Eligibility table'\n        else null\n    end as invalid_reason\n    , m.dual_status_code || '|' || coalesce(term.dual_status_description,'') as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m\nleft join dev_coco.terminology.medicare_dual_eligibility term on m.dual_status_code = term.dual_status_code", "relation_name": "dev_coco.data_quality.eligibility_dual_status_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.037483Z", "completed_at": "2024-10-11T23:52:35.056707Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.059738Z", "completed_at": "2024-10-11T23:52:35.059742Z"}], "thread_id": "Thread-9", "execution_time": 0.04560422897338867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_end_date", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID' AS drill_down_key\n    ,coalesce(m.member_id,'NULL') AS drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'ENROLLMENT_END_DATE' AS field_name\n    ,case\n        when m.enrollment_end_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.enrollment_end_date < m.enrollment_start_date then 'invalid'\n        when m.enrollment_end_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n\n        when m.enrollment_end_date <= cast('1901-01-01' as date) then 'too old'\n        when m.enrollment_end_date < m.enrollment_start_date then 'end date before start date'\n        else null\n    end as invalid_reason\n    ,cast(enrollment_end_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_coco.data_quality.eligibility_end_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.042006Z", "completed_at": "2024-10-11T23:52:35.057369Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.060472Z", "completed_at": "2024-10-11T23:52:35.060476Z"}], "thread_id": "Thread-10", "execution_time": 0.04602670669555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_first_name", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'FIRST_NAME' AS field_name\n    ,case when m.first_name is null then 'null'\n                             else 'valid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(first_name as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_coco.data_quality.eligibility_first_name"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.046576Z", "completed_at": "2024-10-11T23:52:35.058319Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.061459Z", "completed_at": "2024-10-11T23:52:35.061463Z"}], "thread_id": "Thread-4", "execution_time": 0.03259396553039551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_gender", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'GENDER' AS field_name\n    ,case when m.gender is  null then 'null'\n          when term.gender is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.gender is not null and term.gender is null then 'Gender does not join to Terminology Gender table'\n        else null\n    end as invalid_reason\n    ,cast(m.gender as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m\nleft join dev_coco.terminology.gender term on m.gender = term.gender", "relation_name": "dev_coco.data_quality.eligibility_gender"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.051249Z", "completed_at": "2024-10-11T23:52:35.059182Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.062215Z", "completed_at": "2024-10-11T23:52:35.062219Z"}], "thread_id": "Thread-2", "execution_time": 0.032624006271362305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_last_name", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'LAST_NAME' AS field_name\n    ,case when m.last_name is null then 'null'\n                             else 'valid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(last_name as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_coco.data_quality.eligibility_last_name"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.069914Z", "completed_at": "2024-10-11T23:52:35.086960Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.103787Z", "completed_at": "2024-10-11T23:52:35.103795Z"}], "thread_id": "Thread-7", "execution_time": 0.04369926452636719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_member_id", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'MEMBER_ID' AS field_name\n    ,case when m.member_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(member_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_coco.data_quality.eligibility_member_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.065117Z", "completed_at": "2024-10-11T23:52:35.087588Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.108485Z", "completed_at": "2024-10-11T23:52:35.108492Z"}], "thread_id": "Thread-3", "execution_time": 0.049128055572509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_medicare_status_code", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'MEDICARE_STATUS_CODE' AS field_name\n    ,case when m.medicare_status_code is null then 'null'\n          when term.medicare_status_code is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.medicare_status_code is not null and term.medicare_status_code is null then 'Medicare Status Code does not join to Terminology Medicare Status table'\n        else null\n    end as invalid_reason\n    , m.medicare_status_code || '|' || coalesce(term.medicare_status_description,'') as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m\nleft join dev_coco.terminology.medicare_status term on m.medicare_status_code = term.medicare_status_code", "relation_name": "dev_coco.data_quality.eligibility_medicare_status_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.075274Z", "completed_at": "2024-10-11T23:52:35.092285Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.109014Z", "completed_at": "2024-10-11T23:52:35.109020Z"}], "thread_id": "Thread-6", "execution_time": 0.04817938804626465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_missing_patient_id", "compiled": true, "compiled_code": "\n\n\nwith eligibility_spans as(\n    select distinct\n        member_id || '-' || enrollment_start_date || '-' || enrollment_end_date || '-' || payer || '-' || plan as eligibility_span_id\n        , patient_id\n    from tuva.input_layer.eligibility\n)\n\nselect\n    'Missing patient_id' as data_quality_check\n    ,count(*) as result_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom eligibility_spans\nwhere\n    patient_id is null or patient_id = ''", "relation_name": "dev_coco.data_quality.eligibility_missing_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.079572Z", "completed_at": "2024-10-11T23:52:35.103522Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.118447Z", "completed_at": "2024-10-11T23:52:35.118458Z"}], "thread_id": "Thread-8", "execution_time": 0.0573880672454834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_missing_payer", "compiled": true, "compiled_code": "\n\nwith eligibility_spans as(\n    select distinct\n        member_id || '-' || enrollment_start_date || '-' || enrollment_end_date || '-' || payer || '-' || plan as eligibility_span_id\n        , payer\n        , payer_type\n    from tuva.input_layer.eligibility\n)\n\n, missing_payer_type as(\n    select\n        'Missing payer type' as data_quality_check\n        , count(distinct eligibility_span_id) as result_count\n    from eligibility_spans\n    where payer_type is null\n)\n, missing_payer_name as(\n    select\n        'Missing payer name' as data_quality_check\n        , count(distinct eligibility_span_id) as result_count\n    from eligibility_spans\n    where payer is null\n)\n, invalid_payer_type as(\n    select\n        'Payer type does not join to terminology table' as data_quality_check\n        , count(distinct eligibility_span_id) as result_count\n    from eligibility_spans e\n    left join dev_coco.terminology.payer_type pt\n        on e.payer_type = pt.payer_type\n    where pt.payer_type is null\n)\n\nselect * , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from missing_payer_type\nunion all\nselect * , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from missing_payer_name\nunion all\nselect * , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from invalid_payer_type", "relation_name": "dev_coco.data_quality.eligibility_missing_payer"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.087878Z", "completed_at": "2024-10-11T23:52:35.114399Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.121774Z", "completed_at": "2024-10-11T23:52:35.121780Z"}], "thread_id": "Thread-5", "execution_time": 0.05733513832092285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_original_reason_entitlement_code", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'ORIGINAL_REASON_ENTITLEMENT_CODE' AS field_name\n    ,case when m.original_reason_entitlement_code is null then 'null'\n          when term.original_reason_entitlement_code is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.original_reason_entitlement_code is not null and term.original_reason_entitlement_code is null then 'Original Reason Entitlement Code does not join to Terminology Original Reason Entitlement Code table'\n        else null\n    end as invalid_reason\n    , m.original_reason_entitlement_code || '|' || coalesce(term.original_reason_entitlement_description,'') as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m\nleft join dev_coco.terminology.medicare_orec term on m.original_reason_entitlement_code = term.original_reason_entitlement_code", "relation_name": "dev_coco.data_quality.eligibility_original_reason_entitlement_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.092866Z", "completed_at": "2024-10-11T23:52:35.114828Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.122365Z", "completed_at": "2024-10-11T23:52:35.122370Z"}], "thread_id": "Thread-9", "execution_time": 0.05282092094421387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_patient_id", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'PATIENT_ID' AS field_name\n    ,case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(patient_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_coco.data_quality.eligibility_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.098447Z", "completed_at": "2024-10-11T23:52:35.119043Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.123511Z", "completed_at": "2024-10-11T23:52:35.123517Z"}], "thread_id": "Thread-10", "execution_time": 0.048619747161865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_payer", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'PAYER' AS field_name\n    ,case when m.payer is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(payer as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_coco.data_quality.eligibility_payer"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.104302Z", "completed_at": "2024-10-11T23:52:35.120863Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.124958Z", "completed_at": "2024-10-11T23:52:35.124963Z"}], "thread_id": "Thread-4", "execution_time": 0.039687156677246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_payer_type", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'PAYER_TYPE' AS field_name\n    ,case when m.payer_type is  null then 'null'\n          when term.payer_type is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.payer_type is not null and term.payer_type is null then 'Payer Type does not join to Terminology Payer Type table'\n        else null\n    end as invalid_reason\n    ,cast(m.payer_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m\nleft join dev_coco.terminology.payer_type term on m.payer_type = term.payer_type", "relation_name": "dev_coco.data_quality.eligibility_payer_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.109535Z", "completed_at": "2024-10-11T23:52:35.123213Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.127850Z", "completed_at": "2024-10-11T23:52:35.127857Z"}], "thread_id": "Thread-2", "execution_time": 0.042047977447509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_phone", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'PHONE' AS field_name\n    ,case when m.phone is null then 'null'\n                             else 'valid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(phone as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_coco.data_quality.eligibility_phone"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.141199Z", "completed_at": "2024-10-11T23:52:35.166193Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.176519Z", "completed_at": "2024-10-11T23:52:35.176529Z"}], "thread_id": "Thread-6", "execution_time": 0.051943063735961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_start_date", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'ENROLLMENT_START_DATE' AS field_name\n    ,case\n        when m.enrollment_start_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.enrollment_start_date <= cast('1901-01-01' as date) then 'invalid'\n        when m.enrollment_start_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when m.enrollment_start_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.enrollment_start_date <= cast('1901-01-01' as date) then 'too old'\n    else null\n    end as invalid_reason\n    ,cast(enrollment_start_date as TEXT) as field_value\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_coco.data_quality.eligibility_start_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.131610Z", "completed_at": "2024-10-11T23:52:35.166506Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.177097Z", "completed_at": "2024-10-11T23:52:35.177102Z"}], "thread_id": "Thread-7", "execution_time": 0.053114891052246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_plan", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'PLAN' AS field_name\n    ,case when m.plan is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(m.plan as TEXT) as field_value\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_coco.data_quality.eligibility_plan"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.136756Z", "completed_at": "2024-10-11T23:52:35.166778Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.177813Z", "completed_at": "2024-10-11T23:52:35.177818Z"}], "thread_id": "Thread-3", "execution_time": 0.05350613594055176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_race", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'RACE' AS field_name\n    ,case when m.race is  null then 'null'\n          when r.description is  null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.race is not null and r.description is null then 'Race does not join to terminology race table'\n        else null\n    end as invalid_reason\n    ,cast(race as TEXT) as field_value\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m\nleft join dev_coco.terminology.race r on m.race=r.description", "relation_name": "dev_coco.data_quality.eligibility_race"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.148917Z", "completed_at": "2024-10-11T23:52:35.170700Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.183588Z", "completed_at": "2024-10-11T23:52:35.183595Z"}], "thread_id": "Thread-8", "execution_time": 0.05615997314453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_state", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT \n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'STATE' AS field_name\n    ,case when m.state is  null then 'null'\n          when term.ssa_fips_state_name is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.state is not null and term.ssa_fips_state_name is null then 'State does not join to Terminology SSA_FIPS_STATE table'\n        else null\n    end as invalid_reason\n    ,cast(state as TEXT) as field_value\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m\nleft join dev_coco.reference_data.ssa_fips_state as term on m.state = term.ssa_fips_state_name", "relation_name": "dev_coco.data_quality.eligibility_state"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.154393Z", "completed_at": "2024-10-11T23:52:35.177558Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.185675Z", "completed_at": "2024-10-11T23:52:35.185679Z"}], "thread_id": "Thread-5", "execution_time": 0.05554699897766113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_trend", "compiled": true, "compiled_code": "\n\nwith eligibility_spans as(\n    select distinct\n        member_id || '-' || enrollment_start_date || '-' || enrollment_end_date || '-' || payer || '-' || plan as eligibility_span_id\n        , enrollment_start_date\n        , enrollment_end_date\n    from tuva.input_layer.eligibility\n)\n, month_start_and_end_dates as (\n  select\n    year || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || month,\n            2\n        )\n    end as year_month\n    , min(full_date) as month_start_date\n    , max(full_date) as month_end_date\n  from dev_coco.reference_data.calendar\n  group by year, month, year_month\n)\n, member_months as (\n    select distinct\n        eligibility_span_id\n        , year_month\n    from eligibility_spans es\n    inner join month_start_and_end_dates d\n        on es.enrollment_start_date <= d.month_end_date\n        and es.enrollment_end_date >= d.month_start_date\n)\n\n\nselect\n    year_month\n    , count(distinct eligibility_span_id) as member_months\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom member_months\ngroup by\n    year_month", "relation_name": "dev_coco.data_quality.eligibility_trend"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.161509Z", "completed_at": "2024-10-11T23:52:35.178279Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.186438Z", "completed_at": "2024-10-11T23:52:35.186442Z"}], "thread_id": "Thread-9", "execution_time": 0.05602598190307617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__eligibility_zip_code", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n    m.data_source\n    ,coalesce(cast(m.enrollment_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'ELIGIBILITY' AS table_name\n    ,'Member ID | Enrollment Start Date' AS drill_down_key\n    ,coalesce(m.member_id, 'NULL') as drill_down_value\n    ,'ELIGIBILITY' AS claim_type\n    ,'ZIP_CODE' AS field_name\n    \n    ,case when m.zip_code is  null then 'null'\n          when length(m.zip_code) in  (5,9,10) then 'valid'\n                             else 'invalid' end as bucket_name\n    ,case\n        when m.zip_code is not null and length(m.zip_code) NOT IN (5,9,10) then 'Invalid Zip Code Length'\n        else null\n     end as invalid_reason\n    \n    ,cast(zip_code as TEXT) as field_value\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.eligibility m", "relation_name": "dev_coco.data_quality.eligibility_zip_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.178539Z", "completed_at": "2024-10-11T23:52:35.187895Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.190479Z", "completed_at": "2024-10-11T23:52:35.190483Z"}], "thread_id": "Thread-2", "execution_time": 0.0372617244720459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_allowed_amount", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'ALLOWED_AMOUNT' AS field_name\n    , case when m.allowed_amount is null          then        'null'\n                                              else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(allowed_amount as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_coco.data_quality.pharmacy_allowed_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.192649Z", "completed_at": "2024-10-11T23:52:35.220516Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.229613Z", "completed_at": "2024-10-11T23:52:35.229621Z"}], "thread_id": "Thread-6", "execution_time": 0.04240298271179199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_claim_date_checks", "compiled": true, "compiled_code": "\n\nwith pharmacy_claim as (\n  select\n      claim_id\n    , max(case when paid_date is null then 1 else 0 end) as missing_paid_date\n    , max(case when dispensing_date is null then 1 else 0 end) as missing_dispensing_date\n  from tuva.input_layer.pharmacy_claim\n  group by\n      claim_id\n)\n\n, final as (\n  select\n      'missing paid_date' as data_quality_check\n    , sum(missing_paid_date) as result_count\n  from pharmacy_claim\n\n  union all\n\n  select\n      'missing dispensing_date' as data_quality_check\n    , sum(missing_dispensing_date) as result_count\n  from pharmacy_claim\n)\n\nselect\n    *\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom final", "relation_name": "dev_coco.data_quality.pharmacy_claim_date_checks"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.196466Z", "completed_at": "2024-10-11T23:52:35.220787Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.231465Z", "completed_at": "2024-10-11T23:52:35.231470Z"}], "thread_id": "Thread-7", "execution_time": 0.043927907943725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_claim_date_trends", "compiled": true, "compiled_code": "\n\nwith pharmacy_claim as (\n  select\n      c.year_month_int\n    , p.claim_id\n    , max(case when p.paid_date is not null then 1 else 0 end) as non_null_paid_date\n    , max(case when p.dispensing_date is not null then 1 else 0 end) as non_null_dispensing_date\n  from tuva.input_layer.pharmacy_claim p\n  left join dev_coco.reference_data.calendar c\n    on coalesce(p.paid_date, p.dispensing_date) = c.full_date\n  group by\n      p.claim_id\n    , c.year_month_int\n)\n\nselect\n    year_month_int as year_month\n  , sum(non_null_paid_date) as paid_date\n  , sum(non_null_dispensing_date) as dispensing_date\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom pharmacy_claim\ngroup by\n    year_month_int", "relation_name": "dev_coco.data_quality.pharmacy_claim_date_trends"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.201291Z", "completed_at": "2024-10-11T23:52:35.229041Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.241101Z", "completed_at": "2024-10-11T23:52:35.241113Z"}], "thread_id": "Thread-3", "execution_time": 0.05211591720581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_claim_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'CLAIM_ID' AS field_name\n    , case\n        when m.claim_id is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(member_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_coco.data_quality.pharmacy_claim_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.206455Z", "completed_at": "2024-10-11T23:52:35.229346Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.241748Z", "completed_at": "2024-10-11T23:52:35.241754Z"}], "thread_id": "Thread-8", "execution_time": 0.05217409133911133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_claim_line_number", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'CLAIM_LINE_NUMBER' AS field_name\n    , case\n        when m.claim_line_number is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(member_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_coco.data_quality.pharmacy_claim_line_number"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.212600Z", "completed_at": "2024-10-11T23:52:35.231963Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.246242Z", "completed_at": "2024-10-11T23:52:35.246247Z"}], "thread_id": "Thread-4", "execution_time": 0.05539822578430176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_claim_ndc", "compiled": true, "compiled_code": "\n\nwith pharmacy_claim as (\n  select\n      claim_id\n    , max(case when term.ndc is null and m.ndc_code is not null then 1 else 0 end) as invalid_ndc\n    , max(case when m.ndc_code is null then 1 else 0 end) as missing_ndc\n  from tuva.input_layer.pharmacy_claim m\n  left join dev_coco.terminology.ndc as term\n    on m.ndc_code = term.ndc\n  group by\n      claim_id\n)\n\n, final as (\n  select\n      'missing ndc' as data_quality_check\n    , sum(missing_ndc) as result_count\n  from pharmacy_claim\n\n  union all\n\n  select\n      'invalid ndc' as data_quality_check\n    , sum(invalid_ndc) as result_count\n  from pharmacy_claim\n)\n\nselect\n    *\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom final", "relation_name": "dev_coco.data_quality.pharmacy_claim_ndc"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.216419Z", "completed_at": "2024-10-11T23:52:35.232225Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.246773Z", "completed_at": "2024-10-11T23:52:35.246779Z"}], "thread_id": "Thread-10", "execution_time": 0.05564165115356445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_claim_npi", "compiled": true, "compiled_code": "\n\nwith pharmacy_claim as (\n    select\n        m.claim_id\n      , max(case when term.npi is null and m.prescribing_provider_npi is not null then 1 else 0 end) as invalid_prescribing_npi\n      , max(case when m.prescribing_provider_npi is null then 1 else 0 end) as missing_prescribing_npi\n      , max(case when term.entity_type_code = '2' then 1 else 0 end) as wrong_entity_type_prescribing_npi\n      , max(case when term2.npi is null and m.dispensing_provider_npi is not null then 1 else 0 end) as invalid_dispensing_npi\n      , max(case when m.dispensing_provider_npi is null then 1 else 0 end) as missing_dispensing_npi\n      , max(case when term2.entity_type_code = '1' then 1 else 0 end) as wrong_entity_type_dispensing_npi\n    from tuva.input_layer.pharmacy_claim as m\n    left join dev_coco.terminology.provider as term\n      on m.prescribing_provider_npi = term.npi\n    left join dev_coco.terminology.provider as term2\n      on m.dispensing_provider_npi  = term2.npi\n    group by\n        m.claim_id\n)\n\n,final as (\nselect\n    'invalid prescribing_npi' as data_quality_check\n  , sum(invalid_prescribing_npi) as result_count\nfrom pharmacy_claim\n\nunion all\n\nselect\n    'missing prescribing_npi' as data_quality_check\n  , sum(missing_prescribing_npi) as result_count\nfrom pharmacy_claim\n\nunion all\n\nselect\n    'wrong entity type prescribing_npi' as data_quality_check\n  , sum(wrong_entity_type_prescribing_npi) as result_count\nfrom pharmacy_claim\n\nunion all\n\nselect\n    'invalid dispensing_npi' as data_quality_check\n  , sum(invalid_dispensing_npi) as result_count\nfrom pharmacy_claim\n\nunion all\n\nselect\n    'missing dispensing_npi' as data_quality_check\n  , sum(missing_dispensing_npi) as result_count\nfrom pharmacy_claim\n\nunion all\n\nselect\n    'wrong entity type dispensing_npi' as data_quality_check\n  , sum(wrong_entity_type_dispensing_npi) as result_count\nfrom pharmacy_claim\n)\n\nselect *\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom final", "relation_name": "dev_coco.data_quality.pharmacy_claim_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.221021Z", "completed_at": "2024-10-11T23:52:35.242255Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.248051Z", "completed_at": "2024-10-11T23:52:35.248057Z"}], "thread_id": "Thread-5", "execution_time": 0.05650901794433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_claim_prescription_details", "compiled": true, "compiled_code": "\n\nwith pharmacy_claim as (\n  select\n      claim_id\n    , max(case \n        when quantity is null then 1\n        when quantity = 0 then 1\n        else 0\n      end) as missing_quantity\n    , max(case \n        when days_supply is null then 1\n        when days_supply = 0 then 1\n        else 0\n      end) as missing_days_supply\n    , max(case \n        when refills is null then 1\n        else 0\n      end) as missing_refills\n  from tuva.input_layer.pharmacy_claim m\n  group by\n      claim_id\n)\n\n, final as (\n  select\n      'missing quantity' as data_quality_check\n    , sum(missing_quantity) as result_count\n  from pharmacy_claim\n\n  union all\n\n  select\n      'missing days supply' as data_quality_check\n    , sum(missing_days_supply) as result_count\n  from pharmacy_claim\n\n  union all\n\n  select\n      'missing refills' as data_quality_check\n    , sum(missing_refills) as result_count\n  from pharmacy_claim\n)\n\nselect\n    *\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom final", "relation_name": "dev_coco.data_quality.pharmacy_claim_prescription_details"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.224785Z", "completed_at": "2024-10-11T23:52:35.242521Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.248581Z", "completed_at": "2024-10-11T23:52:35.248585Z"}], "thread_id": "Thread-9", "execution_time": 0.05651712417602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_claim_trended_claim_volume_and_dollars", "compiled": true, "compiled_code": "\n\nselect\n    c.year_month_int as year_month\n  , count(distinct p.claim_id) as claim_volume\n  , sum(p.paid_amount) as paid_amount\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim p\nleft join dev_coco.reference_data.calendar c\n  on coalesce(p.paid_date, p.dispensing_date) = c.full_date\ngroup by\n    c.year_month_int", "relation_name": "dev_coco.data_quality.pharmacy_claim_trended_claim_volume_and_dollars"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.235516Z", "completed_at": "2024-10-11T23:52:35.249049Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.251779Z", "completed_at": "2024-10-11T23:52:35.251783Z"}], "thread_id": "Thread-2", "execution_time": 0.03957867622375488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_coinsurance_amount", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'COINSURANCE_AMOUNT' AS field_name\n    , case when m.coinsurance_amount is null          then        'null'\n                                              else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(coinsurance_amount as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_coco.data_quality.pharmacy_coinsurance_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.254697Z", "completed_at": "2024-10-11T23:52:35.292955Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.307620Z", "completed_at": "2024-10-11T23:52:35.307629Z"}], "thread_id": "Thread-6", "execution_time": 0.058426856994628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_copayment_amount", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'COPAYMENT_AMOUNT' AS field_name\n    , case when m.copayment_amount is null then 'null'\n                                           else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(copayment_amount as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_coco.data_quality.pharmacy_copayment_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.261311Z", "completed_at": "2024-10-11T23:52:35.294715Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.309846Z", "completed_at": "2024-10-11T23:52:35.309854Z"}], "thread_id": "Thread-7", "execution_time": 0.06032681465148926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_data_source", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'DATA_SOURCE' AS field_name\n    , case\n        when m.data_source is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(data_source as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_coco.data_quality.pharmacy_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.266896Z", "completed_at": "2024-10-11T23:52:35.307069Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.317446Z", "completed_at": "2024-10-11T23:52:35.317456Z"}], "thread_id": "Thread-3", "execution_time": 0.06698226928710938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_days_supply", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'DAYS_SUPPLY' AS field_name\n    , case\n        when m.days_supply is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(days_supply as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_coco.data_quality.pharmacy_days_supply"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.272257Z", "completed_at": "2024-10-11T23:52:35.307330Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.318027Z", "completed_at": "2024-10-11T23:52:35.318033Z"}], "thread_id": "Thread-8", "execution_time": 0.06725406646728516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_deductible_amount", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'DEDUCTIBLE_AMOUNT' AS field_name\n    , case when m.deductible_amount is null then 'null'\n                                            else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(deductible_amount as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_coco.data_quality.pharmacy_deductible_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.279097Z", "completed_at": "2024-10-11T23:52:35.310464Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.319927Z", "completed_at": "2024-10-11T23:52:35.319932Z"}], "thread_id": "Thread-4", "execution_time": 0.06725192070007324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_dispensing_date", "compiled": true, "compiled_code": "\nwith tuva_last_run as(\n    select cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) as tuva_last_run\n)\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'DISPENSING_DATE' AS field_name\n    , case\n        when m.dispensing_date > tuva_last_run then 'invalid'\n        when m.dispensing_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.dispensing_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.dispensing_date > tuva_last_run then 'future'\n        when m.dispensing_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        else null\n        end as invalid_reason\n    , cast(dispensing_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m\ncross join tuva_last_run cte", "relation_name": "dev_coco.data_quality.pharmacy_dispensing_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.286372Z", "completed_at": "2024-10-11T23:52:35.310852Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.320432Z", "completed_at": "2024-10-11T23:52:35.320438Z"}], "thread_id": "Thread-10", "execution_time": 0.06747698783874512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_dispensing_provider_npi", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'DISPENSING_PROVIDER_NPI' AS field_name\n    , case when term.npi is not null                     then        'valid'\n          when m.dispensing_provider_npi is not null    then 'invalid'\n                                                        else 'null'\n                                                        end as bucket_name\n    , case\n        when m.dispensing_provider_npi is not null\n            and term.npi is null\n            then 'dispensing provider npi does not join to terminology provider table'\n        else null\n    end as invalid_reason\n    , cast(m.dispensing_provider_npi as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m\nleft join dev_coco.terminology.provider as term on m.dispensing_provider_npi = term.npi", "relation_name": "dev_coco.data_quality.pharmacy_dispensing_provider_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.295125Z", "completed_at": "2024-10-11T23:52:35.311272Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.320954Z", "completed_at": "2024-10-11T23:52:35.320958Z"}], "thread_id": "Thread-5", "execution_time": 0.0671999454498291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_member_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'MEMBER_ID' AS field_name\n    , case\n        when m.member_id is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(member_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_coco.data_quality.pharmacy_member_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.300843Z", "completed_at": "2024-10-11T23:52:35.318573Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.322168Z", "completed_at": "2024-10-11T23:52:35.322172Z"}], "thread_id": "Thread-9", "execution_time": 0.06813883781433105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_ndc_code", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'NDC_CODE' AS field_name\n    , case when term.ndc is not null          then        'valid'\n          when m.ndc_code is not null        then 'invalid'\n                                             else 'null' end as bucket_name\n    , case\n        when m.ndc_code is not null\n            and term.ndc is null\n            then 'NDC Code does not join to Terminology NDC table'\n        else null\n    end as invalid_reason\n    , m.ndc_code || '|' || coalesce(term.rxnorm_description, term.fda_description, '') as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m\nleft join dev_coco.terminology.ndc as term on m.ndc_code = term.ndc", "relation_name": "dev_coco.data_quality.pharmacy_ndc_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.311538Z", "completed_at": "2024-10-11T23:52:35.322666Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.326265Z", "completed_at": "2024-10-11T23:52:35.326273Z"}], "thread_id": "Thread-2", "execution_time": 0.04772591590881348, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_paid_amount", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'PAID_AMOUNT' AS field_name\n    , case when m.paid_amount is null          then        'null'\n                                              else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(paid_amount as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_coco.data_quality.pharmacy_paid_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.330287Z", "completed_at": "2024-10-11T23:52:35.367201Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.376698Z", "completed_at": "2024-10-11T23:52:35.376707Z"}], "thread_id": "Thread-6", "execution_time": 0.0538790225982666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_paid_date", "compiled": true, "compiled_code": "\nwith tuva_last_run as(\n     select cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) as tuva_last_run\n)\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'PAID_DATE' AS field_name\n    , case\n        when m.paid_date > tuva_last_run then 'invalid'\n        when m.paid_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.paid_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.paid_date > tuva_last_run then 'future'\n        when m.paid_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        else null\n        end as invalid_reason\n    , cast(paid_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m\ncross join tuva_last_run cte", "relation_name": "dev_coco.data_quality.pharmacy_paid_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.338533Z", "completed_at": "2024-10-11T23:52:35.372611Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.377314Z", "completed_at": "2024-10-11T23:52:35.377320Z"}], "thread_id": "Thread-7", "execution_time": 0.054064035415649414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_patient_id", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'PATIENT_ID' AS field_name\n    , case\n        when m.patient_id is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(patient_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_coco.data_quality.pharmacy_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.345133Z", "completed_at": "2024-10-11T23:52:35.372963Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.378120Z", "completed_at": "2024-10-11T23:52:35.378125Z"}], "thread_id": "Thread-3", "execution_time": 0.052970170974731445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_payer", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'PAYER' AS field_name\n    , case\n        when m.payer is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(payer as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_coco.data_quality.pharmacy_payer"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.350614Z", "completed_at": "2024-10-11T23:52:35.376092Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.379108Z", "completed_at": "2024-10-11T23:52:35.379113Z"}], "thread_id": "Thread-8", "execution_time": 0.053637027740478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_plan", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'PLAN' AS field_name\n    , case\n        when m.plan is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(plan as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_coco.data_quality.pharmacy_plan"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.361450Z", "completed_at": "2024-10-11T23:52:35.377827Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.384005Z", "completed_at": "2024-10-11T23:52:35.384010Z"}], "thread_id": "Thread-10", "execution_time": 0.055737972259521484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_quantity", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'PAID_DATE' AS field_name\n    , case\n        when m.quantity is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(quantity as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_coco.data_quality.pharmacy_quantity"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.356478Z", "completed_at": "2024-10-11T23:52:35.378551Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.384773Z", "completed_at": "2024-10-11T23:52:35.384777Z"}], "thread_id": "Thread-4", "execution_time": 0.05713009834289551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_prescribing_provider_npi", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'PRESCRIBING_PROVIDER_NPI' AS field_name\n    , case when term.npi is not null          then        'valid'\n          when m.prescribing_provider_npi is not null    then 'invalid'\n                                             else 'null' end as bucket_name\n    , case\n        when m.prescribing_provider_npi is not null\n            and term.npi is null\n            then 'Prescribing Provider NPI does not join to Terminology Provider table'\n        else null\n    end as invalid_reason\n    , cast(m.prescribing_provider_npi as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m\nleft join dev_coco.terminology.provider as term on m.prescribing_provider_npi = term.npi", "relation_name": "dev_coco.data_quality.pharmacy_prescribing_provider_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.367473Z", "completed_at": "2024-10-11T23:52:35.378791Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.385250Z", "completed_at": "2024-10-11T23:52:35.385254Z"}], "thread_id": "Thread-5", "execution_time": 0.05662679672241211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_refills", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.paid_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'PHARMACY_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'PHARMACY' AS claim_type\n    , 'REFILLS' AS field_name\n    , case\n        when m.refills is null then 'null' else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(refills as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.pharmacy_claim m", "relation_name": "dev_coco.data_quality.pharmacy_refills"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.391290Z", "completed_at": "2024-10-11T23:52:35.426017Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.443655Z", "completed_at": "2024-10-11T23:52:35.443665Z"}], "thread_id": "Thread-6", "execution_time": 0.057710886001586914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_allowed_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'ALLOWED_AMOUNT' AS field_name\n    , case when m.allowed_amount is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(allowed_amount as TEXT) as field_value\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_coco.data_quality.claim_allowed_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.396655Z", "completed_at": "2024-10-11T23:52:35.426323Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.444757Z", "completed_at": "2024-10-11T23:52:35.444762Z"}], "thread_id": "Thread-7", "execution_time": 0.05813407897949219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_charge_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'CHARGE_AMOUNT' AS field_name\n    , case when m.charge_amount is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(charge_amount as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_coco.data_quality.claim_charge_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.403067Z", "completed_at": "2024-10-11T23:52:35.437173Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.445616Z", "completed_at": "2024-10-11T23:52:35.445622Z"}], "thread_id": "Thread-3", "execution_time": 0.058013200759887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_claim_id", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' as drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'CLAIM_ID' AS field_name\n    ,case when m.claim_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(member_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_coco.data_quality.claim_claim_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.407796Z", "completed_at": "2024-10-11T23:52:35.443026Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.446166Z", "completed_at": "2024-10-11T23:52:35.446170Z"}], "thread_id": "Thread-8", "execution_time": 0.05768394470214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_claim_line_end_date", "compiled": true, "compiled_code": "\n\nwith tuva_last_run as(\n\n    select cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) as tuva_last_run\n\n)\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'CLAIM_LINE_END_DATE' AS field_name\n    , case\n        when m.claim_line_end_date > tuva_last_run then 'invalid'\n        when m.claim_line_end_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.claim_line_end_date > m.claim_line_end_date then 'invalid'\n        when m.claim_line_end_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.claim_line_end_date > tuva_last_run then 'future'\n        when m.claim_line_end_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when m.claim_line_end_date > m.claim_end_date then 'line date greater than claim date'\n        else null\n    end as invalid_reason\n    , cast(claim_line_end_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m\ncross join tuva_last_run cte", "relation_name": "dev_coco.data_quality.claim_claim_line_end_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.414280Z", "completed_at": "2024-10-11T23:52:35.443350Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.446721Z", "completed_at": "2024-10-11T23:52:35.446727Z"}], "thread_id": "Thread-9", "execution_time": 0.057726144790649414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_claim_line_number", "compiled": true, "compiled_code": "\n\nSELECT\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' as drill_down_key\n    ,coalesce(claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'CLAIM_LINE_NUMBER' AS field_name\n    ,case when m.claim_line_number is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(member_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_coco.data_quality.claim_claim_line_number"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.419362Z", "completed_at": "2024-10-11T23:52:35.445244Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.449837Z", "completed_at": "2024-10-11T23:52:35.449842Z"}], "thread_id": "Thread-10", "execution_time": 0.06000185012817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_claim_line_start_date", "compiled": true, "compiled_code": "\n\nwith tuva_last_run as(\n\n    select cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) as tuva_last_run\n\n)\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'CLAIM_LINE_START_DATE' AS field_name\n    , case\n        when m.claim_line_start_date > tuva_last_run then 'invalid'\n        when m.claim_line_start_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.claim_line_start_date < m.claim_start_date then 'invalid'\n        when m.claim_line_start_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.claim_line_start_date > tuva_last_run then 'future'\n        when m.claim_line_start_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when m.claim_line_start_date < m.claim_start_date then 'line date less than than claim date'\n        else null\n    end as invalid_reason\n    , cast(claim_line_start_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m\ncross join tuva_last_run cte", "relation_name": "dev_coco.data_quality.claim_claim_line_start_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.426612Z", "completed_at": "2024-10-11T23:52:35.447199Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.451233Z", "completed_at": "2024-10-11T23:52:35.451237Z"}], "thread_id": "Thread-4", "execution_time": 0.06078791618347168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_claim_type", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' as drill_down_key\n,coalesce(claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'CLAIM_TYPE' AS field_name\n    ,case when m.claim_type is null then 'null'\n          when term.claim_type is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.claim_type is not null and term.claim_type is null then 'Claim Type does not join to Terminology Claim Type table'\n        else null\n    end as invalid_reason\n    ,cast(m.claim_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m\nleft join dev_coco.terminology.claim_type term on m.claim_type = term.claim_type", "relation_name": "dev_coco.data_quality.claim_claim_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.432105Z", "completed_at": "2024-10-11T23:52:35.447432Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.451676Z", "completed_at": "2024-10-11T23:52:35.451680Z"}], "thread_id": "Thread-5", "execution_time": 0.060961246490478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_coinsurance_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'COINSURANCE_AMOUNT' AS field_name\n    , case when m.coinsurance_amount is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(coinsurance_amount as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_coco.data_quality.claim_coninsurance_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.437507Z", "completed_at": "2024-10-11T23:52:35.447685Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.452133Z", "completed_at": "2024-10-11T23:52:35.452137Z"}], "thread_id": "Thread-2", "execution_time": 0.049698829650878906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_copayment_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'COPAYMENT_AMOUNT' AS field_name\n    , case when m.copayment_amount is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(copayment_amount as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_coco.data_quality.claim_copayment_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.458408Z", "completed_at": "2024-10-11T23:52:35.489164Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.505928Z", "completed_at": "2024-10-11T23:52:35.505935Z"}], "thread_id": "Thread-6", "execution_time": 0.05346035957336426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_data_source", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' as drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'DATA_SOURCE' AS field_name\n    ,case when m.data_source is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(data_source as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_coco.data_quality.claim_data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.463146Z", "completed_at": "2024-10-11T23:52:35.495732Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.506531Z", "completed_at": "2024-10-11T23:52:35.506536Z"}], "thread_id": "Thread-7", "execution_time": 0.053566932678222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_deductible_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n     , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'DEDUCTIBLE_AMOUNT' AS field_name\n    , case when m.deductible_amount is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(deductible_amount as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_coco.data_quality.claim_deductible_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.468769Z", "completed_at": "2024-10-11T23:52:35.495996Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.507140Z", "completed_at": "2024-10-11T23:52:35.507145Z"}], "thread_id": "Thread-3", "execution_time": 0.05349397659301758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_diagnosis_code_type", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' as drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'DIAGNOSIS_CODE_TYPE' AS field_name\n    ,case when m.diagnosis_code_type is null then 'null'\n          when term.code_type is null then 'invalid'\n                             else 'valid' end as bucket_name\n    ,case\n        when m.diagnosis_code_type is not null and term.code_type is null then 'Diagnosis Code Type does not join to Terminology Code Type table'\n        else null\n    end as invalid_reason\n    ,cast(m.diagnosis_code_type as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m\nleft join dev_coco.reference_data.code_type term on m.diagnosis_code_type = term.code_type", "relation_name": "dev_coco.data_quality.claim_diagnosis_code_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.473931Z", "completed_at": "2024-10-11T23:52:35.505346Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.508231Z", "completed_at": "2024-10-11T23:52:35.508236Z"}], "thread_id": "Thread-8", "execution_time": 0.05431699752807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_hcpcs_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'HCPCS_CODE' AS field_name\n    , case\n          when term.hcpcs is not null then 'valid'\n          when m.hcpcs_code is not null then 'invalid'\n          else 'null'\n    end as bucket_name\n    , case\n        when m.hcpcs_code is not null and term.hcpcs is null then 'HCPCS does not join to Terminology HCPCS_LEVEL_2 table'\n        else null\n     end as invalid_reason\n    , m.hcpcs_code || '|' || coalesce(term.short_description, '') as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n    from tuva.input_layer.medical_claim m\nleft join dev_coco.terminology.hcpcs_level_2 as term on m.hcpcs_code = term.hcpcs", "relation_name": "dev_coco.data_quality.claim_hcpcs_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.479144Z", "completed_at": "2024-10-11T23:52:35.505638Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.508696Z", "completed_at": "2024-10-11T23:52:35.508700Z"}], "thread_id": "Thread-9", "execution_time": 0.05449199676513672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_member_id", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'MEMBER_ID' AS field_name\n    ,case when m.member_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(member_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_coco.data_quality.claim_member_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.484151Z", "completed_at": "2024-10-11T23:52:35.507588Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.510626Z", "completed_at": "2024-10-11T23:52:35.510631Z"}], "thread_id": "Thread-10", "execution_time": 0.054518938064575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_paid_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'PAID_AMOUNT' AS field_name\n    , case when m.paid_amount is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(paid_amount as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_coco.data_quality.claim_paid_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.489543Z", "completed_at": "2024-10-11T23:52:35.507869Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.511112Z", "completed_at": "2024-10-11T23:52:35.511117Z"}], "thread_id": "Thread-4", "execution_time": 0.05360221862792969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_paid_date", "compiled": true, "compiled_code": "\n\nwith tuva_last_run as(\n\n     select cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) as tuva_last_run\n\n)\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'PAID_DATE' AS field_name\n    , case\n        when m.paid_date > tuva_last_run then 'invalid'\n        when m.paid_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.paid_date < m.claim_start_date then 'invalid'\n        when m.paid_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    , case\n        when m.paid_date > tuva_last_run then 'future'\n        when m.paid_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when m.paid_date < m.claim_start_date then 'paid date before claim start date'\n        else null\n    end as invalid_reason\n    , cast(claim_line_start_date as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m\ncross join tuva_last_run cte", "relation_name": "dev_coco.data_quality.claim_paid_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.496266Z", "completed_at": "2024-10-11T23:52:35.509129Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.512154Z", "completed_at": "2024-10-11T23:52:35.512159Z"}], "thread_id": "Thread-5", "execution_time": 0.05435919761657715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_patient_id", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n,coalesce(claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'PATIENT_ID' AS field_name\n    ,case when m.patient_id is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(patient_id as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_coco.data_quality.claim_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.501199Z", "completed_at": "2024-10-11T23:52:35.509419Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.512596Z", "completed_at": "2024-10-11T23:52:35.512600Z"}], "thread_id": "Thread-2", "execution_time": 0.0545201301574707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_payer", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain \n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n,coalesce(claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'PAYER' AS field_name\n    ,case when m.payer is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(payer as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_coco.data_quality.claim_payer"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.517925Z", "completed_at": "2024-10-11T23:52:35.576726Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.600551Z", "completed_at": "2024-10-11T23:52:35.600561Z"}], "thread_id": "Thread-6", "execution_time": 0.0876319408416748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_plan", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT -- to bring to claim_ID grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n,coalesce(claim_id, 'NULL') AS drill_down_value\n    ,m.claim_type as claim_type\n    ,'PLAN' AS field_name\n    ,case when m.plan is not null then 'valid' else 'null' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(plan as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_coco.data_quality.claim_plan"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.522545Z", "completed_at": "2024-10-11T23:52:35.582009Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.601164Z", "completed_at": "2024-10-11T23:52:35.601169Z"}], "thread_id": "Thread-7", "execution_time": 0.08793497085571289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_total_cost_amount", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'TOTAL_COST_AMOUNT' AS field_name\n    , case when m.total_cost_amount is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(total_cost_amount as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_coco.data_quality.claim_total_cost_amount"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.527557Z", "completed_at": "2024-10-11T23:52:35.591016Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.601994Z", "completed_at": "2024-10-11T23:52:35.602000Z"}], "thread_id": "Thread-3", "execution_time": 0.08849215507507324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claim_type_summary", "compiled": true, "compiled_code": "select\n    data_source\n    ,claim_type\n    ,count(distinct claim_id) as claim_count\n    ,sum(paid_amount) as paid_amount\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim\ngroup by\n    data_source\n    ,claim_type\n\n", "relation_name": "dev_coco.data_quality.claim_type_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.537898Z", "completed_at": "2024-10-11T23:52:35.597929Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.602511Z", "completed_at": "2024-10-11T23:52:35.602515Z"}], "thread_id": "Thread-9", "execution_time": 0.08783292770385742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__inpatient_dq_stage", "compiled": true, "compiled_code": "\n\nwith drg_requirement as (\n  select distinct\n      mc.claim_id\n  from tuva.input_layer.medical_claim as mc\n  left join dev_coco.terminology.ms_drg as msdrg\n    on mc.ms_drg_code = msdrg.ms_drg_code\n  left join dev_coco.terminology.apr_drg as aprdrg\n    on mc.apr_drg_code = aprdrg.apr_drg_code\n  where mc.claim_type = 'institutional'\n    and (\n      msdrg.ms_drg_code is not null\n      or aprdrg.apr_drg_code is not null\n    )\n)\n\n, bill_type_requirement as (\n  select distinct\n      claim_id\n  from tuva.input_layer.medical_claim\n  where claim_type = 'institutional'\n    and substring(bill_type_code, 1, 2) in (\n      '11'  -- hospital inpatient \n    , '12'  -- hospital inpatient \n    )\n)\n\nselect distinct\n    a.claim_id\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim as a\ninner join bill_type_requirement as d\n  on a.claim_id = d.claim_id\n\n\nunion distinct\n\n\nselect distinct\n    a.claim_id\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim as a\ninner join drg_requirement as c\n  on a.claim_id = c.claim_id", "relation_name": "dev_coco.data_quality.data_quality__inpatient_dq_stage"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.571105Z", "completed_at": "2024-10-11T23:52:35.601649Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.605983Z", "completed_at": "2024-10-11T23:52:35.605988Z"}], "thread_id": "Thread-10", "execution_time": 0.08968114852905273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_bill_type_code", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\n\nunique_field as (\n    select distinct claim_id\n        , base.bill_type_code || '|' || coalesce(term.bill_type_description, '') as field\n        , data_source\n    from base\n    left join dev_coco.terminology.bill_type as term on base.bill_type_code = term.bill_type_code\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'BILL_TYPE_CODE' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.bill_type_code is not null then 'valid'\n          when m.bill_type_code is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when m.bill_type_code is not null\n            and term.bill_type_code is null\n            and cg.frequency = 1\n            then 'Bill Type Code does not join to Terminology Bill_Type table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_coco.terminology.bill_type as term on m.bill_type_code = term.bill_type_code\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_bill_type_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.577025Z", "completed_at": "2024-10-11T23:52:35.602990Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.607172Z", "completed_at": "2024-10-11T23:52:35.607177Z"}], "thread_id": "Thread-4", "execution_time": 0.0905909538269043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_billing_npi", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\nunique_field as (\n    select distinct claim_id\n        ,cast(billing_npi as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'BILLING_NPI' AS field_name\n    ,case when cg.frequency > 1                then 'multiple'\n          when term.npi is not null            then 'valid'\n          when m.billing_npi is not null      then 'invalid'\n                                               else 'null' end as bucket_name\n    ,case\n        when cg.frequency = 1\n            and m.billing_npi is not null\n            and term.npi is null\n            then 'NPI is not in Terminology Provider table'\n        else null\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_coco.terminology.provider as term on m.billing_npi = term.npi\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_billing_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.582355Z", "completed_at": "2024-10-11T23:52:35.604471Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.607916Z", "completed_at": "2024-10-11T23:52:35.607920Z"}], "thread_id": "Thread-5", "execution_time": 0.09058403968811035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_claim_end_date", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n)\n, tuva_last_run as(\n    select cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) as tuva_last_run\n)\n,unique_field as (\n    select distinct claim_id\n        ,cast(claim_end_date as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'CLAIM_END_DATE' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_end_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.claim_end_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.claim_end_date < m.claim_start_date then 'invalid'\n        when m.claim_end_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_end_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.claim_end_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when m.claim_end_date < m.claim_start_date then 'claim end date before claim start date'\n        else null\n        end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_coco.data_quality.institutional_claim_end_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.591297Z", "completed_at": "2024-10-11T23:52:35.605439Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.609265Z", "completed_at": "2024-10-11T23:52:35.609270Z"}], "thread_id": "Thread-2", "execution_time": 0.0916757583618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_claim_start_date", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n)\n, tuva_last_run as(\n    select cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) as tuva_last_run\n)\n,unique_field as (\n    select distinct claim_id\n        ,cast(claim_start_date as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'CLAIM_START_DATE' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_start_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.claim_start_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.claim_start_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_start_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.claim_start_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        else null\n        end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_coco.data_quality.institutional_claim_start_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.621901Z", "completed_at": "2024-10-11T23:52:35.652343Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.663896Z", "completed_at": "2024-10-11T23:52:35.663906Z"}], "thread_id": "Thread-7", "execution_time": 0.05424785614013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_diagnosis_code_2", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\n\nunique_field as (\n    select distinct claim_id\n        , diagnosis_code_2 || '|' || coalesce(term.short_description, '') as field\n        , data_source\n    from base\n    left join dev_coco.terminology.icd_10_cm as term on base.diagnosis_code_2 = term.icd_10_cm\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'DIAGNOSIS_CODE_2' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.icd_10_cm is not null      then 'valid'\n          when m.diagnosis_code_2 is not null  then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.diagnosis_code_2 is not null\n            and term.icd_10_cm is null\n            then 'Diagnosis Code is not in Terminology ICD_10_CM table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_coco.terminology.icd_10_cm as term on m.diagnosis_code_2 = term.icd_10_cm\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_diagnosis_code_2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.615533Z", "completed_at": "2024-10-11T23:52:35.652609Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.664435Z", "completed_at": "2024-10-11T23:52:35.664439Z"}], "thread_id": "Thread-6", "execution_time": 0.056077003479003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_diagnosis_code_1", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\n\nunique_field as (\n    select distinct claim_id\n        , diagnosis_code_1 || '|' || coalesce(term.short_description, '') as field\n        , data_source\n    from base\n    left join dev_coco.terminology.icd_10_cm as term on base.diagnosis_code_1 = term.icd_10_cm\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'DIAGNOSIS_CODE_1' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.icd_10_cm is not null      then 'valid'\n          when m.diagnosis_code_1 is not null  then 'invalid'\n        else 'null'\n    end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.diagnosis_code_1 is not null\n            and term.icd_10_cm is null\n            then 'Diagnosis Code is not in Terminology ICD_10_CM table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_coco.terminology.icd_10_cm as term on m.diagnosis_code_1 = term.icd_10_cm\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_diagnosis_code_1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.628277Z", "completed_at": "2024-10-11T23:52:35.652902Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.665230Z", "completed_at": "2024-10-11T23:52:35.665234Z"}], "thread_id": "Thread-3", "execution_time": 0.054898738861083984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_diagnosis_code_3", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\n\nunique_field as (\n    select distinct claim_id\n        , diagnosis_code_3 || '|' || coalesce(term.short_description, '') as field\n        , data_source\n    from base\n    left join dev_coco.terminology.icd_10_cm as term on base.diagnosis_code_3 = term.icd_10_cm\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'DIAGNOSIS_CODE_3' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.icd_10_cm is not null      then 'valid'\n          when m.diagnosis_code_3 is not null  then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.diagnosis_code_3 is not null\n            and term.icd_10_cm is null\n            then 'Diagnosis Code is not in Terminology ICD_10_CM table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_coco.terminology.icd_10_cm as term on m.diagnosis_code_3 = term.icd_10_cm\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_diagnosis_code_3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.634019Z", "completed_at": "2024-10-11T23:52:35.663431Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.666052Z", "completed_at": "2024-10-11T23:52:35.666056Z"}], "thread_id": "Thread-9", "execution_time": 0.05542922019958496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_discharge_disposition_code", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\n\nunique_field as (\n    select distinct claim_id\n        , base.discharge_disposition_code || '|' || coalesce(term.discharge_disposition_description, '') as field\n        , data_source\n    from base\n    left join dev_coco.terminology.discharge_disposition as term on base.discharge_disposition_code = term.discharge_disposition_code\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'DISCHARGE_DISPOSITION_CODE' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.discharge_disposition_code is not null then 'valid'\n          when m.discharge_disposition_code is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.discharge_disposition_code is not null\n            and term.discharge_disposition_code is null\n            then 'Discharge Disposition Code does not join to Terminology Discharge_Disposition Table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_coco.terminology.discharge_disposition as term on m.discharge_disposition_code = term.discharge_disposition_code\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_discharge_disposition_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.641784Z", "completed_at": "2024-10-11T23:52:35.664946Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.667714Z", "completed_at": "2024-10-11T23:52:35.667719Z"}], "thread_id": "Thread-10", "execution_time": 0.05436372756958008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_facility_npi", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\nunique_field as (\n    select distinct claim_id\n        ,cast(facility_npi as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'FACILITY_NPI' AS field_name\n    ,case when cg.frequency > 1                then 'multiple'\n          when term.npi is not null then 'valid'\n          when m.facility_npi is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    ,case\n        when cg.frequency = 1\n            and m.facility_npi is not null\n            and term.npi is null\n            then 'NPI not in Terminology Provider Table'\n        else null\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_coco.terminology.provider as term on m.facility_npi = term.npi\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_facility_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.647256Z", "completed_at": "2024-10-11T23:52:35.665697Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.668487Z", "completed_at": "2024-10-11T23:52:35.668491Z"}], "thread_id": "Thread-4", "execution_time": 0.0538938045501709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_present_on_admission_1", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n\n),\nunique_field as (\n    select distinct claim_id\n        ,cast(diagnosis_poa_1 as TEXT)  as field\n        ,data_source\n    from base\n\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'DIAGNOSIS_POA_1' AS field_name\n       ,case when cg.frequency > 1                then 'multiple'\n        when m.diagnosis_poa_1 in ('y','n')       then 'valid'\n        when m.diagnosis_poa_1 is null            then 'null'\n                                                  else 'invalid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_present_on_admission_1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.653201Z", "completed_at": "2024-10-11T23:52:35.666549Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.669265Z", "completed_at": "2024-10-11T23:52:35.669269Z"}], "thread_id": "Thread-5", "execution_time": 0.05425119400024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_present_on_admission_2", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\nunique_field as (\n    select distinct claim_id\n        ,cast(diagnosis_poa_2 as TEXT)  as field\n        ,data_source\n    from base\n\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'DIAGNOSIS_POA_2' AS field_name\n       ,case when cg.frequency > 1                then 'multiple'\n        when m.diagnosis_poa_2 in ('y','n')       then 'valid'\n        when m.diagnosis_poa_2 is null            then 'null'\n                                                  else 'invalid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_present_on_admission_2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.658363Z", "completed_at": "2024-10-11T23:52:35.667101Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.670035Z", "completed_at": "2024-10-11T23:52:35.670039Z"}], "thread_id": "Thread-2", "execution_time": 0.048645734786987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_present_on_admission_3", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\nunique_field as (\n    select distinct claim_id\n        ,cast(diagnosis_poa_3 as TEXT)  as field\n        ,data_source\n    from base\n\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'DIAGNOSIS_POA_3' AS field_name\n       ,case when cg.frequency > 1                then 'multiple'\n        when m.diagnosis_poa_3 in ('y','n')       then 'valid'\n        when m.diagnosis_poa_3 is null            then 'null'\n                                                  else 'invalid' end as bucket_name\n    ,cast(null as TEXT) as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_present_on_admission_3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.674388Z", "completed_at": "2024-10-11T23:52:35.709004Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.733316Z", "completed_at": "2024-10-11T23:52:35.733326Z"}], "thread_id": "Thread-7", "execution_time": 0.06367993354797363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_rendering_npi", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n),\nunique_field as (\n    select distinct claim_id\n        ,cast(facility_npi as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'RENDERING_NPI' AS field_name\n    ,case when cg.frequency > 1                then 'multiple'\n          when term.npi is not null            then 'valid'\n          when m.rendering_npi is not null      then 'invalid'\n                                               else 'null' end as bucket_name\n    ,case\n        when cg.frequency = 1\n            and m.rendering_npi is not null\n            and term.npi is null\n        then 'provider npi does not join to terminology provider table'\n        else null\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_coco.terminology.provider as term on m.rendering_npi = term.npi\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_rendering_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.680953Z", "completed_at": "2024-10-11T23:52:35.723274Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.735038Z", "completed_at": "2024-10-11T23:52:35.735043Z"}], "thread_id": "Thread-6", "execution_time": 0.06463789939880371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_revenue_center_code", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'institutional' AS claim_type\n    , 'REVENUE_CENTER_CODE' AS field_name\n    , case\n          when term.revenue_center_code is not null then 'valid'\n          when m.revenue_center_code is not null    then 'invalid'\n                                                    else 'null' end as bucket_name\n    , case\n        when m.revenue_center_code is not null\n            and term.revenue_center_code is null\n            then 'Revenue center code does not join to Terminology Revenue Center table'\n        else null\n    end as invalid_reason\n    , m.revenue_center_code || '|' || coalesce(term.revenue_center_description, '') as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n    from tuva.input_layer.medical_claim m\nleft join dev_coco.terminology.revenue_center as term on m.revenue_center_code = term.revenue_center_code", "relation_name": "dev_coco.data_quality.institutional_revenue_center_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.686254Z", "completed_at": "2024-10-11T23:52:35.723631Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.735578Z", "completed_at": "2024-10-11T23:52:35.735583Z"}], "thread_id": "Thread-3", "execution_time": 0.06463193893432617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_service_unit_quantity", "compiled": true, "compiled_code": "\n\nSELECT\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , m.claim_type as claim_type\n    , 'service_unit_quantity' as field_name\n    , case when m.service_unit_quantity is null then 'null'\n                                    else 'valid' end as bucket_name\n    , cast(null as TEXT) as invalid_reason\n    , cast(service_unit_quantity as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom tuva.input_layer.medical_claim m", "relation_name": "dev_coco.data_quality.institutional_service_unit_quantity"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.691487Z", "completed_at": "2024-10-11T23:52:35.734451Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.738477Z", "completed_at": "2024-10-11T23:52:35.738483Z"}], "thread_id": "Thread-9", "execution_time": 0.06690812110900879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medical_claim_claim_line_fields", "compiled": true, "compiled_code": "\n\nwith medical_claim as (\n  select\n      m.claim_id\n    , max(case when hcpc.hcpcs is null and m.hcpcs_code is not null then 1 else 0 end) as invalid_hcpcs_code\n    , max(case when m.claim_type = 'professional' and pos.place_of_service_code is null and m.place_of_service_code is not null then 1 else 0 end) as invalid_place_of_service_code\n    , max(case when m.claim_type = 'institutional' and rev.revenue_center_code is null and m.revenue_center_code is not null then 1 else 0 end) as invalid_revenue_center_code\n    , max(case when m.hcpcs_code is null then 1 else 0 end) as missing_hcpcs_code\n    , max(case when m.claim_type = 'professional' and m.place_of_service_code is null then 1 else 0 end) as missing_place_of_service_code\n    , max(case when m.claim_type = 'institutional' and m.revenue_center_code is null then 1 else 0 end) as missing_revenue_center_code\n  from tuva.input_layer.medical_claim as m\n  left join dev_coco.terminology.hcpcs_level_2 as hcpc\n    on m.hcpcs_code = hcpc.hcpcs\n  left join dev_coco.terminology.place_of_service as pos\n    on m.place_of_service_code = pos.place_of_service_code\n  left join dev_coco.terminology.revenue_center as rev\n    on m.revenue_center_code = rev.revenue_center_code\n  group by m.claim_id\n)\n\n, final as (\n  select\n      'invalid hcpcs_code' as data_quality_check\n    , sum(invalid_hcpcs_code) as result_count\n  from medical_claim\n  \n  union all\n\n  select\n      'invalid place_of_service_code' as data_quality_check\n    , sum(invalid_place_of_service_code) as result_count\n  from medical_claim\n\n  union all\n\n  select\n      'invalid revenue_center_code' as data_quality_check\n    , sum(invalid_revenue_center_code) as result_count\n  from medical_claim\n\n  union all\n\n  select\n      'missing hcpcs_code' as data_quality_check\n    , sum(missing_hcpcs_code) as result_count\n  from medical_claim\n\n  union all\n\n  select\n      'missing place_of_service_code' as data_quality_check\n    , sum(missing_place_of_service_code) as result_count\n  from medical_claim\n\n  union all\n\n  select\n      'missing revenue_center_code' as data_quality_check\n    , sum(missing_revenue_center_code) as result_count\n  from medical_claim\n)\n\nselect\n    *\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom final", "relation_name": "dev_coco.data_quality.medical_claim_claim_line_fields"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.696453Z", "completed_at": "2024-10-11T23:52:35.736079Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.740151Z", "completed_at": "2024-10-11T23:52:35.740156Z"}], "thread_id": "Thread-10", "execution_time": 0.06717491149902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medical_claim_date_trends", "compiled": true, "compiled_code": "\n\nwith date_stage as(\n\n    select\n        date_field\n        , year || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || month,\n            2\n        )\n    end as year_month\n        , result_count\n    from\n    (\n        select\n            'claim_start_date' as date_field\n            , cast(date_part('year', claim_start_date) as TEXT) as year\n            , cast(date_part('month', claim_start_date) as TEXT) as month\n            , count(distinct claim_id) as result_count\n        from tuva.input_layer.medical_claim\n        group by\n            cast(date_part('year', claim_start_date) as TEXT)\n            , cast(date_part('month', claim_start_date) as TEXT)\n    )x\n\n    union all\n\n    select\n        date_field\n        , year || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || month,\n            2\n        )\n    end as year_month\n        , result_count\n    from\n    (\n        select\n            'claim_end_date' as date_field\n            , cast(date_part('year', claim_end_date) as TEXT) as year\n            , cast(date_part('month', claim_end_date) as TEXT) as month\n            , count(distinct claim_id) as result_count\n        from tuva.input_layer.medical_claim\n        group by\n            cast(date_part('year', claim_end_date) as TEXT)\n            , cast(date_part('month', claim_end_date) as TEXT)\n    )x\n\n    union all\n\n    select\n        date_field\n        , year || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || month,\n            2\n        )\n    end as year_month\n        , result_count\n    from\n    (\n        select\n            'admission_date' as date_field\n            , cast(date_part('year', admission_date) as TEXT) as year\n            , cast(date_part('month', admission_date) as TEXT) as month\n            , count(distinct claim_id) as result_count\n        from tuva.input_layer.medical_claim\n        group by\n            cast(date_part('year', admission_date) as TEXT)\n            , cast(date_part('month', admission_date) as TEXT)\n    )x\n\n    union all\n\n    select\n        date_field\n        , year || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || month,\n            2\n        )\n    end as year_month\n        , result_count\n    from\n    (\n        select\n            'discharge_date' as date_field\n            , cast(date_part('year', discharge_date) as TEXT) as year\n            , cast(date_part('month', discharge_date) as TEXT) as month\n            , count(distinct claim_id) as result_count\n        from tuva.input_layer.medical_claim\n        group by\n            cast(date_part('year', discharge_date) as TEXT)\n            , cast(date_part('month', discharge_date) as TEXT)\n    )x\n\n    union all\n\n    select\n        date_field\n        , year || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || month,\n            2\n        )\n    end as year_month\n        , result_count\n    from\n    (\n        select\n            'medical paid_date' as date_field\n            , cast(date_part('year', paid_date) as TEXT) as year\n            , cast(date_part('month', paid_date) as TEXT) as month\n            , count(distinct claim_id) as result_count\n        from tuva.input_layer.medical_claim\n        group by\n            cast(date_part('year', paid_date) as TEXT)\n            , cast(date_part('month', paid_date) as TEXT)\n    )x\n\n    union all\n\n    select\n        date_field\n        , year || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || month,\n            2\n        )\n    end as year_month\n        , result_count\n    from\n    (\n        select\n            'dispensing_date' as date_field\n            , cast(date_part('year', dispensing_date) as TEXT) as year\n            , cast(date_part('month', dispensing_date) as TEXT) as month\n            , count(distinct claim_id) as result_count\n        from tuva.input_layer.pharmacy_claim\n        group by\n            cast(date_part('year', dispensing_date) as TEXT)\n            , cast(date_part('month', dispensing_date) as TEXT)\n    )x\n\n    union all\n\n    select\n        date_field\n        , year || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || month,\n            2\n        )\n    end as year_month\n        , result_count\n    from\n    (\n        select\n            'pharmacy paid_date' as date_field\n            , cast(date_part('year', paid_date) as TEXT) as year\n            , cast(date_part('month', paid_date) as TEXT) as month\n            , count(distinct claim_id) as result_count\n        from tuva.input_layer.pharmacy_claim\n        group by\n            cast(date_part('year', paid_date) as TEXT)\n            , cast(date_part('month', paid_date) as TEXT)\n    )x\n\n)\n\n\n, all_date_range as (\n    select distinct\n        replace(cal.year_month,'-','') as year_month\n    from dev_coco.reference_data.calendar cal\n    where (cal.year_month >= (select min(year_month) from date_stage)\n    and cal.year_month <= (select max(year_month) from date_stage))\n\n)\n\nselect\n    cast(all_date.year_month as integer ) as year_month\n    , claim_start.result_count as claim_start_date\n    , claim_end.result_count as claim_end_date\n    , admission_date.result_count as admission_date\n    , discharge_date.result_count as discharge_date\n    , med_paid_date.result_count as medical_paid_date\n    , dispensing_date.result_count as dispensing_date\n    , pharm_paid_date.result_count as pharmacy_paid_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom all_date_range all_date\nleft join date_stage claim_start\n    on all_date.year_month = claim_start.year_month\n    and claim_start.date_field = 'claim_start_date'\nleft join date_stage claim_end\n    on all_date.year_month = claim_end.year_month\n    and claim_end.date_field = 'claim_end_date'\nleft join date_stage admission_date\n    on all_date.year_month = admission_date.year_month\n    and admission_date.date_field = 'admission_date'\nleft join date_stage discharge_date\n    on all_date.year_month = discharge_date.year_month\n    and discharge_date.date_field = 'discharge_date'\nleft join date_stage med_paid_date\n    on all_date.year_month = med_paid_date.year_month\n    and med_paid_date.date_field = 'medical paid_date'\nleft join date_stage dispensing_date\n    on all_date.year_month = dispensing_date.year_month\n    and dispensing_date.date_field = 'dispensing_date'\nleft join date_stage pharm_paid_date\n    on all_date.year_month = pharm_paid_date.year_month\n    and pharm_paid_date.date_field = 'pharmacy paid_date'", "relation_name": "dev_coco.data_quality.medical_claim_date_trends"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.718722Z", "completed_at": "2024-10-11T23:52:35.736344Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.740633Z", "completed_at": "2024-10-11T23:52:35.740637Z"}], "thread_id": "Thread-4", "execution_time": 0.06712889671325684, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medical_claim_provider_npi", "compiled": true, "compiled_code": "\n\nwith medical_claim as (\n    select\n        m.claim_id\n      , max(case when term.npi is null and m.rendering_npi is not null then 1 else 0 end) as invalid_rendering_npi\n      , max(case when term2.npi is null and m.billing_npi is not null then 1 else 0 end) as invalid_billing_npi\n      , max(case when term3.npi is null and m.facility_npi is not null then 1 else 0 end) as invalid_facility_npi\n\n      , max(case when m.rendering_npi is null then 1 else 0 end) as missing_rendering_npi\n      , max(case when m.billing_npi is null then 1 else 0 end) as missing_billing_npi\n      , max(case when m.facility_npi is null then 1 else 0 end) as missing_facility_npi\n\n      , count(distinct m.rendering_npi) as rendering_npi_count\n      , count(distinct m.billing_npi) as billing_npi_count\n      , count(distinct m.facility_npi) as facility_npi_count\n\n      , max(case when term.entity_type_code = '2' then 1 else 0 end) as wrong_entity_type_rendering_npi\n      , max(case when term3.entity_type_code = '1' then 1 else 0 end) as wrong_entity_type_facility_npi\n\n    from tuva.input_layer.medical_claim as m\n    left join dev_coco.terminology.provider as term\n      on m.rendering_npi = term.npi\n    left join dev_coco.terminology.provider as term2\n      on m.billing_npi  = term2.npi\n    left join dev_coco.terminology.provider as term3\n      on m.facility_npi = term3.npi\n    group by\n        m.claim_id\n)\n\n,final as (\nselect\n    'invalid rendering_npi' as data_quality_check\n  , sum(invalid_rendering_npi) as result_count\nfrom medical_claim\n\nunion all\n\nselect\n    'invalid billing_npi' as data_quality_check\n  , sum(invalid_billing_npi) as result_count\nfrom medical_claim\n\nunion all\n\nselect\n    'invalid facility_npi' as data_quality_check\n  , sum(invalid_facility_npi) as result_count\nfrom medical_claim\n\nunion all\n\nselect\n    'missing rendering_npi' as data_quality_check\n  , sum(missing_rendering_npi) as result_count\nfrom medical_claim\n\nunion all\n\nselect\n    'missing billing_npi' as data_quality_check\n  , sum(missing_billing_npi) as result_count\nfrom medical_claim\n\nunion all\n\nselect\n    'missing facility_npi' as data_quality_check\n  , sum(missing_facility_npi) as result_count\nfrom medical_claim\n\nunion all\n\nselect\n    'wrong entity type rendering_npi' as data_quality_check\n  , sum(wrong_entity_type_rendering_npi) as result_count\nfrom medical_claim\n\nunion all\n\nselect\n    'wrong entity type facility_npi' as data_quality_check\n  , sum(wrong_entity_type_facility_npi) as result_count\nfrom medical_claim\n\nunion all\n\nselect\n    'multiple rendering_npi values' as data_quality_check\n  , count(distinct claim_id) as result_count\nfrom medical_claim\nwhere rendering_npi_count > 1\n\nunion all\n\nselect\n    'multiple billing_npi values' as data_quality_check\n  , count(distinct claim_id) as result_count\nfrom medical_claim\nwhere billing_npi_count > 1\n\nunion all\n\nselect\n    'multiple facility_npi values' as data_quality_check\n  , count(distinct claim_id) as result_count\nfrom medical_claim\nwhere facility_npi_count > 1\n)\n\nselect *\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom final", "relation_name": "dev_coco.data_quality.medical_claim_provider_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.728542Z", "completed_at": "2024-10-11T23:52:35.738949Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.742152Z", "completed_at": "2024-10-11T23:52:35.742156Z"}], "thread_id": "Thread-2", "execution_time": 0.06157684326171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__primary_keys", "compiled": true, "compiled_code": "\n\nwith pharmacy as (\n  select\n      claim_id\n    , claim_line_number\n    , data_source\n    , count(*) as result_count\n  from tuva.input_layer.pharmacy_claim p\n  group by\n      claim_id\n    , claim_line_number\n    , data_source\n  having count(*) > 1\n)\n\n, medical as (\n  select\n      claim_id\n    , claim_line_number\n    , data_source\n    , count(*) as result_count\n  from tuva.input_layer.medical_claim p\n  group by\n      claim_id\n    , claim_line_number\n    , data_source\n  having count(*) > 1\n)\n\n, eligibility as (\n  select\n      patient_id\n    , enrollment_start_date\n    , enrollment_end_date\n    , plan\n    , data_source\n    , count(*) as result_count\n  from tuva.input_layer.eligibility p\n  group by\n      patient_id\n    , enrollment_start_date\n    , enrollment_end_date\n    , plan\n    , data_source\n  having count(*) > 1\n)\n\n, final as (\n  select\n      'pk errors pharmacy claim' as data_quality_check\n    , coalesce(sum(result_count), 0) as result_count\n  from pharmacy\n\n  union all\n\n  select\n      'pk errors medical claim' as data_quality_check\n    , coalesce(sum(result_count), 0) as result_count\n  from medical\n\n  union all\n\n  select\n      'pk errors eligibility' as data_quality_check\n    , coalesce(sum(result_count), 0) as result_count\n  from eligibility\n)\n\nselect\n    *\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom final", "relation_name": "dev_coco.data_quality.primary_keys"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.723922Z", "completed_at": "2024-10-11T23:52:35.739187Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.742601Z", "completed_at": "2024-10-11T23:52:35.742605Z"}], "thread_id": "Thread-5", "execution_time": 0.0685579776763916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medical_claim_volume_and_dollars", "compiled": true, "compiled_code": "\n\nwith range_cte as (\n  select\n      min(claim_start_date) as first_date\n    \n      , current_date as last_date\n    \n  from tuva.input_layer.medical_claim p\n)\n\n, date_cte as (\n  select distinct\n      year_month_int\n  from dev_coco.reference_data.calendar c\n  inner join range_cte r\n    on c.full_date between r.first_date and r.last_date\n)\n\n, medical_claim as (\n  select\n      c.year_month_int\n    , count(distinct p.claim_id) as claim_volume\n    , sum(p.paid_amount) as paid_amount\n  from tuva.input_layer.medical_claim p\n  left join dev_coco.reference_data.calendar c\n    on p.claim_start_date = c.full_date\n  group by\n      c.year_month_int\n)\n\nselect\n    d.year_month_int as year_month\n  , coalesce(claim_volume, 0) as claim_volume\n  , coalesce(paid_amount, 0) as paid_amount\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom date_cte d\nleft join medical_claim m\n  on d.year_month_int = m.year_month_int", "relation_name": "dev_coco.data_quality.medical_claim_volume_and_dollars"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.747055Z", "completed_at": "2024-10-11T23:52:35.776752Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.801102Z", "completed_at": "2024-10-11T23:52:35.801111Z"}], "thread_id": "Thread-7", "execution_time": 0.06006884574890137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_billing_npi", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n\nselect\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'professional' AS claim_type\n    , 'BILLING_NPI' AS field_name\n    , case when term.npi is not null          then        'valid'\n          when m.billing_npi is not null    then 'invalid'\n                                             else 'null' end as bucket_name\n    , case\n        when m.billing_npi is not null\n            and term.npi is null\n            then 'Billing NPI does not join to Terminology Provider Table'\n        else null\n    end as invalid_reason\n    , cast(m.billing_npi as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join dev_coco.terminology.provider as term on m.billing_npi = term.npi", "relation_name": "dev_coco.data_quality.professional_billing_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.761027Z", "completed_at": "2024-10-11T23:52:35.794020Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.802275Z", "completed_at": "2024-10-11T23:52:35.802281Z"}], "thread_id": "Thread-3", "execution_time": 0.059036970138549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_claim_start_date", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n, tuva_last_run as(\n    select cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) as tuva_last_run\n)\n, unique_field as (\n    select distinct claim_id\n        ,cast(claim_start_date as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id,'NULL') AS drill_down_value\n    ,'professional' AS claim_type\n    ,'CLAIM_START_DATE' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_start_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.claim_start_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.claim_start_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_start_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.claim_start_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        else null\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_coco.data_quality.professional_claim_start_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.754728Z", "completed_at": "2024-10-11T23:52:35.794307Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.804841Z", "completed_at": "2024-10-11T23:52:35.804845Z"}], "thread_id": "Thread-6", "execution_time": 0.06187582015991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_claim_end_date", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'institutional'\n)\n, tuva_last_run as(\n    select cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) as tuva_last_run\n)\n ,unique_field as (\n    select distinct claim_id\n        ,cast(claim_end_date as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id,'NULL') AS drill_down_value\n    ,'professional' AS claim_type\n    ,'CLAIM_END_DATE' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_end_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.claim_end_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.claim_end_date < m.claim_start_date then 'invalid'\n        when m.claim_end_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.claim_end_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.claim_end_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when m.claim_end_date < m.claim_start_date then 'claim end date before start date'\n        when m.claim_end_date is null then null\n        else 'valid'\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_coco.data_quality.professional_claim_end_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.771023Z", "completed_at": "2024-10-11T23:52:35.801662Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.806755Z", "completed_at": "2024-10-11T23:52:35.806760Z"}], "thread_id": "Thread-9", "execution_time": 0.062157630920410156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_diagnosis_code_1", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n\nselect\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'professional' AS claim_type\n    , 'DIAGNOSIS_CODE_1' AS field_name\n    , case when term.icd_10_cm is not null          then 'valid'\n          when m.diagnosis_code_1 is not null      then 'invalid'\n                                                   else 'null' end as bucket_name\n    , case\n        when m.diagnosis_code_1 is not null\n            and term.icd_10_cm is null\n            then 'Diagnosis Code does not join to Terminology ICD_10_CM table'\n        else null\n    end as invalid_reason\n    , m.diagnosis_code_1 || '|' || coalesce(term.short_description, '') as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join dev_coco.terminology.icd_10_cm as term on m.diagnosis_code_1 = term.icd_10_cm", "relation_name": "dev_coco.data_quality.professional_diagnosis_code_1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.788791Z", "completed_at": "2024-10-11T23:52:35.805504Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.808212Z", "completed_at": "2024-10-11T23:52:35.808217Z"}], "thread_id": "Thread-2", "execution_time": 0.054499149322509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_facility_npi", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n\nselect\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'professional' AS claim_type\n    , 'FACILITY_NPI' AS field_name\n    , case when term.npi is not null          then        'valid'\n          when m.facility_npi is not null    then 'invalid'\n                                             else 'null' end as bucket_name\n    , case\n        when m.facility_npi is not null\n            and term.npi is null\n            then 'Facility NPI does not join to Terminology Provider Table'\n        else null\n    end as invalid_reason\n    , cast(m.facility_npi as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join dev_coco.terminology.provider as term on m.facility_npi = term.npi", "relation_name": "dev_coco.data_quality.professional_facility_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.777002Z", "completed_at": "2024-10-11T23:52:35.805762Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.808720Z", "completed_at": "2024-10-11T23:52:35.808724Z"}], "thread_id": "Thread-10", "execution_time": 0.06229209899902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_diagnosis_code_2", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n\nselect\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'professional' AS claim_type\n    , 'DIAGNOSIS_CODE_2' AS field_name\n    , case when term.icd_10_cm is not null          then 'valid'\n          when m.diagnosis_code_2 is not null      then 'invalid'\n                                                   else 'null' end as bucket_name\n    , case\n        when m.diagnosis_code_2 is not null\n            and term.icd_10_cm is null\n            then 'Diagnosis Code does not join to Terminology ICD_10_CM table'\n        else null\n    end as invalid_reason\n    , m.diagnosis_code_2 || '|' || coalesce(term.short_description, '') as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join dev_coco.terminology.icd_10_cm as term on m.diagnosis_code_2 = term.icd_10_cm", "relation_name": "dev_coco.data_quality.professional_diagnosis_code_2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.782424Z", "completed_at": "2024-10-11T23:52:35.806044Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.809227Z", "completed_at": "2024-10-11T23:52:35.809231Z"}], "thread_id": "Thread-4", "execution_time": 0.06252408027648926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_diagnosis_code_3", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n\nselect\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'professional' AS claim_type\n    , 'DIAGNOSIS_CODE_3' AS field_name\n    , case when term.icd_10_cm is not null          then 'valid'\n          when m.diagnosis_code_3 is not null      then 'invalid'\n                                                   else 'null' end as bucket_name\n    , case\n        when m.diagnosis_code_3 is not null\n            and term.icd_10_cm is null\n            then 'Diagnosis Code does not join to Terminology ICD_10_CM table'\n        else null\n    end as invalid_reason\n    , m.diagnosis_code_3 || '|' || coalesce(term.short_description, '') as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join dev_coco.terminology.icd_10_cm as term on m.diagnosis_code_3 = term.icd_10_cm", "relation_name": "dev_coco.data_quality.professional_diagnosis_code_3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.794565Z", "completed_at": "2024-10-11T23:52:35.807942Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.810909Z", "completed_at": "2024-10-11T23:52:35.810913Z"}], "thread_id": "Thread-5", "execution_time": 0.05661320686340332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_place_of_service_code", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n\nselect\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'professional' AS claim_type\n    , 'PLACE_OF_SERVICE_CODE' AS field_name\n    , case when term.place_of_service_code is not null then 'valid'\n          when m.place_of_service_code is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when m.place_of_service_code is not null\n            and term.place_of_service_code is null\n            then 'Place of Service Code does not join to Terminology Place of Service table'\n        else null\n    end as invalid_reason\n    , m.place_of_service_code || '|' || coalesce(term.place_of_service_description, '') as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join dev_coco.terminology.place_of_service as term on m.place_of_service_code = term.place_of_service_code", "relation_name": "dev_coco.data_quality.professional_place_of_service_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.814395Z", "completed_at": "2024-10-11T23:52:35.832670Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.848841Z", "completed_at": "2024-10-11T23:52:35.848849Z"}], "thread_id": "Thread-7", "execution_time": 0.03921675682067871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__professional_rendering_npi", "compiled": true, "compiled_code": "\n\nwith base as (\n    select *\n    from tuva.input_layer.medical_claim\n    where claim_type = 'professional'\n)\n\nselect\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID | Claim Line Number' AS drill_down_key\n    , coalesce(cast(m.claim_id as TEXT), 'null') || '|' || coalesce(cast(m.claim_line_number as TEXT), 'null') as drill_down_value\n    , 'professional' AS claim_type\n    , 'RENDERING_NPI' AS field_name\n    , case when term.npi is not null          then        'valid'\n          when m.rendering_npi is not null    then 'invalid'\n                                             else 'null' end as bucket_name\n    , case\n        when m.rendering_npi is not null\n            and term.npi is null\n            then 'Rendering Provider NPI does not join to Terminology Provider table'\n        else null\n    end as invalid_reason\n    , cast(m.rendering_npi as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join dev_coco.terminology.provider as term on m.rendering_npi = term.npi", "relation_name": "dev_coco.data_quality.professional_rendering_npi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.819999Z", "completed_at": "2024-10-11T23:52:35.836178Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.888731Z", "completed_at": "2024-10-11T23:52:35.888740Z"}], "thread_id": "Thread-3", "execution_time": 0.07849812507629395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__raw_summary", "compiled": true, "compiled_code": "\n\nwith cte as (\n    select \n        'input_layer' as source\n      , 'eligibility' as table_name\n      , count(*) as row_count\n      , count(distinct patient_id) as unique_check\n      , 'Unique Patient Count' as unique_check_desc\n      , 2 as table_order\n    from tuva.input_layer.eligibility\n\n    union all\n\n    select \n        'raw_data' as source\n      , 'eligibility' as table_name\n      , null as row_count\n      , null as unique_check\n      , 'Unique Patient Count' as unique_check_desc\n      , 1 as table_order\n    from tuva.input_layer.eligibility\n\n    union all\n\n    select \n        'input_layer' as source\n      , 'medical_claim' as table_name\n      , count(*) as row_count\n      , count(distinct claim_id) as unique_check\n      , 'Unique Claim Count' as unique_check_desc\n      , 4 as table_order\n    from tuva.input_layer.medical_claim\n\n    union all\n\n    select \n        'raw_data' as source\n      , 'medical_claim' as table_name\n      , null as row_count\n      , null as unique_check\n      , 'Unique Claim Count' as unique_check_desc\n      , 3 as table_order\n    from tuva.input_layer.medical_claim\n\n    union all\n\n    select \n        'input_layer' as source\n      , 'pharmacy_claim' as table_name\n      , count(*) as row_count\n      , count(distinct claim_id) as unique_check\n      , 'Unique Claim Count' as unique_check_desc\n      , 6 as table_order\n    from tuva.input_layer.pharmacy_claim\n\n    union all\n\n    select \n        'raw_data' as source\n      , 'pharmacy_claim' as table_name\n      , null as row_count\n      , null as unique_check\n      , 'Unique Claim Count' as unique_check_desc\n      , 5 as table_order\n    from tuva.input_layer.pharmacy_claim\n)\n\nselect\n    cte.*\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom cte", "relation_name": "dev_coco.data_quality.raw_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.833299Z", "completed_at": "2024-10-11T23:52:35.887247Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.893245Z", "completed_at": "2024-10-11T23:52:35.893250Z"}], "thread_id": "Thread-2", "execution_time": 0.07973718643188477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.medical_claim_expanded", "compiled": true, "compiled_code": "\n\n\nselect *\nfrom tuva.input_layer.medical_claim", "relation_name": "dev_coco.claims_expanded.medical_claim_expanded"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.849358Z", "completed_at": "2024-10-11T23:52:35.895586Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.898620Z", "completed_at": "2024-10-11T23:52:35.898626Z"}], "thread_id": "Thread-5", "execution_time": 0.07111692428588867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__data_quality_clinical_detail", "compiled": true, "compiled_code": "\n\nWITH CTE as (\nSELECT * FROM dev_coco.data_quality.condition_claim_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_condition_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_condition_rank\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_condition_type\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_data_source\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_encounter_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_normalized_code_type\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_normalized_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_normalized_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_onset_date\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_patient_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_present_on_admit_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_present_on_admit_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_recorded_date\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_resolved_date\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_source_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_source_code_type\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_source_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.condition_status\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_admit_source_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_admit_source_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_admit_type_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_admit_type_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_allowed_amount\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_apr_drg_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_apr_drg_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_attending_provider_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_charge_amount\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_data_source\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_discharge_disposition_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_discharge_disposition_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_encounter_end_date\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_encounter_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_encounter_start_date\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_encounter_type\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_facility_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_length_of_stay\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_ms_drg_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_ms_drg_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_paid_amount\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_patient_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_primary_diagnosis_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_primary_diagnosis_code_type\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.encounter_primary_diagnosis_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.practitioner_practice_affiliation\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.practitioner_sub_specialty\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.practitioner_last_name\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.practitioner_practitioner_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.practitioner_data_source\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.practitioner_npi\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.practitioner_first_name\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.practitioner_specialty\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.location_parent_organization\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.location_latitude\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.location_facility_type\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.location_zip_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.location_data_source\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.location_city\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.location_npi\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.location_location_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.location_longitude\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.location_address\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.location_state\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.location_name\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_normalized_code_type\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_normalized_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_procedure_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_claim_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_source_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_source_code_type\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_source_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_practitioner_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_data_source\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_patient_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_procedure_date\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_encounter_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_modifier_5\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_modifier_4\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_normalized_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_modifier_1\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_modifier_3\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.procedure_modifier_2\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_source_abnormal_flag\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_specimen\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_source_reference_range_low\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_source_units\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_lab_result_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_collection_date\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_normalized_component\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_ordering_practitioner_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_result\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_source_code_type\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_normalized_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_normalized_reference_range_low\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_normalized_reference_range_high\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_normalized_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_source_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_status\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_accession_number\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_result_date\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_normalized_abnormal_flag\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_data_source\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_normalized_units\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_normalized_code_type\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_source_reference_range_high\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_source_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_patient_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_source_component\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.lab_result_encounter_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_sex\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_state\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_city\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_longitude\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_county\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_race\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_death_flag\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_address\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_data_source\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_zip_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_first_name\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_last_name\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_latitude\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_birth_date\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_death_date\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.patient_patient_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_rxnorm_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_source_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_atc_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_dispensing_date\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_prescribing_date\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_days_supply\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_strength\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_patient_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_rxnorm_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_encounter_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_data_source\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_atc_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_quantity_unit\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_source_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_ndc_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_medication_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_source_code_type\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_ndc_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_quantity\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_practitioner_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.medication_route\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_source_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_normalized_reference_range_high\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_source_units\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_observation_type\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_normalized_code\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_normalized_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_data_source\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_panel_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_observation_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_source_reference_range_low\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_result\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_source_code_type\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_normalized_reference_range_low\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_observation_date\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_encounter_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_source_description\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_source_reference_range_high\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_normalized_units\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_normalized_code_type\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.observation_patient_id\n\n)\n\nSELECT\n    data_source,\n    cast(source_date as TEXT) as source_date,\n    table_name,\n    drill_down_key,\n    drill_down_value,\n    field_name,\n    bucket_name,\n    invalid_reason,\n    field_value,\n    tuva_last_run,\n    dense_rank() over (order by data_source, table_name, field_name) + 100000 as summary_sk\nFROM CTE", "relation_name": "dev_coco.data_quality.data_quality_clinical_detail"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.921381Z", "completed_at": "2024-10-11T23:52:35.955604Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.958025Z", "completed_at": "2024-10-11T23:52:35.958031Z"}], "thread_id": "Thread-9", "execution_time": 0.06128096580505371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__lab_result_lab_result_id.0ee4fe47af", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    lab_result_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.core.lab_result\nwhere lab_result_id is not null\ngroup by lab_result_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.944064Z", "completed_at": "2024-10-11T23:52:35.958545Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:35.970929Z", "completed_at": "2024-10-11T23:52:35.970937Z"}], "thread_id": "Thread-4", "execution_time": 0.07183098793029785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__observation_observation_id.ff5f21de59", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    observation_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.core.observation\nwhere observation_id is not null\ngroup by observation_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.974260Z", "completed_at": "2024-10-11T23:52:35.991019Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.037988Z", "completed_at": "2024-10-11T23:52:36.037998Z"}], "thread_id": "Thread-6", "execution_time": 0.0792698860168457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__medication_medication_id.124fd11fa1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    medication_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.core.medication\nwhere medication_id is not null\ngroup by medication_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.979192Z", "completed_at": "2024-10-11T23:52:36.009749Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.043834Z", "completed_at": "2024-10-11T23:52:36.043841Z"}], "thread_id": "Thread-7", "execution_time": 0.07372808456420898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__unique_value_examples", "compiled": true, "compiled_code": "\n\nSELECT * FROM dev_coco.data_quality.primary_keys_condition_condition_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.primary_keys_encounter_encounter_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.primary_keys_lab_result_lab_result_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.primary_keys_location_location_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.primary_keys_medication_medication_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.primary_keys_observation_observation_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.primary_keys_patient_patient_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.primary_keys_practitioner_practitioner_id\n\nunion all\n\nSELECT * FROM dev_coco.data_quality.primary_keys_procedure_procedure_id", "relation_name": "dev_coco.data_quality.unique_value_examples"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.986271Z", "completed_at": "2024-10-11T23:52:36.038554Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.045036Z", "completed_at": "2024-10-11T23:52:36.045041Z"}], "thread_id": "Thread-3", "execution_time": 0.07296419143676758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medical_claim_patient_id", "compiled": true, "compiled_code": "\n\nwith medical as (\n  select\n      claim_id\n    , count(distinct p.patient_id) as patient_id_count\n    , max(case when p.patient_id is null then 1 else 0 end) as missing_patient_id\n    , max(\n        case \n          when startdts.month_start_date is null then 1\n          when enddts.month_start_date is null then 1\n          else 0\n        end\n      ) as missing_eligibility\n  from tuva.input_layer.medical_claim p\n  left join dev_coco.data_quality.data_quality__eligibility_dq_stage startdts\n    on p.patient_id = startdts.patient_id\n    and p.claim_start_date between startdts.month_start_date and startdts.month_end_date\n  left join dev_coco.data_quality.data_quality__eligibility_dq_stage enddts\n    on p.patient_id = enddts.patient_id\n    and p.claim_end_date between enddts.month_start_date and enddts.month_end_date\n  group by\n      claim_id\n)\n\n, final as (\n  select\n      'multiple patient_ids' as data_quality_check\n    , sum(case when patient_id_count > 1 then 1 else 0 end) as result_count\n  from medical\n\n  union all\n\n  select\n      'missing patient_id' as data_quality_check\n    , sum(missing_patient_id) as result_count\n  from medical\n\n  union all\n\n  select\n      'orphaned claims' as data_quality_check\n    , sum(missing_eligibility) as result_count\n  from medical\n)\n\nselect\n    *\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom final", "relation_name": "dev_coco.data_quality.medical_claim_patient_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.991291Z", "completed_at": "2024-10-11T23:52:36.043544Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.051186Z", "completed_at": "2024-10-11T23:52:36.051192Z"}], "thread_id": "Thread-10", "execution_time": 0.0787661075592041, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__pharmacy_patient", "compiled": true, "compiled_code": "\n\nwith pharmacy as (\n  select\n      claim_id\n    , count(distinct p.patient_id) as patient_id_count\n    , max(case when p.patient_id is null then 1 else 0 end) as missing_patient_id\n    , max(case when e.month_start_date is null then 1 else 0 end) as missing_eligibility\n  from tuva.input_layer.pharmacy_claim p\n  left join dev_coco.data_quality.data_quality__eligibility_dq_stage e\n    on p.patient_id = e.patient_id\n    and coalesce(p.paid_date, p.dispensing_date) between e.month_start_date and e.month_end_date\n  group by\n      claim_id\n)\n\n, final as (\n  select\n      'multiple patient_ids' as data_quality_check\n    , sum(case when patient_id_count > 1 then 1 else 0 end) as result_count\n  from pharmacy\n\n  union all\n\n  select\n      'missing patient_id' as data_quality_check\n    , sum(missing_patient_id) as result_count\n  from pharmacy\n\n  union all\n\n  select\n      'orphaned claims' as data_quality_check\n    , sum(missing_eligibility) as result_count\n  from pharmacy\n)\n\nselect\n    *\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom final", "relation_name": "dev_coco.data_quality.pharmacy_patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.996051Z", "completed_at": "2024-10-11T23:52:36.044404Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.052851Z", "completed_at": "2024-10-11T23:52:36.052856Z"}], "thread_id": "Thread-9", "execution_time": 0.07932496070861816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_eligibility as (\n\n\n\nselect\n      patient_id\n    , patient_id || coalesce(data_source,'') || coalesce(payer,'') || coalesce(plan,'') || coalesce(cast(enrollment_start_date as TEXT),'') || coalesce(cast(enrollment_end_date as TEXT),'') as patient_id_key\n    , member_id\n    , subscriber_id\n    , gender\n    , race\n    , birth_date\n    , death_date\n    , death_flag\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , payer_type\n    , plan\n    , subscriber_relation\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , first_name\n    , last_name\n    , social_security_number\n    , address\n    , city\n    , state\n    , zip_code\n    , phone\n    , data_source\n    , file_name\n    , ingest_datetime\nfrom tuva.input_layer.eligibility\n) select distinct\n    elig.patient_id\n  , elig.patient_id || coalesce(elig.data_source,'') || coalesce(elig.payer,'') || coalesce(elig.plan,'') || coalesce(cast(elig.enrollment_start_date as TEXT),'') || coalesce(cast(elig.enrollment_end_date as TEXT),'') as patient_id_key\n  , cal_dob.full_date as normalized_birth_date\n  , cal_death.full_date as normalized_death_date\n  , cal_enroll_start.full_date as normalized_enrollment_start_date\n  , cal_enroll_end.full_date as normalized_enrollment_end_date\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_eligibility elig\nleft join dev_coco.reference_data.calendar cal_dob\n    on elig.birth_date = cal_dob.full_date\nleft join dev_coco.reference_data.calendar cal_death\n    on elig.death_date = cal_death.full_date\nleft join dev_coco.reference_data.calendar cal_enroll_start\n    on elig.enrollment_start_date = cal_enroll_start.full_date\nleft join dev_coco.reference_data.calendar cal_enroll_end\n    on elig.enrollment_end_date = cal_enroll_end.full_date", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_eligibility_dates_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.010030Z", "completed_at": "2024-10-11T23:52:36.050549Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.053994Z", "completed_at": "2024-10-11T23:52:36.053998Z"}], "thread_id": "Thread-2", "execution_time": 0.07580804824829102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__pharmacy_claim", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_pharmacy_claim as (\n\n\n\nselect\n      claim_id\n    , claim_line_number\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , prescribing_provider_npi\n    , dispensing_provider_npi\n    , dispensing_date\n    , ndc_code\n    , quantity\n    , days_supply\n    , refills\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , in_network_flag\n    , data_source\n    , file_name\n    , ingest_datetime\nfrom tuva.input_layer.pharmacy_claim\n) select\n      cast(claim_id as TEXT ) as claim_id\n    , cast(claim_line_number as int ) as claim_line_number\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(member_id as TEXT ) as member_id\n    , cast(payer as TEXT ) as payer\n    , cast(plan as TEXT ) as plan\n    , cast(prescribing_provider_npi as TEXT ) as prescribing_provider_id\n    , cast(coalesce(pres.provider_last_name || ', ' || pres.provider_first_name, pres.provider_organization_name) as TEXT ) as prescribing_provider_name\n    , cast(dispensing_provider_npi as TEXT ) as dispensing_provider_id\n    , cast(coalesce(disp.provider_last_name || ', ' || disp.provider_first_name, disp.provider_organization_name) as TEXT ) as dispensing_provider_name    , cast(dispensing_date as date ) as dispensing_date\n    , cast(ndc_code as TEXT ) as ndc_code\n    , cast(ndc.fda_description as TEXT ) as ndc_description\n    , cast(quantity as int ) as quantity\n    , cast(days_supply as int ) as days_supply\n    , cast(refills as int ) as refills\n    , cast(paid_date as date ) as paid_date\n    , cast(paid_amount as numeric(28,6) ) as paid_amount\n    , cast(allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(charge_amount as numeric(28,6) ) as charge_amount\n    , cast(coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n    , cast(copayment_amount as numeric(28,6) ) as copayment_amount\n    , cast(deductible_amount as numeric(28,6) ) as deductible_amount\n    , cast(in_network_flag as int ) as in_network_flag\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-11 23:52:28.343846+00:00' as TEXT ) as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_pharmacy_claim pharm\nleft join dev_coco.terminology.provider pres\n      on pharm.prescribing_provider_npi = pres.npi\nleft join dev_coco.terminology.provider disp\n      on pharm.dispensing_provider_npi = disp.npi\nleft join dev_coco.terminology.ndc ndc\n      on pharm.ndc_code = ndc.ndc", "relation_name": "dev_coco.claims_preprocessing.normalized_input_pharmacy_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.039144Z", "completed_at": "2024-10-11T23:52:36.052561Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.056583Z", "completed_at": "2024-10-11T23:52:36.056588Z"}], "thread_id": "Thread-4", "execution_time": 0.07111883163452148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medical_claim_date_checks", "compiled": true, "compiled_code": "\n\nwith medical_claim as (\n    select m.claim_id,\n           max(case when claim_start_date is null then 1 else 0 end) as missing_claim_start_date,\n           max(case when claim_end_date is null then 1 else 0 end) as missing_claim_end_date,\n           max(case when claim_line_start_date is null then 1 else 0 end) as missing_claim_line_start_date,\n           max(case when claim_line_end_date is null then 1 else 0 end) as missing_claim_line_end_date,\n           max(case when admission_date is null and d.claim_id is not null then 1 else 0 end) as missing_admission_date,\n           max(case when discharge_date is null and d.claim_id is not null then 1 else 0 end) as missing_discharge_date,\n           max(case when paid_date is null then 1 else 0 end) as missing_paid_date,\n           count(distinct case when d.claim_id is not null then claim_start_date else null end) as claim_start_count,\n           count(distinct case when d.claim_id is not null then claim_end_date else null end) as claim_end_count,\n           count(distinct case when d.claim_id is not null then admission_date else null end) as admission_date_count,\n           count(distinct case when d.claim_id is not null then discharge_date else null end) as discharge_date_count\n    from tuva.input_layer.medical_claim m\n    left join dev_coco.data_quality.data_quality__inpatient_dq_stage d on m.claim_id = d.claim_id\n    group by m.claim_id\n)\n\n,final as (\nselect 'missing claim_start_date' as data_quality_check,\n       sum(missing_claim_start_date) as result_count\nfrom medical_claim\n\nunion all\n\nselect 'missing claim_end_date' as data_quality_check,\n       sum(missing_claim_end_date) as result_count\nfrom medical_claim\n\nunion all\n\nselect 'missing claim_line_start_date' as data_quality_check,\n       sum(missing_claim_line_start_date) as result_count\nfrom medical_claim\n\nunion all\n\nselect 'missing claim_line_end_date' as data_quality_check,\n       sum(missing_claim_line_end_date) as result_count\nfrom medical_claim\n\nunion all\n\nselect 'missing admission_date' as data_quality_check,\n       sum(missing_admission_date) as result_count\nfrom medical_claim\n\nunion all\n\nselect 'missing discharge_date' as data_quality_check,\n       sum(missing_discharge_date) as result_count\nfrom medical_claim\n\nunion all\n\nselect 'missing paid_date' as data_quality_check,\n       sum(missing_paid_date) as result_count\nfrom medical_claim\n\nunion all\n\nselect 'claim start multiple' as data_quality_check,\n       count(distinct claim_id) as result_count\nfrom medical_claim\nwhere claim_start_count > 1\n\nunion all\n\nselect 'claim end multiple' as data_quality_check,\n       count(distinct claim_id) as result_count\nfrom medical_claim\nwhere claim_end_count > 1\n\nunion all\n\nselect 'admission date multiple' as data_quality_check,\n       count(distinct claim_id) as result_count\nfrom medical_claim\nwhere admission_date_count > 1\n\nunion all\n\nselect 'discharge date multiple' as data_quality_check,\n       count(distinct claim_id) as result_count\nfrom medical_claim\nwhere discharge_date_count > 1\n)\n\nselect *\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom final", "relation_name": "dev_coco.data_quality.medical_claim_date_checks"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.045534Z", "completed_at": "2024-10-11T23:52:36.056025Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.058861Z", "completed_at": "2024-10-11T23:52:36.058866Z"}], "thread_id": "Thread-5", "execution_time": 0.06328797340393066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__medical_claim_inst_header_fields", "compiled": true, "compiled_code": "\n\nwith inst_header as (\n  select\n      m.claim_id\n    , max(case when m.claim_type = 'institutional' and btc.bill_type_code is null and m.bill_type_code is not null then 1 else 0 end) as invalid_bill_type_code\n    , max(case when m.claim_type = 'institutional' and dd.discharge_disposition_code is null and m.discharge_disposition_code is not null then 1 else 0 end) as invalid_discharge_disposition_code\n    , max(case when d.claim_id is not null and ms.ms_drg_code is null and m.ms_drg_code is not null then 1 else 0 end) as invalid_ms_drg_code\n    , max(case when d.claim_id is not null and apr.apr_drg_code is null and m.apr_drg_code is not null then 1 else 0 end) as invalid_apr_drg_code\n    , max(case when m.claim_type = 'institutional' and m.bill_type_code is null then 1 else 0 end) as missing_bill_type_code\n    , max(case when m.claim_type = 'institutional' and m.discharge_disposition_code is null then 1 else 0 end) as missing_discharge_disposition_code\n    , max(case when d.claim_id is not null and m.ms_drg_code is null then 1 else 0 end) as missing_ms_drg_code\n    , max(case when d.claim_id is not null and m.apr_drg_code is null then 1 else 0 end) as missing_apr_drg_code\n    , count(distinct case when m.claim_type = 'institutional' then m.bill_type_code else null end) as bill_type_code_count\n    , count(distinct case when m.claim_type = 'institutional' then m.discharge_disposition_code else null end) as discharge_disposition_code_count\n    , count(distinct case when d.claim_id is not null then m.ms_drg_code else null end) as ms_drg_code_count\n    , count(distinct case when d.claim_id is not null then m.apr_drg_code else null end) as apr_drg_code_count\n  from tuva.input_layer.medical_claim as m\n  left join dev_coco.data_quality.data_quality__inpatient_dq_stage as d\n    on m.claim_id = d.claim_id\n  left join dev_coco.terminology.bill_type as btc\n    on m.bill_type_code = btc.bill_type_code\n  left join dev_coco.terminology.ms_drg as ms\n    on m.ms_drg_code = ms.ms_drg_code\n  left join dev_coco.terminology.apr_drg as apr\n    on m.ms_drg_code = apr.apr_drg_code\n  left join dev_coco.terminology.discharge_disposition as dd\n    on m.discharge_disposition_code = dd.discharge_disposition_code\n  group by m.claim_id\n)\n\n, final as (\n  select\n      'invalid bill_type_code' as data_quality_check\n    , sum(invalid_bill_type_code) as result_count\n  from inst_header\n\n  union all\n\n  select\n      'invalid ms_drg_code' as data_quality_check\n    , sum(invalid_ms_drg_code) as result_count\n  from inst_header\n\n  union all\n\n  select\n      'invalid apr_drg_code' as data_quality_check\n    , sum(invalid_apr_drg_code) as result_count\n  from inst_header\n\n  union all\n\n  select\n      'invalid discharge_disposition_code' as data_quality_check\n    , sum(invalid_discharge_disposition_code) as result_count\n  from inst_header\n\n  union all\n\n  select\n      'missing bill_type_code' as data_quality_check\n    , sum(missing_bill_type_code) as result_count\n  from inst_header\n\n  union all\n\n  select\n      'missing ms_drg_code' as data_quality_check\n    , sum(missing_ms_drg_code) as result_count\n  from inst_header\n\n  union all\n\n  select\n      'missing apr_drg_code' as data_quality_check\n    , sum(missing_apr_drg_code) as result_count\n  from inst_header\n\n  union all\n\n  select\n      'missing discharge_disposition_code' as data_quality_check\n    , sum(missing_discharge_disposition_code) as result_count\n  from inst_header\n\n  union all\n\n  select\n      'bill_type_code multiple' as data_quality_check\n    , count(distinct claim_id) as result_count\n  from inst_header\n  where bill_type_code_count > 1\n\n  union all\n\n  select\n      'ms_drg_code multiple' as data_quality_check\n    , count(distinct claim_id) as result_count\n  from inst_header\n  where ms_drg_code_count > 1\n\n  union all\n\n  select\n      'apr_drg_code multiple' as data_quality_check\n    , count(distinct claim_id) as result_count\n  from inst_header\n  where apr_drg_code_count > 1\n\n  union all\n\n  select\n      'discharge_disposition_code multiple' as data_quality_check\n    , count(distinct claim_id) as result_count\n  from inst_header\n  where discharge_disposition_code_count > 1\n)\n\nselect\n    *\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom final", "relation_name": "dev_coco.data_quality.medical_claim_inst_header_fields"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.060186Z", "completed_at": "2024-10-11T23:52:36.150054Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.185581Z", "completed_at": "2024-10-11T23:52:36.185593Z"}], "thread_id": "Thread-6", "execution_time": 0.13235902786254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_admission_date", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__data_quality__stg_institutional_inpatient as (\n\n\n\n    SELECT *\n    FROM tuva.input_layer.medical_claim\n    WHERE claim_type = 'institutional'\n    AND \n  substr(bill_type_code, 1, 2)\n = '11'\n), base as (\nselect *\nfrom __dbt__cte__data_quality__stg_institutional_inpatient\n)\n, tuva_last_run as(\n\n    select cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) as tuva_last_run\n\n)\n,unique_field as (\n    select distinct claim_id\n        ,cast(admission_date as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'ADMISSION_DATE' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.admission_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.admission_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.admission_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.admission_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.admission_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        else null\n    end as invalid_reason\n    ,cast(substring(agg.field_aggregated, 1, 255) as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_coco.data_quality.institutional_admission_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.086615Z", "completed_at": "2024-10-11T23:52:36.198169Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.224600Z", "completed_at": "2024-10-11T23:52:36.224608Z"}], "thread_id": "Thread-7", "execution_time": 0.16841888427734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_admit_source_code", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__data_quality__stg_institutional_inpatient as (\n\n\n\n    SELECT *\n    FROM tuva.input_layer.medical_claim\n    WHERE claim_type = 'institutional'\n    AND \n  substr(bill_type_code, 1, 2)\n = '11'\n), base as (\nselect *\nfrom __dbt__cte__data_quality__stg_institutional_inpatient\n),\n\nunique_field as (\n    select distinct claim_id\n        , base.admit_source_code || '|' || coalesce(term.admit_source_description, '') as field\n        , data_source\n    from base\n    left join dev_coco.terminology.admit_source as term on base.admit_source_code = term.admit_source_code\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'ADMIT_SOURCE_CODE' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.admit_source_code is not null then 'valid'\n          when m.admit_source_code is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when m.admit_source_code is not null\n            and term.admit_source_code is null\n            and cg. frequency = 1\n            then 'Admit source code does not join to Terminology Admit Source table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_coco.terminology.admit_source as term on m.admit_source_code = term.admit_source_code\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_admit_source_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.110093Z", "completed_at": "2024-10-11T23:52:36.202837Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.248431Z", "completed_at": "2024-10-11T23:52:36.248440Z"}], "thread_id": "Thread-3", "execution_time": 0.1908411979675293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_admit_type_code", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__data_quality__stg_institutional_inpatient as (\n\n\n\n    SELECT *\n    FROM tuva.input_layer.medical_claim\n    WHERE claim_type = 'institutional'\n    AND \n  substr(bill_type_code, 1, 2)\n = '11'\n), base as (\nselect *\nfrom __dbt__cte__data_quality__stg_institutional_inpatient\n),\n\nunique_field as (\n    select distinct claim_id\n        , base.admit_type_code || '|' || coalesce(term.admit_type_description, '') as field\n        , data_source\n    from base\n    left join dev_coco.terminology.admit_type as term on base.admit_type_code = term.admit_type_code\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Member ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'ADMIT_TYPE_CODE' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.admit_type_code is not null then 'valid'\n          when m.admit_type_code is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when m.admit_type_code is not null\n            and term.admit_type_code is null\n            and cg.frequency = 1\n            then 'Admit Type Code does not join to Terminology Admit Type table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_coco.terminology.admit_type as term on m.admit_type_code = term.admit_type_code\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_admit_type_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.131190Z", "completed_at": "2024-10-11T23:52:36.225242Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.250085Z", "completed_at": "2024-10-11T23:52:36.250091Z"}], "thread_id": "Thread-10", "execution_time": 0.1918799877166748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_apr_drg_code", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__data_quality__stg_institutional_inpatient as (\n\n\n\n    SELECT *\n    FROM tuva.input_layer.medical_claim\n    WHERE claim_type = 'institutional'\n    AND \n  substr(bill_type_code, 1, 2)\n = '11'\n), base as (\nselect *\nfrom __dbt__cte__data_quality__stg_institutional_inpatient\n),\n\nunique_field as (\n    select distinct claim_id\n        , base.apr_drg_code || '|' || coalesce(term.apr_drg_description, '') as field\n        , data_source\n    from base\n    left join dev_coco.terminology.apr_drg as term on base.apr_drg_code = term.apr_drg_code\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'APR_DRG_CODE' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.apr_drg_code is not null then 'valid'\n          when m.apr_drg_code is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.apr_drg_code is not null\n            and term.apr_drg_code is null\n            then 'APR DRG Code does not join to Terminology APR DRG table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_coco.terminology.apr_drg as term on m.apr_drg_code = term.apr_drg_code\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_apr_drg_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.165221Z", "completed_at": "2024-10-11T23:52:36.237507Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.250603Z", "completed_at": "2024-10-11T23:52:36.250608Z"}], "thread_id": "Thread-2", "execution_time": 0.16570425033569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_ms_drg_code", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__data_quality__stg_institutional_inpatient as (\n\n\n\n    SELECT *\n    FROM tuva.input_layer.medical_claim\n    WHERE claim_type = 'institutional'\n    AND \n  substr(bill_type_code, 1, 2)\n = '11'\n), base as (\nselect *\nfrom __dbt__cte__data_quality__stg_institutional_inpatient\n),\n\nunique_field as (\n    select distinct claim_id\n        , base.ms_drg_code || '|' || coalesce(term.ms_drg_description, '') as field\n        , data_source\n    from base\n    left join dev_coco.terminology.ms_drg as term on base.ms_drg_code = term.ms_drg_code\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\n)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'MS_DRG_CODE' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.ms_drg_code is not null then 'valid'\n          when m.ms_drg_code is not null    then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.ms_drg_code is not null\n            and term.ms_drg_code is null\n            then 'MS DRG does not join to Terminology MS DRG table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_coco.terminology.ms_drg as term on m.ms_drg_code = term.ms_drg_code\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_ms_drg_code"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.152634Z", "completed_at": "2024-10-11T23:52:36.249265Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.253342Z", "completed_at": "2024-10-11T23:52:36.253347Z"}], "thread_id": "Thread-9", "execution_time": 0.19350814819335938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_discharge_date", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__data_quality__stg_institutional_inpatient as (\n\n\n\n    SELECT *\n    FROM tuva.input_layer.medical_claim\n    WHERE claim_type = 'institutional'\n    AND \n  substr(bill_type_code, 1, 2)\n = '11'\n), base as (\nselect *\nfrom __dbt__cte__data_quality__stg_institutional_inpatient\n)\n, tuva_last_run as(\n    select cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) as tuva_last_run\n)\n,unique_field as (\n    select distinct claim_id\n        ,cast(discharge_date as TEXT) as field\n        ,data_source\n    from base\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'DISCHARGE_DATE' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.discharge_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.discharge_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when m.discharge_date < m.admission_date then 'invalid'\n        when m.discharge_date is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.discharge_date > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.discharge_date < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when m.discharge_date < m.admission_date then 'discharge date before admission date'\n        else null\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_coco.data_quality.institutional_discharge_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.203276Z", "completed_at": "2024-10-11T23:52:36.251037Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.254687Z", "completed_at": "2024-10-11T23:52:36.254692Z"}], "thread_id": "Thread-4", "execution_time": 0.14911293983459473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_procedure_code_1", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__data_quality__stg_institutional_inpatient as (\n\n\n\n    SELECT *\n    FROM tuva.input_layer.medical_claim\n    WHERE claim_type = 'institutional'\n    AND \n  substr(bill_type_code, 1, 2)\n = '11'\n), base as (\nselect *\nfrom __dbt__cte__data_quality__stg_institutional_inpatient\n),\n\nunique_field as (\n    select distinct claim_id\n        , procedure_code_1 || '|' || coalesce(term.description, '') as field\n        , data_source\n    from base\n    left join dev_coco.terminology.icd_10_pcs as term on base.procedure_code_1 = term.icd_10_pcs\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'PROCEDURE_CODE_1' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.icd_10_pcs is not null      then 'valid'\n          when m.procedure_code_1 is not null  then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.procedure_code_1 is not null\n            and term.icd_10_pcs is null\n            then 'procedure code does not join to terminology procedure code table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_coco.terminology.icd_10_pcs as term on m.procedure_code_1 = term.icd_10_pcs\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_procedure_code_1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.225534Z", "completed_at": "2024-10-11T23:52:36.253066Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.267208Z", "completed_at": "2024-10-11T23:52:36.267216Z"}], "thread_id": "Thread-5", "execution_time": 0.11691093444824219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_procedure_code_2", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__data_quality__stg_institutional_inpatient as (\n\n\n\n    SELECT *\n    FROM tuva.input_layer.medical_claim\n    WHERE claim_type = 'institutional'\n    AND \n  substr(bill_type_code, 1, 2)\n = '11'\n), base as (\nselect *\nfrom __dbt__cte__data_quality__stg_institutional_inpatient\n),\n\nunique_field as (\n    select distinct claim_id\n        , procedure_code_2 || '|' || coalesce(term.description, '') as field\n        , data_source\n    from base\n    left join dev_coco.terminology.icd_10_pcs as term on base.procedure_code_1 = term.icd_10_pcs\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n\t)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'PROCEDURE_CODE_2' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.icd_10_pcs is not null      then 'valid'\n          when m.procedure_code_2 is not null  then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.procedure_code_2 is not null\n            and term.icd_10_pcs is null\n            then 'Procedure Code does not join to Terminology Procedure Code Table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_coco.terminology.icd_10_pcs as term on m.procedure_code_2 = term.icd_10_pcs\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_procedure_code_2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.255699Z", "completed_at": "2024-10-11T23:52:36.307468Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.375956Z", "completed_at": "2024-10-11T23:52:36.375966Z"}], "thread_id": "Thread-6", "execution_time": 0.12707114219665527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_procedure_code_3", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__data_quality__stg_institutional_inpatient as (\n\n\n\n    SELECT *\n    FROM tuva.input_layer.medical_claim\n    WHERE claim_type = 'institutional'\n    AND \n  substr(bill_type_code, 1, 2)\n = '11'\n), base as (\nselect *\nfrom __dbt__cte__data_quality__stg_institutional_inpatient\n),\n\nunique_field as (\n    select distinct claim_id\n        , procedure_code_3 || '|' || coalesce(term.description, '') as field\n        , data_source\n    from base\n    left join dev_coco.terminology.icd_10_pcs as term on base.procedure_code_3 = term.icd_10_pcs\n),\n\nclaim_grain as (\n    select claim_id\n        , data_source\n        , count(*) as frequency\n    from unique_field\n    group by claim_id\n        , data_source\n),\n\nclaim_agg as (\nselect\n      claim_id\n    , data_source\n    , \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n      claim_id\n    , data_source\n)\n\nselect distinct -- to bring to claim_id grain\n      m.data_source\n    , coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    , 'MEDICAL_CLAIM' AS table_name\n    , 'Claim ID' AS drill_down_key\n    , coalesce(m.claim_id, 'NULL') AS drill_down_value\n    , 'institutional' AS claim_type\n    , 'PROCEDURE_CODE_3' AS field_name\n    , case when cg.frequency > 1                then 'multiple'\n          when term.icd_10_pcs is not null      then 'valid'\n          when m.procedure_code_3 is not null  then 'invalid'\n                                               else 'null' end as bucket_name\n    , case\n        when cg.frequency = 1\n            and m.procedure_code_3 is not null\n            and term.icd_10_pcs is null\n            then 'Procedure Code does not join to Terminology Procedure Code Table'\n        else null\n    end as invalid_reason\n    , cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join dev_coco.terminology.icd_10_pcs as term on m.procedure_code_3 = term.icd_10_pcs\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source", "relation_name": "dev_coco.data_quality.institutional_procedure_code_3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.279932Z", "completed_at": "2024-10-11T23:52:36.376487Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.393665Z", "completed_at": "2024-10-11T23:52:36.393672Z"}], "thread_id": "Thread-7", "execution_time": 0.139970064163208, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_procedure_date_1", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__data_quality__stg_institutional_inpatient as (\n\n\n\n    SELECT *\n    FROM tuva.input_layer.medical_claim\n    WHERE claim_type = 'institutional'\n    AND \n  substr(bill_type_code, 1, 2)\n = '11'\n), base as (\nselect *\nfrom __dbt__cte__data_quality__stg_institutional_inpatient\n)\n, tuva_last_run as(\n    select cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) as tuva_last_run\n)\n, unique_field as (\n    select distinct claim_id\n        ,cast(procedure_date_1 as TEXT)  as field\n        ,data_source\n    from base\n\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'PROCEDURE_DATE_1' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.procedure_date_1 > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.procedure_date_1 < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when not (m.procedure_date_1 between m.claim_start_date and m.claim_end_date) then 'invalid'\n        when m.procedure_date_1 is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.procedure_date_1 > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.procedure_date_1 < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when not (m.procedure_date_1 between m.claim_start_date and m.claim_end_date) then 'procedure date not between claim start and end dates'\n        else null\n        end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_coco.data_quality.institutional_procedure_date_1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.308097Z", "completed_at": "2024-10-11T23:52:36.392714Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.425378Z", "completed_at": "2024-10-11T23:52:36.425390Z"}], "thread_id": "Thread-3", "execution_time": 0.1700892448425293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_procedure_date_2", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__data_quality__stg_institutional_inpatient as (\n\n\n\n    SELECT *\n    FROM tuva.input_layer.medical_claim\n    WHERE claim_type = 'institutional'\n    AND \n  substr(bill_type_code, 1, 2)\n = '11'\n), base as (\nselect *\nfrom __dbt__cte__data_quality__stg_institutional_inpatient\n)\n, tuva_last_run as(\n\n    select cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) as tuva_last_run\n\n)\n,unique_field as (\n    select distinct claim_id\n        ,cast(procedure_date_2 as TEXT)  as field\n        ,data_source\n    from base\n\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'PROCEDURE_DATE_2' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.procedure_date_2 > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.procedure_date_2 < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when not (m.procedure_date_2 between m.claim_start_date and m.claim_end_date) then 'invalid'\n        when m.procedure_date_2 is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.procedure_date_2 > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.procedure_date_2 < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when not (m.procedure_date_2 between m.claim_start_date and m.claim_end_date) then 'procedure date not between claim start and end dates'\n        when m.procedure_date_2 is null then null\n        else 'valid'\n    end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_coco.data_quality.institutional_procedure_date_2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.336280Z", "completed_at": "2024-10-11T23:52:36.393296Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.426565Z", "completed_at": "2024-10-11T23:52:36.426570Z"}], "thread_id": "Thread-10", "execution_time": 0.14919400215148926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__institutional_procedure_date_3", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__data_quality__stg_institutional_inpatient as (\n\n\n\n    SELECT *\n    FROM tuva.input_layer.medical_claim\n    WHERE claim_type = 'institutional'\n    AND \n  substr(bill_type_code, 1, 2)\n = '11'\n), base as (\nselect *\nfrom __dbt__cte__data_quality__stg_institutional_inpatient\n)\n, tuva_last_run as(\n\n    select cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) as tuva_last_run\n\n)\n\n,unique_field as (\n    select distinct claim_id\n        ,cast(procedure_date_3 as TEXT)  as field\n        ,data_source\n    from base\n\n),\nclaim_grain as (\n    select claim_id\n        ,data_source\n        ,count(*) as frequency\n    from unique_field\n    group by claim_id\n        ,data_source\n),\nclaim_agg as (\nselect\n    claim_id,\n    data_source,\n    \n    listagg(\n        coalesce(field, 'null'),\n        ', '\n        )\n        within group (order by field desc) as field_aggregated\nfrom\n    unique_field\ngroup by\n    claim_id,\n    data_source\n\t)\nselect distinct -- to bring to claim_id grain\n    m.data_source\n    ,coalesce(cast(m.claim_start_date as TEXT),cast('1900-01-01' as TEXT)) as source_date\n    ,'MEDICAL_CLAIM' AS table_name\n    ,'Claim ID' AS drill_down_key\n    ,coalesce(m.claim_id, 'NULL') AS drill_down_value\n    ,'institutional' AS claim_type\n    ,'PROCEDURE_DATE_3' AS field_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.procedure_date_3 > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'invalid'\n        when m.procedure_date_3 < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'invalid'\n        when not (m.procedure_date_3 between m.claim_start_date and m.claim_end_date) then 'invalid'\n        when m.procedure_date_3 is null then 'null'\n        else 'valid'\n    end as bucket_name\n    ,case\n        when cg.frequency > 1 then 'multiple'\n        when m.procedure_date_3 > cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) then 'future'\n        when m.procedure_date_3 < \n\n    dateadd(\n        year,\n        -10,\n        cte.tuva_last_run\n        )\n\n then 'too old'\n        when not (m.procedure_date_3 between m.claim_start_date and m.claim_end_date) then 'procedure date not between claim start and end dates'\n        else null\n        end as invalid_reason\n    ,cast(\n  substr(agg.field_aggregated, 1, 255)\n as TEXT) as field_value\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom base m\nleft join claim_grain cg on m.claim_id = cg.claim_id and m.data_source = cg.data_source\nleft join claim_agg agg on m.claim_id = agg.claim_id and m.data_source = agg.data_source\ncross join tuva_last_run cte", "relation_name": "dev_coco.data_quality.institutional_procedure_date_3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.348907Z", "completed_at": "2024-10-11T23:52:36.394185Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.427424Z", "completed_at": "2024-10-11T23:52:36.427431Z"}], "thread_id": "Thread-2", "execution_time": 0.14975905418395996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_source_voting", "compiled": true, "compiled_code": "\n\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n), normalize_cte as(\n    select \n        med.claim_id\n        , med.data_source\n        , admit.admit_source_code\n\n        , admit.admit_source_description\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join dev_coco.terminology.admit_source admit\n        on med.admit_source_code = admit.admit_source_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , admit_source_code\n        , admit_source_description\n        , count(*) as admit_source_occurrence_count\n    from normalize_cte\n    where admit_source_code is not null\n    group by \n        claim_id\n        , data_source\n        , admit_source_code\n        , admit_source_description\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'admit_source_code' as column_name\n        , admit_source_code as normalized_code\n        , admit_source_description as normalized_description\n        , admit_source_occurrence_count as occurrence_count\n        , coalesce(lead(admit_source_occurrence_count) \n            over (partition by claim_id, data_source order by admit_source_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by admit_source_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_admit_source_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.377234Z", "completed_at": "2024-10-11T23:52:36.426300Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.456769Z", "completed_at": "2024-10-11T23:52:36.456776Z"}], "thread_id": "Thread-9", "execution_time": 0.17725300788879395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_type_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n), normalize_cte as(\n    select \n        med.claim_id\n        , med.data_source\n        , admit.admit_type_code\n        , admit.admit_type_description\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join dev_coco.terminology.admit_type admit\n        on med.admit_type_code = admit.admit_type_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , admit_type_code\n        , admit_type_description\n        , count(*) as admit_type_occurrence_count\n    from normalize_cte\n\n    where admit_type_code is not null\n    group by \n        claim_id\n        , data_source\n        , admit_type_code\n        , admit_type_description\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'admit_type_code' as column_name\n        , admit_type_code as normalized_code\n        , admit_type_description as normalized_description\n        , admit_type_occurrence_count as occurrence_count\n        , coalesce(lead(admit_type_occurrence_count) \n            over (partition by claim_id, data_source order by admit_type_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by admit_type_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_admit_type_normalize_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.394432Z", "completed_at": "2024-10-11T23:52:36.448578Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.458635Z", "completed_at": "2024-10-11T23:52:36.458640Z"}], "thread_id": "Thread-4", "execution_time": 0.15097689628601074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_apr_drg_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n), normalize_cte as(\n\n    select \n        med.claim_id\n        , med.data_source\n        , apr.apr_drg_code\n        , apr.apr_drg_description\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join dev_coco.terminology.apr_drg apr\n        on med.apr_drg_code = apr.apr_drg_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , apr_drg_code\n        , apr_drg_description\n        , count(*) as apr_drg_occurrence_count\n    from normalize_cte\n    where apr_drg_code is not null\n    group by \n        claim_id\n        , data_source\n        , apr_drg_code\n        , apr_drg_description\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'apr_drg_code' as column_name\n        , apr_drg_code as normalized_code\n        , apr_drg_description as normalized_description\n        , apr_drg_occurrence_count as occurrence_count\n        , coalesce(lead(apr_drg_occurrence_count) \n            over (partition by claim_id, data_source order by apr_drg_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by apr_drg_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_apr_drg_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.405836Z", "completed_at": "2024-10-11T23:52:36.456210Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.459710Z", "completed_at": "2024-10-11T23:52:36.459715Z"}], "thread_id": "Thread-5", "execution_time": 0.13907098770141602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_bill_type_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n), normalize_cte as(\n    select \n        med.claim_id\n        , med.data_source\n        , bill.bill_type_code\n        , bill.bill_type_description\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join dev_coco.terminology.bill_type bill\n        on ltrim(med.bill_type_code, '0') = bill.bill_type_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , bill_type_code\n        , bill_type_description\n        , count(*) as bill_type_occurrence_count\n    from normalize_cte\n    where bill_type_code is not null\n    group by \n        claim_id\n        , data_source\n        , bill_type_code\n        , bill_type_description\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'bill_type_code' as column_name\n        , bill_type_code as normalized_code\n        , bill_type_description as normalized_description\n        , bill_type_occurrence_count as occurrence_count\n        , row_number() over (partition by claim_id, data_source order by bill_type_occurrence_count desc, bill_type_code asc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_bill_type_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.460181Z", "completed_at": "2024-10-11T23:52:36.534666Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.577181Z", "completed_at": "2024-10-11T23:52:36.577191Z"}], "thread_id": "Thread-6", "execution_time": 0.15132522583007812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n), pivot_diagnosis as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_1'  as diagnosis_column\n        ,  diagnosis_code_1  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_2'  as diagnosis_column\n        ,  diagnosis_code_2  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_3'  as diagnosis_column\n        ,  diagnosis_code_3  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_4'  as diagnosis_column\n        ,  diagnosis_code_4  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_5'  as diagnosis_column\n        ,  diagnosis_code_5  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_6'  as diagnosis_column\n        ,  diagnosis_code_6  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_7'  as diagnosis_column\n        ,  diagnosis_code_7  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_8'  as diagnosis_column\n        ,  diagnosis_code_8  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_9'  as diagnosis_column\n        ,  diagnosis_code_9  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_10'  as diagnosis_column\n        ,  diagnosis_code_10  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_11'  as diagnosis_column\n        ,  diagnosis_code_11  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_12'  as diagnosis_column\n        ,  diagnosis_code_12  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_13'  as diagnosis_column\n        ,  diagnosis_code_13  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_14'  as diagnosis_column\n        ,  diagnosis_code_14  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_15'  as diagnosis_column\n        ,  diagnosis_code_15  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_16'  as diagnosis_column\n        ,  diagnosis_code_16  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_17'  as diagnosis_column\n        ,  diagnosis_code_17  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_18'  as diagnosis_column\n        ,  diagnosis_code_18  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_19'  as diagnosis_column\n        ,  diagnosis_code_19  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_20'  as diagnosis_column\n        ,  diagnosis_code_20  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_21'  as diagnosis_column\n        ,  diagnosis_code_21  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_22'  as diagnosis_column\n        ,  diagnosis_code_22  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_23'  as diagnosis_column\n        ,  diagnosis_code_24  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_24'  as diagnosis_column\n        ,  diagnosis_code_24  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_25'  as diagnosis_column\n        ,  diagnosis_code_25  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , diagnosis_code_type\n    , diagnosis_column\n    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm) as normalized_diagnosis_code\n    , count(*) as diagnosis_code_occurrence_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom pivot_diagnosis piv\nleft join dev_coco.terminology.icd_10_cm icd_10\n    on replace(piv.diagnosis_code,'.','') = icd_10.icd_10_cm\n    and piv.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd_9\n    on replace(piv.diagnosis_code,'.','') = icd_9.icd_9_cm\n    and piv.diagnosis_code_type = 'icd-9-cm'\nwhere claim_type <> 'undetermined'\ngroup by \n    claim_id\n    , data_source\n    , diagnosis_code_type\n    , diagnosis_column\n    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm)", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_diagnosis_code_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.517060Z", "completed_at": "2024-10-11T23:52:36.566266Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.586712Z", "completed_at": "2024-10-11T23:52:36.586722Z"}], "thread_id": "Thread-7", "execution_time": 0.1292259693145752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n), normalize_cte as(\n    select \n        med.claim_id\n        , med.data_source\n        , disch.discharge_disposition_code\n        , disch.discharge_disposition_description\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join dev_coco.terminology.discharge_disposition disch\n        on med.discharge_disposition_code = disch.discharge_disposition_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , discharge_disposition_code\n        , discharge_disposition_description\n        , count(*) as discharge_disposition_occurrence_count\n    from normalize_cte\n    where discharge_disposition_code is not null\n    group by \n        claim_id\n        , data_source\n        , discharge_disposition_code\n        , discharge_disposition_description\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'discharge_disposition_code' as column_name\n        , discharge_disposition_code as normalized_code\n        , discharge_disposition_description as normalized_description\n        , discharge_disposition_occurrence_count as occurrence_count\n        , coalesce(lead(discharge_disposition_occurrence_count) \n            over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_discharge_disposition_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.535426Z", "completed_at": "2024-10-11T23:52:36.587287Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.680277Z", "completed_at": "2024-10-11T23:52:36.680287Z"}], "thread_id": "Thread-3", "execution_time": 0.22100615501403809, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n) select distinct\n  med.claim_id\n  , med.claim_line_number\n  , med.claim_type\n  , med.data_source\n  , cal_claim_start.full_date as normalized_claim_start_date\n  , cal_claim_end.full_date as normalized_claim_end_date\n  , cal_claim_line_start.full_date as normalized_claim_line_start_date\n  , cal_claim_line_end.full_date as normalized_claim_line_end_date\n  , cal_admission.full_date as normalized_admission_date\n  , cal_discharge.full_date as normalized_discharge_date\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join dev_coco.reference_data.calendar cal_claim_start\n    on med.claim_start_date = cal_claim_start.full_date\nleft join dev_coco.reference_data.calendar cal_claim_end\n    on med.claim_end_date = cal_claim_end.full_date\nleft join dev_coco.reference_data.calendar cal_claim_line_start\n    on med.claim_line_start_date = cal_claim_line_start.full_date\nleft join dev_coco.reference_data.calendar cal_claim_line_end\n    on med.claim_line_end_date = cal_claim_line_end.full_date\nleft join dev_coco.reference_data.calendar cal_admission\n    on med.admission_date = cal_admission.full_date\nleft join dev_coco.reference_data.calendar cal_discharge\n    on med.discharge_date = cal_discharge.full_date", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_medical_claim_date_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.547311Z", "completed_at": "2024-10-11T23:52:36.588012Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.690765Z", "completed_at": "2024-10-11T23:52:36.690769Z"}], "thread_id": "Thread-10", "execution_time": 0.21248102188110352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_medical_npi_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n) select distinct\n  med.claim_id\n  , med.claim_line_number\n  , med.claim_type\n  , med.data_source\n  , rend_prov.npi as normalized_rendering_npi\n  , cast(coalesce(rend_prov.provider_last_name || ', ' || rend_prov.provider_first_name, rend_prov.provider_organization_name) as TEXT ) as normalized_rendering_name\n  , bill_prov.npi as normalized_billing_npi\n  , cast(coalesce(bill_prov.provider_last_name || ', ' || bill_prov.provider_first_name, bill_prov.provider_organization_name) as TEXT ) as normalized_billing_name\n  , fac_prov.npi as normalized_facility_npi\n  , cast(coalesce(fac_prov.provider_last_name || ', ' || fac_prov.provider_first_name, fac_prov.provider_organization_name) as TEXT ) as normalized_facility_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join dev_coco.terminology.provider rend_prov\n    on med.rendering_npi = rend_prov.npi\n    and rend_prov.entity_type_description = 'Individual'\nleft join dev_coco.terminology.provider bill_prov\n    on med.billing_npi = bill_prov.npi\nleft join dev_coco.terminology.provider fac_prov\n    on med.facility_npi = fac_prov.npi\n    and fac_prov.entity_type_description = 'Organization'\n    and med.claim_type = 'institutional'", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_medical_npi_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.561226Z", "completed_at": "2024-10-11T23:52:36.594745Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.691227Z", "completed_at": "2024-10-11T23:52:36.691232Z"}], "thread_id": "Thread-2", "execution_time": 0.17832112312316895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_ms_drg_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n), normalize_cte as(\n    select \n        med.claim_id\n        , med.data_source\n        , ms.ms_drg_code\n        , ms.ms_drg_description\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join dev_coco.terminology.ms_drg ms\n        on med.ms_drg_code = ms.ms_drg_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , ms_drg_code\n        , ms_drg_description\n        , count(*) as ms_drg_occurrence_count\n    from normalize_cte\n    where ms_drg_code is not null\n    group by \n        claim_id\n        , data_source\n        , ms_drg_code\n        , ms_drg_description\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'ms_drg_code' as column_name\n        , ms_drg_code as normalized_code\n        , ms_drg_description as normalized_description\n        , ms_drg_occurrence_count as occurrence_count\n        , coalesce(lead(ms_drg_occurrence_count) \n            over (partition by claim_id, data_source order by ms_drg_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by ms_drg_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_ms_drg_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.578541Z", "completed_at": "2024-10-11T23:52:36.680845Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.712138Z", "completed_at": "2024-10-11T23:52:36.712145Z"}], "thread_id": "Thread-9", "execution_time": 0.1962728500366211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_place_of_service_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n) select\n    claim_id\n    , claim_line_number\n    , data_source\n    , pos.place_of_service_code as normalized_code\n    , pos.place_of_service_description as normalized_description\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join dev_coco.terminology.place_of_service pos\n    \n        on lpad(med.place_of_service_code, 2, '0') = pos.place_of_service_code\n    \nwhere claim_type = 'professional'", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_place_of_service_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.595093Z", "completed_at": "2024-10-11T23:52:36.720889Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.766904Z", "completed_at": "2024-10-11T23:52:36.766912Z"}], "thread_id": "Thread-5", "execution_time": 0.22037196159362793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_code_normalize", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n), pivot_procedure as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_1'  as procedure_column\n        ,  procedure_code_1  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_2'  as procedure_column\n        ,  procedure_code_2  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_3'  as procedure_column\n        ,  procedure_code_3  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_4'  as procedure_column\n        ,  procedure_code_4  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_5'  as procedure_column\n        ,  procedure_code_5  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_6'  as procedure_column\n        ,  procedure_code_6  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_7'  as procedure_column\n        ,  procedure_code_7  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_8'  as procedure_column\n        ,  procedure_code_8  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_9'  as procedure_column\n        ,  procedure_code_9  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_10'  as procedure_column\n        ,  procedure_code_10  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_11'  as procedure_column\n        ,  procedure_code_11  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_12'  as procedure_column\n        ,  procedure_code_12  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_13'  as procedure_column\n        ,  procedure_code_13  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_14'  as procedure_column\n        ,  procedure_code_14  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_15'  as procedure_column\n        ,  procedure_code_15  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_16'  as procedure_column\n        ,  procedure_code_16  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_17'  as procedure_column\n        ,  procedure_code_17  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_18'  as procedure_column\n        ,  procedure_code_18  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_19'  as procedure_column\n        ,  procedure_code_19  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_20'  as procedure_column\n        ,  procedure_code_20  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_21'  as procedure_column\n        ,  procedure_code_21  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_22'  as procedure_column\n        ,  procedure_code_22  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_23'  as procedure_column\n        ,  procedure_code_23  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_24'  as procedure_column\n        ,  procedure_code_24  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_25'  as procedure_column\n        ,  procedure_code_25  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , procedure_code_type\n    , procedure_column\n    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs) as normalized_procedure_code\n    , count(*) as procedure_code_occurrence_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom pivot_procedure piv\nleft join dev_coco.terminology.icd_10_pcs icd_10\n    on replace(piv.procedure_code,'.','') = icd_10.icd_10_pcs\n    and piv.procedure_code_type = 'icd-10-pcs'\nleft join dev_coco.terminology.icd_9_pcs icd_9\n    on replace(piv.procedure_code,'.','') = icd_9.icd_9_pcs\n    and piv.procedure_code_type = 'icd-9-pcs'\nwhere claim_type = 'institutional'\ngroup by \n    claim_id\n    , data_source\n    , procedure_code_type\n    , procedure_column\n    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs)", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_procedure_code_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.588371Z", "completed_at": "2024-10-11T23:52:36.721185Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.767400Z", "completed_at": "2024-10-11T23:52:36.767404Z"}], "thread_id": "Thread-4", "execution_time": 0.23244214057922363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_present_on_admit_normalize", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n), pivot_poa as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_1'  as diagnosis_column\n        ,  diagnosis_poa_1  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_2'  as diagnosis_column\n        ,  diagnosis_poa_2  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_3'  as diagnosis_column\n        ,  diagnosis_poa_3  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_4'  as diagnosis_column\n        ,  diagnosis_poa_4  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_5'  as diagnosis_column\n        ,  diagnosis_poa_5  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_6'  as diagnosis_column\n        ,  diagnosis_poa_6  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_7'  as diagnosis_column\n        ,  diagnosis_poa_7  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_8'  as diagnosis_column\n        ,  diagnosis_poa_8  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_9'  as diagnosis_column\n        ,  diagnosis_poa_9  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_10'  as diagnosis_column\n        ,  diagnosis_poa_10  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_11'  as diagnosis_column\n        ,  diagnosis_poa_11  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_12'  as diagnosis_column\n        ,  diagnosis_poa_12  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_13'  as diagnosis_column\n        ,  diagnosis_poa_13  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_14'  as diagnosis_column\n        ,  diagnosis_poa_14  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_15'  as diagnosis_column\n        ,  diagnosis_poa_15  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_16'  as diagnosis_column\n        ,  diagnosis_poa_16  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_17'  as diagnosis_column\n        ,  diagnosis_poa_17  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_18'  as diagnosis_column\n        ,  diagnosis_poa_18  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_19'  as diagnosis_column\n        ,  diagnosis_poa_19  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_20'  as diagnosis_column\n        ,  diagnosis_poa_20  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_21'  as diagnosis_column\n        ,  diagnosis_poa_21  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_22'  as diagnosis_column\n        ,  diagnosis_poa_22  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_23'  as diagnosis_column\n        ,  diagnosis_poa_24  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_24'  as diagnosis_column\n        ,  diagnosis_poa_24  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_25'  as diagnosis_column\n        ,  diagnosis_poa_25  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , diagnosis_column\n    , poa.present_on_admit_code as normalized_present_on_admit_code\n    , count(*) as present_on_admit_occurrence_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom pivot_poa piv\nleft join dev_coco.terminology.present_on_admission poa\n    on replace(piv.present_on_admit_code,'.','') = poa.present_on_admit_code\nwhere claim_type = 'institutional'\ngroup by \n    claim_id\n    , data_source\n    , diagnosis_column\n    , poa.present_on_admit_code", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_present_on_admit_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.722643Z", "completed_at": "2024-10-11T23:52:36.779240Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.868620Z", "completed_at": "2024-10-11T23:52:36.868630Z"}], "thread_id": "Thread-6", "execution_time": 0.17824721336364746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_date_normalize", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n), pivot_procedure as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_1'  as procedure_column\n        ,  procedure_date_1  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_2'  as procedure_column\n        ,  procedure_date_2  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_3'  as procedure_column\n        ,  procedure_date_3  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_4'  as procedure_column\n        ,  procedure_date_4  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_5'  as procedure_column\n        ,  procedure_date_5  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_6'  as procedure_column\n        ,  procedure_date_6  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_7'  as procedure_column\n        ,  procedure_date_7  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_8'  as procedure_column\n        ,  procedure_date_8  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_9'  as procedure_column\n        ,  procedure_date_9  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_10'  as procedure_column\n        ,  procedure_date_10  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_11'  as procedure_column\n        ,  procedure_date_11  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_12'  as procedure_column\n        ,  procedure_date_12  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_13'  as procedure_column\n        ,  procedure_date_13  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_14'  as procedure_column\n        ,  procedure_date_14  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_15'  as procedure_column\n        ,  procedure_date_15  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_16'  as procedure_column\n        ,  procedure_date_16  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_17'  as procedure_column\n        ,  procedure_date_17  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_18'  as procedure_column\n        ,  procedure_date_18  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_19'  as procedure_column\n        ,  procedure_date_19  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_20'  as procedure_column\n        ,  procedure_date_20  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_21'  as procedure_column\n        ,  procedure_date_21  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_22'  as procedure_column\n        ,  procedure_date_22  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_23'  as procedure_column\n        ,  procedure_date_23  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_24'  as procedure_column\n        ,  procedure_date_24  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_25'  as procedure_column\n        ,  procedure_date_25  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , procedure_column\n    , cal.full_date as procedure_date\n    , count(*) as procedure_date_occurrence_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom pivot_procedure piv\nleft join dev_coco.reference_data.calendar cal\n    on piv.procedure_date = cal.full_date\nwhere claim_type = 'institutional'\ngroup by \n    claim_id\n    , data_source\n    , procedure_column\n    , cal.full_date", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_procedure_date_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.768157Z", "completed_at": "2024-10-11T23:52:36.805017Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.873335Z", "completed_at": "2024-10-11T23:52:36.873341Z"}], "thread_id": "Thread-7", "execution_time": 0.18051791191101074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_revenue_center_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n) select\n    claim_id\n    , claim_line_number\n    , data_source\n    , rev.revenue_center_code as normalized_code\n    , rev.revenue_center_description as normalized_description\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join dev_coco.terminology.revenue_center rev\n    \n        on lpad(med.revenue_center_code, 4, '0') = rev.revenue_center_code\n    \nwhere claim_type = 'institutional'", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_revenue_center_normalize"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.779543Z", "completed_at": "2024-10-11T23:52:36.875155Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.887423Z", "completed_at": "2024-10-11T23:52:36.887429Z"}], "thread_id": "Thread-3", "execution_time": 0.16551780700683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_undetermined_claim_type", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n) select\n    claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , ad_src.admit_source_code\n    , ad_src.admit_source_description\n    , ad_type.admit_type_code\n    , ad_type.admit_type_description\n    , dis.discharge_disposition_code\n    , dis.discharge_disposition_description\n    , pos.place_of_service_code\n    , pos.place_of_service_description\n    , tob.bill_type_code\n    , tob.bill_type_description\n    , msdrg.ms_drg_code\n    , msdrg.ms_drg_description\n    , aprdrg.apr_drg_code\n    , aprdrg.apr_drg_description\n    , rev.revenue_center_code\n    , rev.revenue_center_description\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendnpi.npi as rendering_name\n    , billing_npi\n    , billnpi.npi as billing_name\n    , facility_npi\n    , facnpi.npi as facility_name\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join dev_coco.terminology.admit_source ad_src\n    on med.admit_source_code = ad_src.admit_source_code\nleft join dev_coco.terminology.admit_type ad_type\n    on med.admit_type_code = ad_type.admit_type_code\nleft join dev_coco.terminology.discharge_disposition dis\n    on med.discharge_disposition_code = dis.discharge_disposition_code\nleft join dev_coco.terminology.place_of_service pos\n    on med.place_of_service_code = pos.place_of_service_code\nleft join dev_coco.terminology.bill_type tob\n    on med.bill_type_code = tob.bill_type_code\nleft join dev_coco.terminology.ms_drg msdrg\n    on med.ms_drg_code = msdrg.ms_drg_code\nleft join dev_coco.terminology.apr_drg aprdrg\n    on med.apr_drg_code = aprdrg.apr_drg_code\nleft join dev_coco.terminology.revenue_center rev\n    on med.revenue_center_code = rev.revenue_center_code\nleft join dev_coco.terminology.provider rendnpi\n    on med.rendering_npi = rendnpi.npi\nleft join dev_coco.terminology.provider billnpi\n    on med.billing_npi = billnpi.npi\nleft join dev_coco.terminology.provider facnpi\n    on med.facility_npi = facnpi.npi\nwhere claim_type in ('undetermined')", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_undetermined_claim_type"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.817571Z", "completed_at": "2024-10-11T23:52:36.875406Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.899701Z", "completed_at": "2024-10-11T23:52:36.899707Z"}], "thread_id": "Thread-10", "execution_time": 0.1641521453857422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__data_quality_clinical_for_pbi", "compiled": true, "compiled_code": "\n\nWITH Ranked_Examples as (\n       SELECT\n              summary_sk,\n              data_source,\n              table_name,\n              field_name,\n              bucket_name,\n              invalid_reason,\n              drill_down_key,\n              drill_down_value as drill_down_value,\n              field_value as field_value,\n              count(drill_down_value) as frequency,\n              row_number() over (partition by summary_sk, bucket_name, field_value order by field_value) as rn\n              , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n       FROM dev_coco.data_quality.data_quality_clinical_detail\n       where bucket_name not in ('valid', 'null')\n       group by\n              data_source,\n              field_name,\n              table_name,\n              bucket_name,\n              field_value,\n              drill_down_key,\n              drill_down_value,\n              invalid_reason,\n              summary_sk\n\n),\n\npk_examples as (\n       SELECT\n              detail.summary_sk,\n              detail.data_source,\n              detail.table_name,\n              detail.field_name,\n              detail.bucket_name,\n              detail.invalid_reason,\n              detail.drill_down_key,\n              detail.drill_down_value as drill_down_value,\n              detail.field_value as field_value,\n              count(detail.drill_down_value) as frequency,\n              row_number() over (partition by detail.summary_sk order by detail.summary_sk) as rn\n              , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n       from dev_coco.data_quality.data_quality_clinical_detail as detail\n              left join dev_coco.data_quality._value_set_crosswalk_field_info as field_info on detail.table_name = field_info.input_layer_table_name\n                     and detail.field_name = field_info.field_name\n       where detail.bucket_name = 'valid'\n              and field_info.unique_values_expected_flag = 1\n       GROUP BY\n              detail.data_source,\n              detail.field_name,\n              detail.table_name,\n              detail.bucket_name,\n              detail.field_value,\n              detail.drill_down_key,\n              detail.drill_down_value,\n              detail.invalid_reason,\n              detail.summary_sk\n\n)\n--- Null Values\n\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       max(drill_down_value) as drill_down_value,\n       null as field_value,\n       count(drill_down_value) as frequency\n       , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.data_quality.data_quality_clinical_detail\nwhere bucket_name = 'null'\ngroup by\n       data_source,\n       field_name,\n       table_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       summary_sk\n\nunion all\n\n--- Valid Values except PKs\n\nSELECT\n       detail.summary_sk,\n       detail.data_source,\n       detail.table_name,\n       detail.field_name,\n       detail.bucket_name,\n       detail.invalid_reason,\n       detail.drill_down_key,\n       max(detail.drill_down_value) as drill_down_value,\n       detail.field_value as field_value,\n       count(detail.drill_down_value) as frequency\n       , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.data_quality.data_quality_clinical_detail as detail\nleft join dev_coco.data_quality._value_set_crosswalk_field_info as field_info on detail.table_name = field_info.input_layer_table_name\n       and detail.field_name = field_info.field_name\nWHERE\n       detail.bucket_name = 'valid'\n       and field_info.unique_values_expected_flag = 0 --- need to handle pks differently since every value is supposed to be unique\ngroup by\n       detail.data_source,\n       detail.field_name,\n       detail.table_name,\n       detail.bucket_name,\n       detail.field_value,\n       detail.invalid_reason,\n       detail.drill_down_key,\n       detail.summary_sk\n\nunion all\n\n-- 5 Examples of each invalid example\n\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       drill_down_value as drill_down_value,\n       field_value as field_value,\n       frequency\n       , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM Ranked_Examples\nWHERE rn <= 5\n\nunion all\n\n--- Aggregating all other invalid examples into single row\n\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       'all others' as drill_down_value,\n       field_value as field_value,\n       sum(frequency) as frequency\n       , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM Ranked_Examples\nWHERE rn > 5 --- Aggregating all other rows\nGROUP BY\n    summary_sk,\n    data_source,\n    table_name,\n    field_name,\n    bucket_name,\n    invalid_reason,\n    drill_down_key,\n    field_value\n\nunion all\n\n--- 5 Examples of valid primary key values\n\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       drill_down_value as drill_down_value,\n       field_value as field_value,\n       frequency\n       , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM pk_examples\nWHERE rn <= 5\n\nunion all\n\n--- Aggegating all other valid primary key value examples\n\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       'All Others' as drill_down_value,\n       'All Others' as field_value,\n       sum(frequency) as frequency\n       , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM pk_examples\nWHERE rn > 5 --- Aggregating all other rows\nGROUP BY\n    summary_sk,\n    data_source,\n    table_name,\n    field_name,\n    bucket_name,\n    invalid_reason,\n    drill_down_key,\n    field_value", "relation_name": "dev_coco.data_quality.data_quality_clinical_for_pbi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.835647Z", "completed_at": "2024-10-11T23:52:36.880262Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.905537Z", "completed_at": "2024-10-11T23:52:36.905543Z"}], "thread_id": "Thread-2", "execution_time": 0.15095019340515137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_prep_egfr_labs", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__hcc_suspecting__stg_core__lab_result as (\n\n\nselect\n      lab_result_id\n    , patient_id\n    , lower(coalesce(normalized_code_type,source_code_type)) as code_type\n    , coalesce(normalized_code,source_code) as code\n    , status\n    , result\n    , result_date\n    , data_source\nfrom dev_coco.core.lab_result\n\n\n), lab_result as (\n\n    select\n          patient_id\n        , data_source\n        , code_type\n        , code\n        , status\n        , result\n        , result_date\n    from __dbt__cte__hcc_suspecting__stg_core__lab_result\n\n)\n\n, seed_egfr_codes as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from dev_coco.hcc_suspecting._value_set_clinical_concepts\n    where lower(concept_name) = 'estimated glomerular filtration rate'\n\n)\n\n, egfr_labs as (\n\n    select distinct\n          lab_result.patient_id\n        , lab_result.data_source\n        , lab_result.code_type\n        , lab_result.code\n        , lab_result.result_date\n        , lab_result.result\n    from lab_result\n        inner join seed_egfr_codes\n        on lab_result.code = seed_egfr_codes.code\n        and lab_result.code_type = seed_egfr_codes.code_system\n    where lab_result.result is not null\n    and lower(lab_result.status) not in ('cancelled', 'entered-in-error')\n\n)\n\n, numeric_egfr_labs as (\n\n    select\n          patient_id\n        , data_source\n        , code_type\n        , code\n        , result_date\n        , cast(result as numeric(28,6)) as result\n    from egfr_labs\n   \n        where regexp_like(result, '^[+-]?([0-9]*[.])?[0-9]+$')\n    \n\n)\n\n, clean_non_numeric_egfr_labs as (\n\n    select\n          patient_id\n        , data_source\n        , code_type\n        , code\n        , result_date\n        , result\n        , cast(case\n            when lower(result) like '%unsatisfactory specimen%' then null\n            when result like '%>%' then null\n            when result like '%<%' then null\n            when result like '%@%' then trim(replace(result,'@',''))\n            when result like '%mL/min/1.73m2%' then trim(replace(result,'mL/min/1.73m2',''))\n            else null\n          end as numeric(28,6)) as clean_result\n    from egfr_labs\n    \n        where regexp_like(result, '^[+-]?([0-9]*[.])?[0-9]+$') = False\n    \n\n)\n\n, unioned_labs as (\n\n    select\n          patient_id\n        , data_source\n        , code_type\n        , code\n        , result_date\n        , result\n    from numeric_egfr_labs\n\n    union all\n\n    select\n          patient_id\n        , data_source\n        , code_type\n        , code\n        , result_date\n        , clean_result as result\n    from clean_non_numeric_egfr_labs\n    where clean_result is not null\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(data_source as TEXT) as data_source\n        , cast(code_type as TEXT) as code_type\n        , cast(code as TEXT) as code\n        , cast(result_date as date) as result_date\n        , cast(result as numeric(28,6)) as result\n    from unioned_labs\n\n)\n\nselect\n      patient_id\n    , data_source\n    , code_type\n    , code\n    , result_date\n    , result\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.hcc_suspecting._int_prep_egfr_labs"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.869222Z", "completed_at": "2024-10-11T23:52:36.887152Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.906379Z", "completed_at": "2024-10-11T23:52:36.906384Z"}], "thread_id": "Thread-9", "execution_time": 0.12974882125854492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , observation_date\n    , result\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , normalized_description\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.observation\n\n\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__observation\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.876227Z", "completed_at": "2024-10-11T23:52:36.906847Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.918304Z", "completed_at": "2024-10-11T23:52:36.918312Z"}], "thread_id": "Thread-5", "execution_time": 0.057412147521972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__medication as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , prescribing_date  \n    , dispensing_date\n    , source_code_type\n    , source_code\n    , ndc_code\n    , rxnorm_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medication\n\n\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__medication\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.880545Z", "completed_at": "2024-10-11T23:52:36.908468Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.942033Z", "completed_at": "2024-10-11T23:52:36.942041Z"}], "thread_id": "Thread-4", "execution_time": 0.07405328750610352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__eligibility", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_eligibility as (\n\n\n\nselect\n      patient_id\n    , patient_id || coalesce(data_source,'') || coalesce(payer,'') || coalesce(plan,'') || coalesce(cast(enrollment_start_date as TEXT),'') || coalesce(cast(enrollment_end_date as TEXT),'') as patient_id_key\n    , member_id\n    , subscriber_id\n    , gender\n    , race\n    , birth_date\n    , death_date\n    , death_flag\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , payer_type\n    , plan\n    , subscriber_relation\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , first_name\n    , last_name\n    , social_security_number\n    , address\n    , city\n    , state\n    , zip_code\n    , phone\n    , data_source\n    , file_name\n    , ingest_datetime\nfrom tuva.input_layer.eligibility\n) select\n    cast(elig.patient_id as TEXT ) as patient_id\n    , cast(elig.member_id as TEXT ) as member_id\n    , cast(elig.subscriber_id as TEXT ) as subscriber_id\n    , cast(elig.gender as TEXT ) as gender\n    , cast(elig.race as TEXT ) as race\n    , cast(date_norm.normalized_birth_date as date ) as birth_date\n    , cast(date_norm.normalized_death_date as date ) as death_date\n    , cast(elig.death_flag as int ) as death_flag\n    , cast(date_norm.normalized_enrollment_start_date as date ) as enrollment_start_date\n    , cast(date_norm.normalized_enrollment_end_date as date ) as enrollment_end_date\n    , cast(elig.payer as TEXT ) as payer\n    , cast(elig.payer_type as TEXT ) as payer_type\n    , cast(elig.plan as TEXT ) as plan\n    , cast(elig.original_reason_entitlement_code as TEXT ) as original_reason_entitlement_code\n    , cast(elig.dual_status_code as TEXT ) as dual_status_code\n    , cast(elig.medicare_status_code as TEXT ) as medicare_status_code\n    , cast(elig.first_name as TEXT ) as first_name\n    , cast(elig.last_name as TEXT ) as last_name\n    , cast(elig.social_security_number as TEXT ) as social_security_number\n    , cast(elig.subscriber_relation as TEXT ) as subscriber_relation\n    , cast(elig.address as TEXT ) as address\n    , cast(elig.city as TEXT ) as city\n    , cast(elig.state as TEXT ) as state\n    , cast(elig.zip_code as TEXT ) as zip_code\n    , cast(elig.phone as TEXT ) as phone\n    , cast(elig.data_source as TEXT ) as data_source\n    , cast('2024-10-11 23:52:28.343846+00:00'  as TEXT ) as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_eligibility elig\nleft join dev_coco.claims_preprocessing._int_normalized_input_eligibility_dates_normalize date_norm\n    on elig.patient_id_key = date_norm.patient_id_key", "relation_name": "dev_coco.claims_preprocessing.normalized_input_eligibility"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.908723Z", "completed_at": "2024-10-11T23:52:36.946248Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.047286Z", "completed_at": "2024-10-11T23:52:37.047303Z"}], "thread_id": "Thread-6", "execution_time": 0.16060709953308105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_pharmacy_claim", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the pharmacy_claim\n-- table in core.\n-- *************************************************\n\n\n\n\nselect\n    cast(claim_id as TEXT) || '-' || cast(claim_line_number as TEXT) as pharmacy_claim_id\n       , cast(claim_id as TEXT ) as claim_id\n       , cast(claim_line_number as integer ) as claim_line_number\n       , cast(patient_id as TEXT ) as patient_id\n       , cast(member_id as TEXT ) as member_id\n       , cast(payer as TEXT ) as payer\n       , plan\n       , cast(prescribing_provider_id as TEXT ) as prescribing_provider_id\n       , cast(prescribing_provider_name as TEXT ) as prescribing_provider_name\n       , cast(dispensing_provider_id as TEXT ) as dispensing_provider_id\n       , cast(dispensing_provider_name as TEXT ) as dispensing_provider_name\n       , cast(dispensing_date as date ) as dispensing_date\n       , cast(ndc_code as TEXT ) as ndc_code\n       , cast(ndc_description as TEXT ) as ndc_description\n       , cast(quantity as integer ) as quantity\n       , cast(days_supply as integer ) as days_supply\n       , cast(refills as integer ) as refills\n       , cast(paid_date as date ) as paid_date\n       , cast(paid_amount as numeric(28,6)) as paid_amount\n       , cast(allowed_amount as numeric(28,6) ) as allowed_amount\n       , cast(charge_amount as numeric(28,6) ) as charge_amount\n       , cast(coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n       , cast(copayment_amount as numeric(28,6) ) as copayment_amount\n       , cast(deductible_amount as numeric(28,6) ) as deductible_amount\n       , cast(in_network_flag as int ) as in_network_flag\n       , cast(data_source as TEXT ) as data_source\n       , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing.normalized_input_pharmacy_claim  pharm", "relation_name": "dev_coco.core._stg_claims_pharmacy_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:35.531603Z", "completed_at": "2024-10-11T23:52:36.748118Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:36.777281Z", "completed_at": "2024-10-11T23:52:36.777289Z"}], "thread_id": "Thread-8", "execution_time": 1.5752441883087158, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__dx_and_px", "compiled": true, "compiled_code": "\n\nwith unpivot_diagnosis as(\n        select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_1' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_1\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_2' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_2\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_3' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_3\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_4' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_4\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_5' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_5\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_6' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_6\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_7' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_7\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_8' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_8\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_9' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_9\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_10' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_10\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_11' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_11\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_12' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_12\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_13' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_13\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_14' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_14\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_15' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_15\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_16' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_16\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_17' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_17\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_18' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_18\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_19' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_19\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_20' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_20\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_21' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_21\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_22' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_22\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_23' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_23\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_24' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_24\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        diagnosis_code_type,\n\n      cast('DIAGNOSIS_CODE_25' as TEXT) as diagnosis_column,\n      cast(  \n           DIAGNOSIS_CODE_25\n             \n           as TEXT) as diagnosis_code\n\n    from tuva.input_layer.medical_claim\n\n    \n)\n, unpivot_procedure as(\n        select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_1' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_1\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_2' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_2\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_3' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_3\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_4' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_4\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_5' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_5\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_6' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_6\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_7' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_7\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_8' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_8\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_9' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_9\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_10' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_10\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_11' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_11\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_12' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_12\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_13' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_13\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_14' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_14\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_15' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_15\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_16' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_16\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_17' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_17\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_18' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_18\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_19' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_19\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_20' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_20\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_21' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_21\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_22' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_22\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_23' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_23\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_24' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_24\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    union all\n    select\n        claim_id,\n        procedure_code_type,\n\n      cast('PROCEDURE_CODE_25' as TEXT) as procedure_column,\n      cast(  \n           PROCEDURE_CODE_25\n             \n           as TEXT) as procedure_code\n\n    from tuva.input_layer.medical_claim\n\n    \n\n\n)\n, total_claims as(\n    select\n        cast(count(claim_id) as integer ) as total_claims\n    from tuva.input_layer.medical_claim\n)\n, claims_with_primary_dx as(\n    select\n        count(diagnosis_code_1) as distinct_claims_with_primary\n    from tuva.input_layer.medical_claim\n)\n\n, claims_with_secondary_dx as(\n    select\n    total_claims\n    , cast(secondary_dx_claim_count as integer ) as secondary_dx_claim_count\n    , (cast(secondary_dx_claim_count as integer ) / cast(total_claims as integer )) * 100 as result_count\n    , 'Percent of claims with secondary diagnosis' as data_quality_check\n    from\n    (\n    select\n        tc.total_claims\n        , cast(count(*) as integer) as secondary_dx_claim_count\n    from unpivot_diagnosis\n    cross join total_claims tc\n    where diagnosis_column <> 'DIAGNOSIS_CODE_1'\n    group by total_claims\n    ) x\n)\n, missing_primary_dx as (\n    select\n        'missing primary diagnosis' as data_quality_check\n        , cast(count(distinct claim_id) as integer ) as result_count\n    from tuva.input_layer.medical_claim m\n    where diagnosis_code_1 is null\n)\n, invalid_primary_dx as(\n    select\n        data_quality_check\n        , count(distinct claim_id) as result_count\n    from (\n    select\n        'invalid primary diagnosis' as data_quality_check\n        , claim_id\n        , diagnosis_code_type\n        , diagnosis_column\n        , diagnosis_code\n        , icd_10_cm\n        , icd_9_cm\n        , case\n            when icd10.icd_10_cm is null and icd9.icd_9_cm is null\n                then 1\n            else 0\n        end as invalid_diagnosis\n    from unpivot_diagnosis dx\n    left join dev_coco.terminology.icd_10_cm icd10\n        on dx.diagnosis_code = icd10.icd_10_cm\n    left join dev_coco.terminology.icd_9_cm icd9\n        on dx.diagnosis_code = icd9.icd_9_cm\n    where diagnosis_column = 'DIAGNOSIS_CODE_1'\n    and diagnosis_code is not null\n    )x\n   where invalid_diagnosis = 1\n    group by\n        data_quality_check\n)\n, multiple_primary_dx as(\n\n    select\n        'multiple primary diagnosis' as data_quality_check\n        , cast(count(*) as integer ) as result_count\n    from\n        (\n            select\n                claim_id\n                , row_number() over (partition by claim_id order by claim_id) as row_nbr\n            from unpivot_diagnosis\n             where diagnosis_column = 'DIAGNOSIS_CODE_1'\n            group by\n                claim_id\n            )x\n    where row_nbr > 1\n\n)\n, invalid_secondary_dx as(\n    select\n        data_quality_check\n        , count(*) as result_count\n    from (\n    select\n        'invalid secondary diagnosis' as data_quality_check\n        , claim_id\n        , case\n            when icd10.icd_10_cm is null and icd9.icd_9_cm is null\n                then 1\n            else 0\n        end as invalid_diagnosis\n    from unpivot_diagnosis dx\n    left join dev_coco.terminology.icd_10_cm icd10\n        on dx.diagnosis_code = icd10.icd_10_cm\n    left join dev_coco.terminology.icd_9_cm icd9\n    on dx.diagnosis_code = icd9.icd_9_cm\n    where diagnosis_column <> 'DIAGNOSIS_CODE_1'\n    and diagnosis_code is not null\n    )x\n    where invalid_diagnosis = 1\n    group by\n        data_quality_check\n)\n\n, invalid_procedure as(\n    select\n        data_quality_check\n        , count(*) as result_count\n    from (\n    select\n        'invalid procedure' as data_quality_check\n        , claim_id\n        , case\n            when icd10.icd_10_pcs is null and icd9.icd_9_pcs is null\n                then 1\n            else 0\n        end as invalid_procedure\n    from unpivot_procedure px\n    left join dev_coco.terminology.icd_10_pcs icd10\n        on px.procedure_code = icd10.icd_10_pcs\n    left join dev_coco.terminology.icd_9_pcs icd9\n    on px.procedure_code = icd9.icd_9_pcs\n    where px.procedure_code is not null\n    )x\n    where invalid_procedure = 1\n    group by\n        data_quality_check\n)\n\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from missing_primary_dx\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from invalid_primary_dx\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from multiple_primary_dx\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from invalid_secondary_dx\nunion all\nselect data_quality_check, result_count, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from claims_with_secondary_dx\nunion all\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from invalid_procedure", "relation_name": "dev_coco.data_quality.dx_and_px"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.063522Z", "completed_at": "2024-10-11T23:52:37.233642Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.284201Z", "completed_at": "2024-10-11T23:52:37.284210Z"}], "thread_id": "Thread-2", "execution_time": 0.35155606269836426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_type_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_admit_type_normalize_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_admit_type_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.961022Z", "completed_at": "2024-10-11T23:52:37.240212Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.285269Z", "completed_at": "2024-10-11T23:52:37.285275Z"}], "thread_id": "Thread-10", "execution_time": 0.3656740188598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_source_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_admit_source_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_admit_source_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.096392Z", "completed_at": "2024-10-11T23:52:37.278846Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.286221Z", "completed_at": "2024-10-11T23:52:37.286227Z"}], "thread_id": "Thread-9", "execution_time": 0.3430042266845703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_apr_drg_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_apr_drg_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_apr_drg_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.271348Z", "completed_at": "2024-10-11T23:52:37.286941Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.293087Z", "completed_at": "2024-10-11T23:52:37.293094Z"}], "thread_id": "Thread-5", "execution_time": 0.34528398513793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_bill_type_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_bill_type_voting\nwhere occurrence_row_count = 1", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_bill_type_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.948497Z", "completed_at": "2024-10-11T23:52:37.287550Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.293924Z", "completed_at": "2024-10-11T23:52:37.293929Z"}], "thread_id": "Thread-3", "execution_time": 0.374622106552124, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__data_quality_claims_detail", "compiled": true, "compiled_code": "\n\nWITH unioned_data as (\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_allowed_amount\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_charge_amount\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_claim_id\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_claim_line_end_date\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_claim_line_number\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_claim_line_start_date\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_claim_type\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_coninsurance_amount\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_copayment_amount\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_data_source\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_deductible_amount\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_diagnosis_code_type\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_hcpcs_code\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_member_id\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_paid_amount\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_paid_date\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_patient_id\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_payer\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_plan\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.claim_total_cost_amount\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_address\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_birth_date\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_city\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_data_source\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_death_date\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_death_flag\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_dual_status_code\n\nunion all\n\nSELECT\n    cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_end_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_first_name\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_gender\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_last_name\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_medicare_status_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_member_id\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_original_reason_entitlement_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_patient_id\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_payer_type\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_payer\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_phone\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_plan\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_race\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_start_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_state\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.eligibility_zip_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_ms_drg_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_admission_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_admit_source_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_admit_type_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_apr_drg_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_bill_type_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_billing_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_claim_end_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_claim_start_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_diagnosis_code_1\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_diagnosis_code_2\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_diagnosis_code_3\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_discharge_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_discharge_disposition_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_facility_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_present_on_admission_1\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_present_on_admission_2\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_present_on_admission_3\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_procedure_code_1\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_procedure_code_2\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_procedure_code_3\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_procedure_date_1\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_procedure_date_2\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_procedure_date_3\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_rendering_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_revenue_center_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.institutional_service_unit_quantity\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_allowed_amount\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_claim_id\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_claim_line_number\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_coinsurance_amount\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_copayment_amount\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_data_source\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_days_supply\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_deductible_amount\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_dispensing_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_dispensing_provider_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_member_id\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_ndc_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_paid_amount\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_paid_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_patient_id\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_payer\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_plan\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_prescribing_provider_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_quantity\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.pharmacy_refills\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.professional_billing_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.professional_facility_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.professional_place_of_service_code\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.professional_rendering_npi\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.professional_claim_end_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.professional_claim_start_date\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.professional_diagnosis_code_1\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.professional_diagnosis_code_2\n\nunion all\n\nSELECT     cast(data_source as TEXT) as data_source\n\t, cast(source_date as TEXT) as source_date\n\t, cast(table_name as TEXT) as table_name\n\t, cast(drill_down_key as TEXT) as drill_down_key\n\t, cast(drill_down_value as TEXT) as drill_down_value\n\t, cast(claim_type as TEXT) as claim_type\n\t, cast(field_name as TEXT) as field_name\n\t, cast(bucket_name as TEXT) as bucket_name\n\t, cast(invalid_reason as TEXT) as invalid_reason\n\t, cast(field_value as TEXT) as field_value\n\t, cast(tuva_last_run as TEXT) as tuva_last_run\n\tFROM dev_coco.data_quality.professional_diagnosis_code_3\n\n)\n\n\nselect\n    cast(data_source as TEXT) as data_source\n  , cast(source_date as TEXT) as source_date\n  , cast(table_name as TEXT) as table_name\n  , cast(drill_down_key as TEXT) as drill_down_key\n  , cast(drill_down_value as TEXT) as drill_down_value\n  , cast(claim_type as TEXT) as claim_type\n  , cast(field_name as TEXT) as field_name\n  , cast(bucket_name as TEXT) as bucket_name\n  , cast(invalid_reason as TEXT) as invalid_reason\n  , cast(field_value as TEXT) as field_value\n  , cast(tuva_last_run as TEXT) as tuva_last_run\n  , dense_rank() over (\n        order by data_source\n               , table_name\n               , claim_type\n               , field_name\n    ) as summary_sk\nfrom unioned_data", "relation_name": "dev_coco.data_quality.data_quality_claims_detail"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.279364Z", "completed_at": "2024-10-11T23:52:37.288125Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.299158Z", "completed_at": "2024-10-11T23:52:37.299164Z"}], "thread_id": "Thread-4", "execution_time": 0.20995688438415527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_voting", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , diagnosis_column\n        , count(*) as distinct_count\n        , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n    from dev_coco.claims_preprocessing._int_normalized_input_diagnosis_code_normalize\n    group by\n        claim_id\n        , data_source\n        , diagnosis_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.diagnosis_column as column_name\n    , norm.normalized_diagnosis_code as normalized_code\n    , norm.diagnosis_code_occurrence_count as occurrence_count\n    , coalesce(lead(diagnosis_code_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by diagnosis_code_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by diagnosis_code_occurrence_count desc) as occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_diagnosis_code_normalize norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.diagnosis_column = dist.diagnosis_column", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_diagnosis_code_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.288699Z", "completed_at": "2024-10-11T23:52:37.300659Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.303014Z", "completed_at": "2024-10-11T23:52:37.303019Z"}], "thread_id": "Thread-6", "execution_time": 0.024557113647460938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_discharge_disposition_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_discharge_disposition_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.294383Z", "completed_at": "2024-10-11T23:52:37.302470Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.318301Z", "completed_at": "2024-10-11T23:52:37.318309Z"}], "thread_id": "Thread-8", "execution_time": 0.0334320068359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_medical_date_aggregation", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , min(normalized_claim_start_date) as minimum_claim_start_date\n    , max(normalized_claim_end_date) as maximum_claim_end_date\n    , min(normalized_admission_date) as minimum_admission_date\n    , max(normalized_discharge_date) as maximum_discharge_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_medical_claim_date_normalize\nwhere claim_type = 'institutional'\ngroup by\n    claim_id\n    , data_source\n\nunion all\n\nselect\n    claim_id\n    , data_source\n    , min(normalized_claim_start_date) as minimum_claim_start_date\n    , max(normalized_claim_end_date) as maximum_claim_end_date\n    , null as minimum_admission_date\n    , null as maximum_discharge_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_medical_claim_date_normalize\nwhere claim_type = 'professional'\ngroup by\n    claim_id\n    , data_source", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_medical_date_aggregation"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.303470Z", "completed_at": "2024-10-11T23:52:37.320092Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.344677Z", "completed_at": "2024-10-11T23:52:37.344686Z"}], "thread_id": "Thread-2", "execution_time": 0.0511469841003418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_ms_drg_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , normalized_description\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_ms_drg_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_ms_drg_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.312706Z", "completed_at": "2024-10-11T23:52:37.325595Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.345567Z", "completed_at": "2024-10-11T23:52:37.345573Z"}], "thread_id": "Thread-9", "execution_time": 0.04565691947937012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_code_voting", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , procedure_column\n        , count(*) as distinct_count\n        , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n    from dev_coco.claims_preprocessing._int_normalized_input_procedure_code_normalize\n    group by\n        claim_id\n        , data_source\n        , procedure_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.procedure_column as column_name\n    , norm.normalized_procedure_code as normalized_code\n    , norm.procedure_code_occurrence_count as occurrence_count\n    , coalesce(lead(procedure_code_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_code_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_code_occurrence_count desc) as occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_procedure_code_normalize norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.procedure_column = dist.procedure_column", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_procedure_code_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.307956Z", "completed_at": "2024-10-11T23:52:37.325871Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.346075Z", "completed_at": "2024-10-11T23:52:37.346079Z"}], "thread_id": "Thread-10", "execution_time": 0.04649782180786133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_present_on_admit_voting", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , diagnosis_column\n        , count(*) as distinct_count\n        , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n    from dev_coco.claims_preprocessing._int_normalized_input_present_on_admit_normalize\n    group by\n        claim_id\n        , data_source\n        , diagnosis_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.diagnosis_column as column_name\n    , norm.normalized_present_on_admit_code as normalized_code\n    , norm.present_on_admit_occurrence_count as occurrence_count\n    , coalesce(lead(present_on_admit_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by present_on_admit_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by present_on_admit_occurrence_count desc) as occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_present_on_admit_normalize norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.diagnosis_column = dist.diagnosis_column", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_present_on_admit_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.320786Z", "completed_at": "2024-10-11T23:52:37.346872Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.353486Z", "completed_at": "2024-10-11T23:52:37.353494Z"}], "thread_id": "Thread-5", "execution_time": 0.0508570671081543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_date_voting", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , procedure_column\n        , count(*) as distinct_count\n        , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n    from dev_coco.claims_preprocessing._int_normalized_input_procedure_date_normalize\n    group by\n        claim_id\n        , data_source\n        , procedure_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.procedure_column as column_name\n    , norm.procedure_date as normalized_code\n    , norm.procedure_date_occurrence_count as occurrence_count\n    , coalesce(lead(procedure_date_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_date_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_date_occurrence_count desc) as occurrence_row_count\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_procedure_date_normalize norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.procedure_column = dist.procedure_column", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_procedure_date_voting"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.326467Z", "completed_at": "2024-10-11T23:52:37.348379Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.361695Z", "completed_at": "2024-10-11T23:52:37.361702Z"}], "thread_id": "Thread-3", "execution_time": 0.05439305305480957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_eligibility", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the eligibility table in core.\n-- *************************************************\n\n\n\n\nselect\n       member_id || '-' || enrollment_start_date || '-' || enrollment_end_date || '-' || payer || '-' || plan as eligibility_id\n       , cast(patient_id as TEXT ) as patient_id\n       , cast(member_id as TEXT ) as member_id\n       , cast(subscriber_id as TEXT ) as subscriber_id\n       , cast(birth_date as date) as birth_date\n       , cast(death_date as date) as death_date\n       , cast(enrollment_start_date as date ) as enrollment_start_date\n       , cast(enrollment_end_date as date ) as enrollment_end_date\n       , cast(payer as TEXT ) as payer\n       , cast(payer_type as TEXT ) as payer_type\n       , plan\n       , cast(original_reason_entitlement_code as TEXT ) as original_reason_entitlement_code\n       , cast(dual_status_code as TEXT ) as dual_status_code\n       , cast(medicare_status_code as TEXT ) as medicare_status_code\n       , cast(subscriber_relation as TEXT ) as subscriber_relation\n       , cast(data_source as TEXT ) as data_source\n       , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing.normalized_input_eligibility", "relation_name": "dev_coco.core._stg_claims_eligibility"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.332808Z", "completed_at": "2024-10-11T23:52:37.348744Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.362202Z", "completed_at": "2024-10-11T23:52:37.362208Z"}], "thread_id": "Thread-4", "execution_time": 0.05460810661315918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_patient", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the patient table in core.\n-- *************************************************\n\nwith patient_stage as(\n    select\n        patient_id\n        ,first_name\n        ,last_name\n        ,gender\n        ,race\n        ,birth_date\n        ,death_date\n        ,death_flag\n        ,social_security_number\n        ,address\n        ,city\n        ,state\n        ,zip_code\n        ,phone\n        ,data_source\n        ,row_number() over (\n\t        partition by patient_id\n\t        order by case when enrollment_end_date is null\n                then cast ('2050-01-01' as date)\n                else enrollment_end_date end DESC)\n            as row_sequence\n        , cast('2024-10-11 23:52:28.343846+00:00' as timestamp) as tuva_last_run_datetime\n        , cast(substring('2024-10-11 23:52:28.343846+00:00',1,10) as date) as tuva_last_run_date\n    from dev_coco.claims_preprocessing.normalized_input_eligibility\n)\n\nselect\n    cast(patient_id as TEXT) as patient_id\n    , cast(first_name as TEXT) as first_name\n    , cast(last_name as TEXT) as last_name\n    , cast(gender as TEXT) as sex\n    , cast(race as TEXT) as race\n    , cast(birth_date as date) as birth_date\n    , cast(death_date as date) as death_date\n    , cast(death_flag as int) as death_flag\n    , cast(social_security_number as TEXT) as social_security_number\n    , cast(address as TEXT) as address\n    , cast(city as TEXT) as city\n    , cast(state as TEXT) as state\n    , cast(zip_code as TEXT) as zip_code\n    , cast(null as TEXT) as county\n    , cast(null as float) as latitude \n    , cast(null as float) as longitude\n    , cast(data_source as TEXT) as data_source\n    , cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) as age\n    , cast(\n        CASE\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 10 THEN '0-9'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 20 THEN '10-19'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 30 THEN '20-29'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 40 THEN '30-39'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 50 THEN '40-49'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 60 THEN '50-59'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 70 THEN '60-69'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 80 THEN '70-79'\n            WHEN cast(floor(datediff(\n        hour,\n        birth_date,\n        tuva_last_run_date\n        ) / 8760.0) as integer ) < 90 THEN '80-89'\n            ELSE '90+'\n        END as TEXT\n    ) AS age_group\n    , tuva_last_run_datetime as tuva_last_run\nfrom patient_stage\nwhere row_sequence = 1", "relation_name": "dev_coco.core._stg_claims_patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.349529Z", "completed_at": "2024-10-11T23:52:37.364062Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.376161Z", "completed_at": "2024-10-11T23:52:37.376169Z"}], "thread_id": "Thread-6", "execution_time": 0.05010366439819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__pharmacy_claim", "compiled": true, "compiled_code": "\n\nselect * from dev_coco.core._stg_claims_pharmacy_claim", "relation_name": "dev_coco.core.pharmacy_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.354340Z", "completed_at": "2024-10-11T23:52:37.365281Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.382216Z", "completed_at": "2024-10-11T23:52:37.382223Z"}], "thread_id": "Thread-8", "execution_time": 0.03709578514099121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__data_quality_claims_for_pbi", "compiled": true, "compiled_code": "\n\nWITH ranked_examples as (\n       select\n       summary_sk,\n       data_source,\n       table_name,\n       claim_type,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       drill_down_value as drill_down_value, --all claims\n       field_value as field_value,\n       count(drill_down_value) as frequency,\n       row_number() over (partition by summary_sk, bucket_name, field_value order by field_value) as rn\n       , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM dev_coco.data_quality.data_quality_claims_detail\nWHERE bucket_name not in ('valid', 'null')\nGROUP BY\n       data_source,\n       field_name,\n       table_name,\n       claim_type,\n       bucket_name,\n       field_value,\n       drill_down_key,\n       drill_down_value,\n       invalid_reason,\n       summary_sk\n)\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       claim_type,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       max(drill_down_value) as drill_down_value, --1 sample claim\n       null as field_value,\n       count(drill_down_value) as frequency\n       , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM dev_coco.data_quality.data_quality_claims_detail\nWHERE bucket_name = 'null'\nGROUP BY\n       data_source,\n       field_name,\n       table_name,\n       claim_type,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       summary_sk\n\nunion all\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       claim_type,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       max(drill_down_value) as drill_down_value, --1 sample claim\n       field_value as field_value,\n       count(drill_down_value) as frequency\n       , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM dev_coco.data_quality.data_quality_claims_detail\nWHERE bucket_name = 'valid'\nGROUP BY\n       data_source,\n       field_name,\n       table_name,\n       claim_type,\n       bucket_name,\n       field_value,\n       invalid_reason,\n       drill_down_key,\n       summary_sk\n\nunion all\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       claim_type,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       drill_down_value as drill_down_value,\n       field_value as field_value,\n       frequency\n       , '2024-10-11 23:52:28.343846+00:00'\nFROM ranked_examples\nWHERE rn <= 5 -- 5 Example claims per unique SK / field value\nunion all\nSELECT\n       summary_sk,\n       data_source,\n       table_name,\n       claim_type,\n       field_name,\n       bucket_name,\n       invalid_reason,\n       drill_down_key,\n       'All Others' as drill_down_value,\n       field_value as field_value,\n       sum(frequency) as frequency\n       , '2024-10-11 23:52:28.343846+00:00'\nFROM ranked_examples\nWHERE rn > 5 -- Aggregating all other rows\nGROUP BY\n    summary_sk,\n    data_source,\n    table_name,\n    claim_type,\n    field_name,\n    bucket_name,\n    invalid_reason,\n    drill_down_key,\n    field_value", "relation_name": "dev_coco.data_quality.data_quality_claims_for_pbi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.372166Z", "completed_at": "2024-10-11T23:52:37.385430Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.399303Z", "completed_at": "2024-10-11T23:52:37.399311Z"}], "thread_id": "Thread-9", "execution_time": 0.038043975830078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , max(case when lower(column_name) = 'diagnosis_code_1' then normalized_code else null end) as diagnosis_code_1\n    , max(case when lower(column_name) = 'diagnosis_code_2' then normalized_code else null end) as diagnosis_code_2\n    , max(case when lower(column_name) = 'diagnosis_code_3' then normalized_code else null end) as diagnosis_code_3\n    , max(case when lower(column_name) = 'diagnosis_code_4' then normalized_code else null end) as diagnosis_code_4\n    , max(case when lower(column_name) = 'diagnosis_code_5' then normalized_code else null end) as diagnosis_code_5\n    , max(case when lower(column_name) = 'diagnosis_code_6' then normalized_code else null end) as diagnosis_code_6\n    , max(case when lower(column_name) = 'diagnosis_code_7' then normalized_code else null end) as diagnosis_code_7\n    , max(case when lower(column_name) = 'diagnosis_code_8' then normalized_code else null end) as diagnosis_code_8\n    , max(case when lower(column_name) = 'diagnosis_code_9' then normalized_code else null end) as diagnosis_code_9\n    , max(case when lower(column_name) = 'diagnosis_code_10' then normalized_code else null end) as diagnosis_code_10\n    , max(case when lower(column_name) = 'diagnosis_code_11' then normalized_code else null end) as diagnosis_code_11\n    , max(case when lower(column_name) = 'diagnosis_code_12' then normalized_code else null end) as diagnosis_code_12\n    , max(case when lower(column_name) = 'diagnosis_code_13' then normalized_code else null end) as diagnosis_code_13\n    , max(case when lower(column_name) = 'diagnosis_code_14' then normalized_code else null end) as diagnosis_code_14\n    , max(case when lower(column_name) = 'diagnosis_code_15' then normalized_code else null end) as diagnosis_code_15\n    , max(case when lower(column_name) = 'diagnosis_code_16' then normalized_code else null end) as diagnosis_code_16\n    , max(case when lower(column_name) = 'diagnosis_code_17' then normalized_code else null end) as diagnosis_code_17\n    , max(case when lower(column_name) = 'diagnosis_code_18' then normalized_code else null end) as diagnosis_code_18\n    , max(case when lower(column_name) = 'diagnosis_code_19' then normalized_code else null end) as diagnosis_code_19\n    , max(case when lower(column_name) = 'diagnosis_code_20' then normalized_code else null end) as diagnosis_code_20\n    , max(case when lower(column_name) = 'diagnosis_code_21' then normalized_code else null end) as diagnosis_code_21\n    , max(case when lower(column_name) = 'diagnosis_code_22' then normalized_code else null end) as diagnosis_code_22\n    , max(case when lower(column_name) = 'diagnosis_code_23' then normalized_code else null end) as diagnosis_code_23\n    , max(case when lower(column_name) = 'diagnosis_code_24' then normalized_code else null end) as diagnosis_code_24\n    , max(case when lower(column_name) = 'diagnosis_code_25' then normalized_code else null end) as diagnosis_code_25\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_diagnosis_code_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_diagnosis_code_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.365879Z", "completed_at": "2024-10-11T23:52:37.385669Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.399807Z", "completed_at": "2024-10-11T23:52:37.399811Z"}], "thread_id": "Thread-2", "execution_time": 0.04584312438964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__data_quality_detail", "compiled": true, "compiled_code": "\n\nSELECT\n    data_source,\n\tsource_date,\n\ttable_name,\n\tdrill_down_key,\n\tdrill_down_value,\n\tclaim_type,\n\tfield_name,\n\tbucket_name,\n\tinvalid_reason,\n\tfield_value,\n\tsummary_sk,\n\t'2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM dev_coco.data_quality.data_quality_claims_detail\n\nunion all\n\nSELECT\n    data_source,\n\tsource_date,\n\ttable_name,\n\tdrill_down_key,\n\tdrill_down_value,\n\t'CLINICAL' AS claim_type,\n\tfield_name,\n\tbucket_name,\n\tinvalid_reason,\n\tfield_value,\n\tsummary_sk,\n\t'2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM dev_coco.data_quality.data_quality_clinical_detail\n\n", "relation_name": "dev_coco.data_quality.data_quality_detail"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.377572Z", "completed_at": "2024-10-11T23:52:37.390525Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.400678Z", "completed_at": "2024-10-11T23:52:37.400683Z"}], "thread_id": "Thread-10", "execution_time": 0.03806018829345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_code_final", "compiled": true, "compiled_code": "\n\nselect\n    claim_id\n    , data_source\n    , max(case when lower(column_name) = 'procedure_code_1' then normalized_code else null end) as procedure_code_1\n    , max(case when lower(column_name) = 'procedure_code_2' then normalized_code else null end) as procedure_code_2\n    , max(case when lower(column_name) = 'procedure_code_3' then normalized_code else null end) as procedure_code_3\n    , max(case when lower(column_name) = 'procedure_code_4' then normalized_code else null end) as procedure_code_4\n    , max(case when lower(column_name) = 'procedure_code_5' then normalized_code else null end) as procedure_code_5\n    , max(case when lower(column_name) = 'procedure_code_6' then normalized_code else null end) as procedure_code_6\n    , max(case when lower(column_name) = 'procedure_code_7' then normalized_code else null end) as procedure_code_7\n    , max(case when lower(column_name) = 'procedure_code_8' then normalized_code else null end) as procedure_code_8\n    , max(case when lower(column_name) = 'procedure_code_9' then normalized_code else null end) as procedure_code_9\n    , max(case when lower(column_name) = 'procedure_code_10' then normalized_code else null end) as procedure_code_10\n    , max(case when lower(column_name) = 'procedure_code_11' then normalized_code else null end) as procedure_code_11\n    , max(case when lower(column_name) = 'procedure_code_12' then normalized_code else null end) as procedure_code_12\n    , max(case when lower(column_name) = 'procedure_code_13' then normalized_code else null end) as procedure_code_13\n    , max(case when lower(column_name) = 'procedure_code_14' then normalized_code else null end) as procedure_code_14\n    , max(case when lower(column_name) = 'procedure_code_15' then normalized_code else null end) as procedure_code_15\n    , max(case when lower(column_name) = 'procedure_code_16' then normalized_code else null end) as procedure_code_16\n    , max(case when lower(column_name) = 'procedure_code_17' then normalized_code else null end) as procedure_code_17\n    , max(case when lower(column_name) = 'procedure_code_18' then normalized_code else null end) as procedure_code_18\n    , max(case when lower(column_name) = 'procedure_code_19' then normalized_code else null end) as procedure_code_19\n    , max(case when lower(column_name) = 'procedure_code_20' then normalized_code else null end) as procedure_code_20\n    , max(case when lower(column_name) = 'procedure_code_21' then normalized_code else null end) as procedure_code_21\n    , max(case when lower(column_name) = 'procedure_code_22' then normalized_code else null end) as procedure_code_22\n    , max(case when lower(column_name) = 'procedure_code_23' then normalized_code else null end) as procedure_code_23\n    , max(case when lower(column_name) = 'procedure_code_24' then normalized_code else null end) as procedure_code_24\n    , max(case when lower(column_name) = 'procedure_code_25' then normalized_code else null end) as procedure_code_25\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_procedure_code_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_procedure_code_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.386253Z", "completed_at": "2024-10-11T23:52:37.401484Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.409790Z", "completed_at": "2024-10-11T23:52:37.409799Z"}], "thread_id": "Thread-5", "execution_time": 0.04431509971618652, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_present_on_admit_final", "compiled": true, "compiled_code": "\n\nselect\n    claim_id\n    , data_source\n    , max(case when column_name = 'DIAGNOSIS_POA_1' then normalized_code else null end) as diagnosis_poa_1\n    , max(case when column_name = 'DIAGNOSIS_POA_2' then normalized_code else null end) as diagnosis_poa_2\n    , max(case when column_name = 'DIAGNOSIS_POA_3' then normalized_code else null end) as diagnosis_poa_3\n    , max(case when column_name = 'DIAGNOSIS_POA_4' then normalized_code else null end) as diagnosis_poa_4\n    , max(case when column_name = 'DIAGNOSIS_POA_5' then normalized_code else null end) as diagnosis_poa_5\n    , max(case when column_name = 'DIAGNOSIS_POA_6' then normalized_code else null end) as diagnosis_poa_6\n    , max(case when column_name = 'DIAGNOSIS_POA_7' then normalized_code else null end) as diagnosis_poa_7\n    , max(case when column_name = 'DIAGNOSIS_POA_8' then normalized_code else null end) as diagnosis_poa_8\n    , max(case when column_name = 'DIAGNOSIS_POA_9' then normalized_code else null end) as diagnosis_poa_9\n    , max(case when column_name = 'DIAGNOSIS_POA_10' then normalized_code else null end) as diagnosis_poa_10\n    , max(case when column_name = 'DIAGNOSIS_POA_11' then normalized_code else null end) as diagnosis_poa_11\n    , max(case when column_name = 'DIAGNOSIS_POA_12' then normalized_code else null end) as diagnosis_poa_12\n    , max(case when column_name = 'DIAGNOSIS_POA_13' then normalized_code else null end) as diagnosis_poa_13\n    , max(case when column_name = 'DIAGNOSIS_POA_14' then normalized_code else null end) as diagnosis_poa_14\n    , max(case when column_name = 'DIAGNOSIS_POA_15' then normalized_code else null end) as diagnosis_poa_15\n    , max(case when column_name = 'DIAGNOSIS_POA_16' then normalized_code else null end) as diagnosis_poa_16\n    , max(case when column_name = 'DIAGNOSIS_POA_17' then normalized_code else null end) as diagnosis_poa_17\n    , max(case when column_name = 'DIAGNOSIS_POA_18' then normalized_code else null end) as diagnosis_poa_18\n    , max(case when column_name = 'DIAGNOSIS_POA_19' then normalized_code else null end) as diagnosis_poa_19\n    , max(case when column_name = 'DIAGNOSIS_POA_20' then normalized_code else null end) as diagnosis_poa_20\n    , max(case when column_name = 'DIAGNOSIS_POA_21' then normalized_code else null end) as diagnosis_poa_21\n    , max(case when column_name = 'DIAGNOSIS_POA_22' then normalized_code else null end) as diagnosis_poa_22\n    , max(case when column_name = 'DIAGNOSIS_POA_23' then normalized_code else null end) as diagnosis_poa_23\n    , max(case when column_name = 'DIAGNOSIS_POA_24' then normalized_code else null end) as diagnosis_poa_24\n    , max(case when column_name = 'DIAGNOSIS_POA_25' then normalized_code else null end) as diagnosis_poa_25\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_present_on_admit_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_present_on_admit_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.391129Z", "completed_at": "2024-10-11T23:52:37.402072Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.410482Z", "completed_at": "2024-10-11T23:52:37.410488Z"}], "thread_id": "Thread-3", "execution_time": 0.033911705017089844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_date_final", "compiled": true, "compiled_code": "\n\nselect\n    claim_id\n    , data_source\n    , max(case when lower(column_name) = 'procedure_date_1' then normalized_code else null end) as procedure_date_1\n    , max(case when lower(column_name) = 'procedure_date_2' then normalized_code else null end) as procedure_date_2\n    , max(case when lower(column_name) = 'procedure_date_3' then normalized_code else null end) as procedure_date_3\n    , max(case when lower(column_name) = 'procedure_date_4' then normalized_code else null end) as procedure_date_4\n    , max(case when lower(column_name) = 'procedure_date_5' then normalized_code else null end) as procedure_date_5\n    , max(case when lower(column_name) = 'procedure_date_6' then normalized_code else null end) as procedure_date_6\n    , max(case when lower(column_name) = 'procedure_date_7' then normalized_code else null end) as procedure_date_7\n    , max(case when lower(column_name) = 'procedure_date_8' then normalized_code else null end) as procedure_date_8\n    , max(case when lower(column_name) = 'procedure_date_9' then normalized_code else null end) as procedure_date_9\n    , max(case when lower(column_name) = 'procedure_date_10' then normalized_code else null end) as procedure_date_10\n    , max(case when lower(column_name) = 'procedure_date_11' then normalized_code else null end) as procedure_date_11\n    , max(case when lower(column_name) = 'procedure_date_12' then normalized_code else null end) as procedure_date_12\n    , max(case when lower(column_name) = 'procedure_date_13' then normalized_code else null end) as procedure_date_13\n    , max(case when lower(column_name) = 'procedure_date_14' then normalized_code else null end) as procedure_date_14\n    , max(case when lower(column_name) = 'procedure_date_15' then normalized_code else null end) as procedure_date_15\n    , max(case when lower(column_name) = 'procedure_date_16' then normalized_code else null end) as procedure_date_16\n    , max(case when lower(column_name) = 'procedure_date_17' then normalized_code else null end) as procedure_date_17\n    , max(case when lower(column_name) = 'procedure_date_18' then normalized_code else null end) as procedure_date_18\n    , max(case when lower(column_name) = 'procedure_date_19' then normalized_code else null end) as procedure_date_19\n    , max(case when lower(column_name) = 'procedure_date_20' then normalized_code else null end) as procedure_date_20\n    , max(case when lower(column_name) = 'procedure_date_21' then normalized_code else null end) as procedure_date_21\n    , max(case when lower(column_name) = 'procedure_date_22' then normalized_code else null end) as procedure_date_22\n    , max(case when lower(column_name) = 'procedure_date_23' then normalized_code else null end) as procedure_date_23\n    , max(case when lower(column_name) = 'procedure_date_24' then normalized_code else null end) as procedure_date_24\n    , max(case when lower(column_name) = 'procedure_date_25' then normalized_code else null end) as procedure_date_25\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing._int_normalized_input_procedure_date_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "relation_name": "dev_coco.claims_preprocessing._int_normalized_input_procedure_date_final"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.396204Z", "completed_at": "2024-10-11T23:52:37.403438Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.411868Z", "completed_at": "2024-10-11T23:52:37.411873Z"}], "thread_id": "Thread-4", "execution_time": 0.03497505187988281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__eligibility", "compiled": true, "compiled_code": "\n\n\nselect * from dev_coco.core._stg_claims_eligibility", "relation_name": "dev_coco.core.eligibility"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.404246Z", "completed_at": "2024-10-11T23:52:37.417747Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.424108Z", "completed_at": "2024-10-11T23:52:37.424114Z"}], "thread_id": "Thread-6", "execution_time": 0.03337287902832031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__patient", "compiled": true, "compiled_code": "\n\nselect * from dev_coco.core._stg_claims_patient\nunion all\nselect * from dev_coco.core._stg_clinical_patient\n\n", "relation_name": "dev_coco.core.patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.432805Z", "completed_at": "2024-10-11T23:52:37.441975Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.454802Z", "completed_at": "2024-10-11T23:52:37.454808Z"}], "thread_id": "Thread-10", "execution_time": 0.03854799270629883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__stg_pharmacy_claim", "compiled": true, "compiled_code": "\n\nselect mc.*,\ncast(c.year_month_int as TEXT) as year_month\nFROM dev_coco.core.pharmacy_claim  mc\nleft join dev_coco.reference_data.calendar c on coalesce(mc.paid_date,mc.dispensing_date) = c.full_date", "relation_name": "dev_coco.data_quality.mart_review__stg_pharmacy_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.451130Z", "completed_at": "2024-10-11T23:52:37.457785Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.470936Z", "completed_at": "2024-10-11T23:52:37.470942Z"}], "thread_id": "Thread-4", "execution_time": 0.03852987289428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__pharmacy_claim_pharmacy_claim_id.a91e86c79c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    pharmacy_claim_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.core.pharmacy_claim\nwhere pharmacy_claim_id is not null\ngroup by pharmacy_claim_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.458361Z", "completed_at": "2024-10-11T23:52:37.472358Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.539084Z", "completed_at": "2024-10-11T23:52:37.539093Z"}], "thread_id": "Thread-8", "execution_time": 0.09046125411987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__data_quality_for_pbi", "compiled": true, "compiled_code": "\n\nSELECT\n    data_source,\n    field_name,\n    table_name,\n    claim_type,\n    bucket_name,\n    field_value,\n    drill_down_key,\n    drill_down_value,\n    invalid_reason,\n    summary_sk,\n    frequency,\n\t'2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM dev_coco.data_quality.data_quality_claims_for_pbi\n\nunion all\n\nSELECT\n    data_source,\n    field_name,\n    table_name,\n    'CLINICAL' AS claim_type,\n    bucket_name,\n    field_value,\n    drill_down_key,\n    drill_down_value,\n    invalid_reason,\n    summary_sk,\n    frequency,\n\t'2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM dev_coco.data_quality.data_quality_clinical_for_pbi\n\n", "relation_name": "dev_coco.data_quality.data_quality_for_pbi"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.464957Z", "completed_at": "2024-10-11T23:52:37.476520Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.577315Z", "completed_at": "2024-10-11T23:52:37.577324Z"}], "thread_id": "Thread-6", "execution_time": 0.12658095359802246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__crosswalk_field_to_mart_sk", "compiled": true, "compiled_code": "\n\n\n\nwith results as (\n\n    select distinct\n        table_name as input_layer_table_name\n      , claim_type\n      , field_name\n      , cast(NULL as TEXT) AS mart_name\n    from dev_coco.data_quality.data_quality_detail\n\n    union all\n\n    select\n        input_layer_table_name\n      , claim_type\n      , field_name\n      , mart_name\n    from dev_coco.data_quality._value_set_crosswalk_field_to_mart\n\n)\n\n, final as (\n\n    select\n        input_layer_table_name\n      , claim_type\n      , field_name\n      , mart_name\n      , DENSE_RANK () OVER (ORDER BY input_layer_table_name, claim_type, field_name) as table_claim_type_field_sk\n\t, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n    from results\n    group by\n        input_layer_table_name\n      , claim_type\n      , field_name\n      , mart_name\n\n)\n\nselect * from final", "relation_name": "dev_coco.dev_coco.data_quality__crosswalk_field_to_mart_sk"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.472620Z", "completed_at": "2024-10-11T23:52:37.596556Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.704687Z", "completed_at": "2024-10-11T23:52:37.704697Z"}], "thread_id": "Thread-9", "execution_time": 0.24762225151062012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__quality_trend", "compiled": true, "compiled_code": "\n\n\nwith cte as (\nselect try_cast( d.source_date as date ) as source_date_type\n    ,summary_sk\n    ,SUM(CASE WHEN bucket_name = 'valid' THEN 1 ELSE 0 END) as valid_num\n    ,SUM(CASE WHEN bucket_name <> 'null' THEN 1 ELSE 0 END) as fill_num\n    ,COUNT(drill_down_value) as denom\nfrom dev_coco.data_quality.data_quality_detail d\ngroup by\n    try_cast( d.source_date as date )\n    ,summary_sk\n\n)\n\nselect\n      c.first_day_of_month\n    , summary_sk\n    , sum(valid_num) as valid_num\n    , sum(fill_num) as fill_num\n    , sum(denom)  as denom\nfrom cte\nleft join dev_coco.reference_data.calendar c on cte.source_date_type = c.full_date\ngroup by\n      c.first_day_of_month\n    , summary_sk", "relation_name": "dev_coco.data_quality.quality_trend"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.615916Z", "completed_at": "2024-10-11T23:52:37.744426Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.750182Z", "completed_at": "2024-10-11T23:52:37.750190Z"}], "thread_id": "Thread-5", "execution_time": 0.2785639762878418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__member_months", "compiled": true, "compiled_code": "\n\n\n\nwith  __dbt__cte__financial_pmpm__stg_provider_attribution as (\n\n\nselect\n         cast(patient_id as TEXT ) as patient_id\n       , cast(year_month as TEXT ) as year_month\n       , cast(payer as TEXT ) as payer\n       , plan\n       , cast(data_source as TEXT ) as data_source\n       \n       , cast(payer_attributed_provider as TEXT )\n                   as payer_attributed_provider\n       , cast(payer_attributed_provider_practice as TEXT )\n                   as payer_attributed_provider_practice\n       , cast(payer_attributed_provider_organization as TEXT )\n                   as payer_attributed_provider_organization\n       , cast(payer_attributed_provider_lob as TEXT )\n                   as payer_attributed_provider_lob\n\n       , cast(custom_attributed_provider as TEXT )\n                   as custom_attributed_provider\n       , cast(custom_attributed_provider_practice as TEXT )\n                   as custom_attributed_provider_practice\n       , cast(custom_attributed_provider_organization as TEXT )\n                   as custom_attributed_provider_organization\n       , cast(custom_attributed_provider_lob as TEXT )\n                   as custom_attributed_provider_lob\n\n       , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n       \nfrom tuva.input_layer.provider_attribution\n), month_start_and_end_dates as (\n  select\n    year || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || month,\n            2\n        )\n    end as year_month\n    , min(full_date) as month_start_date\n    , max(full_date) as month_end_date\n  from dev_coco.reference_data.calendar\n  group by year, month, year_month\n),\n\n\nfinal_before_attribution_fields as (\nselect distinct\n    a.patient_id\n  , year_month\n  , a.payer\n  , a.plan\n  , data_source\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.eligibility a\ninner join month_start_and_end_dates b\n  on a.enrollment_start_date <= b.month_end_date\n  and a.enrollment_end_date >= b.month_start_date\n),\n\n\nadd_attribution_fields as (\nselect\n    a.patient_id\n  , a.year_month\n  , a.payer\n  , a.plan\n  , a.data_source\n  , a.tuva_last_run\n  \n  , b.payer_attributed_provider\n  , b.payer_attributed_provider_practice\n  , b.payer_attributed_provider_organization\n  , b.payer_attributed_provider_lob\n  , b.custom_attributed_provider\n  , b.custom_attributed_provider_practice\n  , b.custom_attributed_provider_organization\n  , b.custom_attributed_provider_lob\n\nfrom final_before_attribution_fields a\nleft join __dbt__cte__financial_pmpm__stg_provider_attribution b\non a.patient_id = b.patient_id\nand a.year_month = b.year_month\nand a.payer = b.payer\nand a.plan = b.plan\nand a.data_source = b.data_source\n)\n\n\nselect *\nfrom add_attribution_fields", "relation_name": "dev_coco.core.member_months"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.477062Z", "completed_at": "2024-10-11T23:52:37.751103Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.762202Z", "completed_at": "2024-10-11T23:52:37.762212Z"}], "thread_id": "Thread-2", "execution_time": 0.30423808097839355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__medical_claim", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , rendering_tin\n    , billing_npi\n    , billing_tin\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , in_network_flag\n    , data_source\nfrom tuva.input_layer.medical_claim\n) select\n\tcast(med.claim_id as TEXT ) as claim_id\n\t, cast(med.claim_line_number as int ) as claim_line_number\n\t, cast(med.claim_type as TEXT ) as claim_type\n\t, cast(med.patient_id as TEXT ) as patient_id\n\t, cast(med.member_id as TEXT ) as member_id\n\t, cast(med.payer as TEXT ) as payer\n    , cast(med.plan as TEXT ) as plan\n\t, cast(coalesce(dates.minimum_claim_start_date, undetermined.claim_start_date) as date ) as claim_start_date\n\t, cast(coalesce(dates.maximum_claim_end_date, undetermined.claim_start_date) as date ) as claim_end_date\n\t, cast(coalesce(claim_line_dates.normalized_claim_line_start_date, undetermined.claim_line_start_date) as date ) as claim_line_start_date\n\t, cast(coalesce(claim_line_dates.normalized_claim_line_end_date, undetermined.claim_line_end_date) as date ) as claim_line_end_date\n\t, cast(coalesce(dates.minimum_admission_date, undetermined.admission_date) as date ) as admission_date\n\t, cast(coalesce(dates.maximum_discharge_date, undetermined.discharge_date) as date ) as discharge_date\n\t, cast(coalesce(ad_source.normalized_code, undetermined.admit_source_code) as TEXT ) as admit_source_code\n    , cast(coalesce(ad_source.normalized_description, undetermined.admit_source_description) as TEXT ) as admit_source_description\n\t, cast(coalesce(ad_type.normalized_code, undetermined.admit_type_code) as TEXT ) as admit_type_code\n    , cast(coalesce(ad_type.normalized_description, undetermined.admit_type_description) as TEXT ) as admit_type_description\n\t, cast(coalesce(disch_disp.normalized_code, undetermined.discharge_disposition_code) as TEXT ) as discharge_disposition_code\n    , cast(coalesce(disch_disp.normalized_description, undetermined.discharge_disposition_description) as TEXT ) as discharge_disposition_description\n\t, cast(coalesce(pos.normalized_code, undetermined.place_of_service_code) as TEXT ) as place_of_service_code\n    , cast(coalesce(pos.normalized_description, undetermined.place_of_service_description) as TEXT ) as place_of_service_description\n\t, cast(coalesce(bill.normalized_code, undetermined.bill_type_code) as TEXT ) as bill_type_code\n    , cast(coalesce(bill.normalized_description, undetermined.bill_type_description) as TEXT ) as bill_type_description\n\t, cast(coalesce(ms.normalized_code, undetermined.ms_drg_code) as TEXT ) as ms_drg_code\n    , cast(coalesce(ms.normalized_description, undetermined.ms_drg_description) as TEXT ) as ms_drg_description\n\t, cast(coalesce(apr.normalized_code, undetermined.apr_drg_code) as TEXT ) as apr_drg_code\n    , cast(coalesce(apr.normalized_description, undetermined.apr_drg_description) as TEXT ) as apr_drg_description\n\t, cast(coalesce(rev.normalized_code, undetermined.revenue_center_code) as TEXT ) as revenue_center_code\n    , cast(coalesce(rev.normalized_description, undetermined.revenue_center_description) as TEXT ) as revenue_center_description\n\t, cast(med.service_unit_quantity as TEXT ) as service_unit_quantity\n\t, cast(med.hcpcs_code as TEXT ) as hcpcs_code\n\t, cast(med.hcpcs_modifier_1 as TEXT ) as hcpcs_modifier_1\n\t, cast(med.hcpcs_modifier_2 as TEXT ) as hcpcs_modifier_2\n\t, cast(med.hcpcs_modifier_3 as TEXT ) as hcpcs_modifier_3\n\t, cast(med.hcpcs_modifier_4 as TEXT ) as hcpcs_modifier_4\n\t, cast(med.hcpcs_modifier_5 as TEXT ) as hcpcs_modifier_5\n\t, cast(coalesce(med_npi.normalized_rendering_npi, undetermined.rendering_npi) as TEXT ) as rendering_id\n    , cast(med.rendering_tin as TEXT ) as rendering_tin\n    , cast(coalesce(med_npi.normalized_rendering_name, undetermined.rendering_name) as TEXT ) as rendering_name\n\t, cast(coalesce(med_npi.normalized_billing_npi, undetermined.billing_npi) as TEXT ) as billing_id\n    , cast(med.billing_tin as TEXT ) as billing_tin\n    , cast(coalesce(med_npi.normalized_billing_name, undetermined.billing_name) as TEXT ) as billing_name\n\t, cast(coalesce(med_npi.normalized_facility_npi, undetermined.facility_npi) as TEXT ) as facility_id\n\t, cast(coalesce(med_npi.normalized_facility_name, undetermined.facility_name) as TEXT ) as facility_name\n    , cast(med.paid_date as date ) as paid_date\n\t, cast(med.paid_amount as numeric(28,6) ) as paid_amount\n\t, cast(med.allowed_amount as numeric(28,6) ) as allowed_amount\n\t, cast(med.charge_amount as numeric(28,6) ) as charge_amount\n\t, cast(med.coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n\t, cast(med.copayment_amount as numeric(28,6) ) as copayment_amount\n\t, cast(med.deductible_amount as numeric(28,6) ) as deductible_amount\n\t, cast(med.total_cost_amount as numeric(28,6) ) as total_cost_amount\n\t, cast(med.diagnosis_code_type as TEXT ) as diagnosis_code_type\n\t, cast(coalesce(dx_code.diagnosis_code_1, undetermined.diagnosis_code_1) as TEXT ) as diagnosis_code_1\n\t, cast(coalesce(dx_code.diagnosis_code_2, undetermined.diagnosis_code_2) as TEXT ) as diagnosis_code_2\n\t, cast(coalesce(dx_code.diagnosis_code_3, undetermined.diagnosis_code_3) as TEXT ) as diagnosis_code_3\n\t, cast(coalesce(dx_code.diagnosis_code_4, undetermined.diagnosis_code_4) as TEXT ) as diagnosis_code_4\n\t, cast(coalesce(dx_code.diagnosis_code_5, undetermined.diagnosis_code_5) as TEXT ) as diagnosis_code_5\n\t, cast(coalesce(dx_code.diagnosis_code_6, undetermined.diagnosis_code_6) as TEXT ) as diagnosis_code_6\n\t, cast(coalesce(dx_code.diagnosis_code_7, undetermined.diagnosis_code_7) as TEXT ) as diagnosis_code_7\n\t, cast(coalesce(dx_code.diagnosis_code_8, undetermined.diagnosis_code_8) as TEXT ) as diagnosis_code_8\n\t, cast(coalesce(dx_code.diagnosis_code_9, undetermined.diagnosis_code_9) as TEXT ) as diagnosis_code_9\n\t, cast(coalesce(dx_code.diagnosis_code_10, undetermined.diagnosis_code_10) as TEXT ) as diagnosis_code_10\n\t, cast(coalesce(dx_code.diagnosis_code_11, undetermined.diagnosis_code_11) as TEXT ) as diagnosis_code_11\n\t, cast(coalesce(dx_code.diagnosis_code_12, undetermined.diagnosis_code_12) as TEXT ) as diagnosis_code_12\n\t, cast(coalesce(dx_code.diagnosis_code_13, undetermined.diagnosis_code_13) as TEXT ) as diagnosis_code_13\n\t, cast(coalesce(dx_code.diagnosis_code_14, undetermined.diagnosis_code_14) as TEXT ) as diagnosis_code_14\n\t, cast(coalesce(dx_code.diagnosis_code_15, undetermined.diagnosis_code_15) as TEXT ) as diagnosis_code_15\n\t, cast(coalesce(dx_code.diagnosis_code_16, undetermined.diagnosis_code_16) as TEXT ) as diagnosis_code_16\n\t, cast(coalesce(dx_code.diagnosis_code_17, undetermined.diagnosis_code_17) as TEXT ) as diagnosis_code_17\n\t, cast(coalesce(dx_code.diagnosis_code_18, undetermined.diagnosis_code_18) as TEXT ) as diagnosis_code_18\n\t, cast(coalesce(dx_code.diagnosis_code_19, undetermined.diagnosis_code_19) as TEXT ) as diagnosis_code_19\n\t, cast(coalesce(dx_code.diagnosis_code_20, undetermined.diagnosis_code_20) as TEXT ) as diagnosis_code_20\n\t, cast(coalesce(dx_code.diagnosis_code_21, undetermined.diagnosis_code_21) as TEXT ) as diagnosis_code_21\n\t, cast(coalesce(dx_code.diagnosis_code_22, undetermined.diagnosis_code_22) as TEXT ) as diagnosis_code_22\n\t, cast(coalesce(dx_code.diagnosis_code_23, undetermined.diagnosis_code_23) as TEXT ) as diagnosis_code_23\n\t, cast(coalesce(dx_code.diagnosis_code_24, undetermined.diagnosis_code_24) as TEXT ) as diagnosis_code_24\n\t, cast(coalesce(dx_code.diagnosis_code_25, undetermined.diagnosis_code_25) as TEXT ) as diagnosis_code_25\n\t, cast(coalesce(poa.diagnosis_poa_1, undetermined.diagnosis_poa_1) as TEXT ) as diagnosis_poa_1\n\t, cast(coalesce(poa.diagnosis_poa_2, undetermined.diagnosis_poa_2) as TEXT ) as diagnosis_poa_2\n\t, cast(coalesce(poa.diagnosis_poa_3, undetermined.diagnosis_poa_3) as TEXT ) as diagnosis_poa_3\n\t, cast(coalesce(poa.diagnosis_poa_4, undetermined.diagnosis_poa_4) as TEXT ) as diagnosis_poa_4\n\t, cast(coalesce(poa.diagnosis_poa_5, undetermined.diagnosis_poa_5) as TEXT ) as diagnosis_poa_5\n\t, cast(coalesce(poa.diagnosis_poa_6, undetermined.diagnosis_poa_6) as TEXT ) as diagnosis_poa_6\n\t, cast(coalesce(poa.diagnosis_poa_7, undetermined.diagnosis_poa_7) as TEXT ) as diagnosis_poa_7\n\t, cast(coalesce(poa.diagnosis_poa_8, undetermined.diagnosis_poa_8) as TEXT ) as diagnosis_poa_8\n\t, cast(coalesce(poa.diagnosis_poa_9, undetermined.diagnosis_poa_9) as TEXT ) as diagnosis_poa_9\n\t, cast(coalesce(poa.diagnosis_poa_10, undetermined.diagnosis_poa_10) as TEXT ) as diagnosis_poa_10\n\t, cast(coalesce(poa.diagnosis_poa_11, undetermined.diagnosis_poa_11) as TEXT ) as diagnosis_poa_11\n\t, cast(coalesce(poa.diagnosis_poa_12, undetermined.diagnosis_poa_12) as TEXT ) as diagnosis_poa_12\n\t, cast(coalesce(poa.diagnosis_poa_13, undetermined.diagnosis_poa_13) as TEXT ) as diagnosis_poa_13\n\t, cast(coalesce(poa.diagnosis_poa_14, undetermined.diagnosis_poa_14) as TEXT ) as diagnosis_poa_14\n\t, cast(coalesce(poa.diagnosis_poa_15, undetermined.diagnosis_poa_15) as TEXT ) as diagnosis_poa_15\n\t, cast(coalesce(poa.diagnosis_poa_16, undetermined.diagnosis_poa_16) as TEXT ) as diagnosis_poa_16\n\t, cast(coalesce(poa.diagnosis_poa_17, undetermined.diagnosis_poa_17) as TEXT ) as diagnosis_poa_17\n\t, cast(coalesce(poa.diagnosis_poa_18, undetermined.diagnosis_poa_18) as TEXT ) as diagnosis_poa_18\n\t, cast(coalesce(poa.diagnosis_poa_19, undetermined.diagnosis_poa_19) as TEXT ) as diagnosis_poa_19\n\t, cast(coalesce(poa.diagnosis_poa_20, undetermined.diagnosis_poa_20) as TEXT ) as diagnosis_poa_20\n\t, cast(coalesce(poa.diagnosis_poa_21, undetermined.diagnosis_poa_21) as TEXT ) as diagnosis_poa_21\n\t, cast(coalesce(poa.diagnosis_poa_22, undetermined.diagnosis_poa_22) as TEXT ) as diagnosis_poa_22\n\t, cast(coalesce(poa.diagnosis_poa_23, undetermined.diagnosis_poa_23) as TEXT ) as diagnosis_poa_23\n\t, cast(coalesce(poa.diagnosis_poa_24, undetermined.diagnosis_poa_24) as TEXT ) as diagnosis_poa_24\n\t, cast(coalesce(poa.diagnosis_poa_25, undetermined.diagnosis_poa_25) as TEXT ) as diagnosis_poa_25\n\t, cast(med.procedure_code_type as TEXT ) as procedure_code_type\n\t, cast(coalesce(px_code.procedure_code_1, undetermined.procedure_code_1) as TEXT ) as procedure_code_1\n\t, cast(coalesce(px_code.procedure_code_2, undetermined.procedure_code_2) as TEXT ) as procedure_code_2\n\t, cast(coalesce(px_code.procedure_code_3, undetermined.procedure_code_3) as TEXT ) as procedure_code_3\n\t, cast(coalesce(px_code.procedure_code_4, undetermined.procedure_code_4) as TEXT ) as procedure_code_4\n\t, cast(coalesce(px_code.procedure_code_5, undetermined.procedure_code_5) as TEXT ) as procedure_code_5\n\t, cast(coalesce(px_code.procedure_code_6, undetermined.procedure_code_6) as TEXT ) as procedure_code_6\n\t, cast(coalesce(px_code.procedure_code_7, undetermined.procedure_code_7) as TEXT ) as procedure_code_7\n\t, cast(coalesce(px_code.procedure_code_8, undetermined.procedure_code_8) as TEXT ) as procedure_code_8\n\t, cast(coalesce(px_code.procedure_code_9, undetermined.procedure_code_9) as TEXT ) as procedure_code_9\n\t, cast(coalesce(px_code.procedure_code_10, undetermined.procedure_code_10) as TEXT ) as procedure_code_10\n\t, cast(coalesce(px_code.procedure_code_11, undetermined.procedure_code_11) as TEXT ) as procedure_code_11\n\t, cast(coalesce(px_code.procedure_code_12, undetermined.procedure_code_12) as TEXT ) as procedure_code_12\n\t, cast(coalesce(px_code.procedure_code_13, undetermined.procedure_code_13) as TEXT ) as procedure_code_13\n\t, cast(coalesce(px_code.procedure_code_14, undetermined.procedure_code_14) as TEXT ) as procedure_code_14\n\t, cast(coalesce(px_code.procedure_code_15, undetermined.procedure_code_15) as TEXT ) as procedure_code_15\n\t, cast(coalesce(px_code.procedure_code_16, undetermined.procedure_code_16) as TEXT ) as procedure_code_16\n\t, cast(coalesce(px_code.procedure_code_17, undetermined.procedure_code_17) as TEXT ) as procedure_code_17\n\t, cast(coalesce(px_code.procedure_code_18, undetermined.procedure_code_18) as TEXT ) as procedure_code_18\n\t, cast(coalesce(px_code.procedure_code_19, undetermined.procedure_code_19) as TEXT ) as procedure_code_19\n\t, cast(coalesce(px_code.procedure_code_20, undetermined.procedure_code_20) as TEXT ) as procedure_code_20\n\t, cast(coalesce(px_code.procedure_code_21, undetermined.procedure_code_21) as TEXT ) as procedure_code_21\n\t, cast(coalesce(px_code.procedure_code_22, undetermined.procedure_code_22) as TEXT ) as procedure_code_22\n\t, cast(coalesce(px_code.procedure_code_23, undetermined.procedure_code_23) as TEXT ) as procedure_code_23\n\t, cast(coalesce(px_code.procedure_code_24, undetermined.procedure_code_24) as TEXT ) as procedure_code_24\n\t, cast(coalesce(px_code.procedure_code_25, undetermined.procedure_code_25) as TEXT ) as procedure_code_25\n\t, cast(coalesce(px_date.procedure_date_1, undetermined.procedure_date_1) as date ) as procedure_date_1\n\t, cast(coalesce(px_date.procedure_date_2, undetermined.procedure_date_2) as date ) as procedure_date_2\n\t, cast(coalesce(px_date.procedure_date_3, undetermined.procedure_date_3) as date ) as procedure_date_3\n\t, cast(coalesce(px_date.procedure_date_4, undetermined.procedure_date_4) as date ) as procedure_date_4\n\t, cast(coalesce(px_date.procedure_date_5, undetermined.procedure_date_5) as date ) as procedure_date_5\n\t, cast(coalesce(px_date.procedure_date_6, undetermined.procedure_date_6) as date ) as procedure_date_6\n\t, cast(coalesce(px_date.procedure_date_7, undetermined.procedure_date_7) as date ) as procedure_date_7\n\t, cast(coalesce(px_date.procedure_date_8, undetermined.procedure_date_8) as date ) as procedure_date_8\n\t, cast(coalesce(px_date.procedure_date_9, undetermined.procedure_date_9) as date ) as procedure_date_9\n\t, cast(coalesce(px_date.procedure_date_10, undetermined.procedure_date_10) as date ) as procedure_date_10\n\t, cast(coalesce(px_date.procedure_date_11, undetermined.procedure_date_11) as date ) as procedure_date_11\n\t, cast(coalesce(px_date.procedure_date_12, undetermined.procedure_date_12) as date ) as procedure_date_12\n\t, cast(coalesce(px_date.procedure_date_13, undetermined.procedure_date_13) as date ) as procedure_date_13\n\t, cast(coalesce(px_date.procedure_date_14, undetermined.procedure_date_14) as date ) as procedure_date_14\n\t, cast(coalesce(px_date.procedure_date_15, undetermined.procedure_date_15) as date ) as procedure_date_15\n\t, cast(coalesce(px_date.procedure_date_16, undetermined.procedure_date_16) as date ) as procedure_date_16\n\t, cast(coalesce(px_date.procedure_date_17, undetermined.procedure_date_17) as date ) as procedure_date_17\n\t, cast(coalesce(px_date.procedure_date_18, undetermined.procedure_date_18) as date ) as procedure_date_18\n\t, cast(coalesce(px_date.procedure_date_19, undetermined.procedure_date_19) as date ) as procedure_date_19\n\t, cast(coalesce(px_date.procedure_date_20, undetermined.procedure_date_20) as date ) as procedure_date_20\n\t, cast(coalesce(px_date.procedure_date_21, undetermined.procedure_date_21) as date ) as procedure_date_21\n\t, cast(coalesce(px_date.procedure_date_22, undetermined.procedure_date_22) as date ) as procedure_date_22\n\t, cast(coalesce(px_date.procedure_date_23, undetermined.procedure_date_23) as date ) as procedure_date_23\n\t, cast(coalesce(px_date.procedure_date_24, undetermined.procedure_date_24) as date ) as procedure_date_24\n\t, cast(coalesce(px_date.procedure_date_25, undetermined.procedure_date_25) as date ) as procedure_date_25\n\t, cast(med.data_source as TEXT ) as data_source\n    , cast(med.in_network_flag as int ) as in_network_flag\n    , cast('2024-10-11 23:52:28.343846+00:00' as TEXT ) as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join dev_coco.claims_preprocessing._int_normalized_input_admit_source_final ad_source\n    on med.claim_id = ad_source.claim_id\n    and med.data_source = ad_source.data_source\nleft join dev_coco.claims_preprocessing._int_normalized_input_admit_type_final ad_type\n    on med.claim_id = ad_type.claim_id\n    and med.data_source = ad_type.data_source\nleft join dev_coco.claims_preprocessing._int_normalized_input_apr_drg_final apr\n    on med.claim_id = apr.claim_id\n    and med.data_source = apr.data_source\nleft join dev_coco.claims_preprocessing._int_normalized_input_bill_type_final bill\n    on med.claim_id = bill.claim_id\n    and med.data_source = bill.data_source\nleft join dev_coco.claims_preprocessing._int_normalized_input_medical_claim_date_normalize claim_line_dates\n    on med.claim_id = claim_line_dates.claim_id\n    and med.claim_line_number = claim_line_dates.claim_line_number\n    and med.data_source = claim_line_dates.data_source\nleft join dev_coco.claims_preprocessing._int_normalized_input_medical_date_aggregation dates\n    on med.claim_id = dates.claim_id\n    and med.data_source = dates.data_source\nleft join dev_coco.claims_preprocessing._int_normalized_input_medical_npi_normalize med_npi\n    on med.claim_id = med_npi.claim_id\n    and med.claim_line_number = med_npi.claim_line_number\n    and med.data_source = med_npi.data_source\nleft join dev_coco.claims_preprocessing._int_normalized_input_discharge_disposition_final disch_disp\n    on med.claim_id = disch_disp.claim_id\n    and med.data_source = disch_disp.data_source\nleft join dev_coco.claims_preprocessing._int_normalized_input_ms_drg_final ms\n    on med.claim_id = ms.claim_id\n    and med.data_source = ms.data_source\nleft join dev_coco.claims_preprocessing._int_normalized_input_place_of_service_normalize pos\n    on med.claim_id = pos.claim_id\n    and med.claim_line_number = pos.claim_line_number\n    and med.data_source = pos.data_source\nleft join dev_coco.claims_preprocessing._int_normalized_input_diagnosis_code_final dx_code\n    on med.claim_id = dx_code.claim_id\n    and med.data_source = dx_code.data_source\nleft join dev_coco.claims_preprocessing._int_normalized_input_present_on_admit_final poa\n    on med.claim_id = poa.claim_id\n    and med.data_source = poa.data_source\nleft join dev_coco.claims_preprocessing._int_normalized_input_procedure_code_final px_code\n    on med.claim_id = px_code.claim_id\n    and med.data_source = px_code.data_source\nleft join dev_coco.claims_preprocessing._int_normalized_input_procedure_date_final px_date\n    on med.claim_id = px_date.claim_id\n    and med.data_source = px_date.data_source\nleft join dev_coco.claims_preprocessing._int_normalized_input_revenue_center_normalize rev\n    on med.claim_id = rev.claim_id\n    and med.claim_line_number = rev.claim_line_number\n    and med.data_source = rev.data_source\nleft join dev_coco.claims_preprocessing._int_normalized_input_undetermined_claim_type undetermined\n    on med.claim_id = undetermined.claim_id\n    and med.claim_line_number = undetermined.claim_line_number\n    and med.data_source = undetermined.data_source", "relation_name": "dev_coco.claims_preprocessing.normalized_input_medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.745638Z", "completed_at": "2024-10-11T23:52:37.756680Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.764108Z", "completed_at": "2024-10-11T23:52:37.764115Z"}], "thread_id": "Thread-4", "execution_time": 0.16806602478027344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__eligibility_eligibility_id.f0f050366a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    eligibility_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.core.eligibility\nwhere eligibility_id is not null\ngroup by eligibility_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.782745Z", "completed_at": "2024-10-11T23:52:37.794328Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.803709Z", "completed_at": "2024-10-11T23:52:37.803720Z"}], "thread_id": "Thread-5", "execution_time": 0.039166927337646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__patient", "compiled": true, "compiled_code": "\n\nSELECT *,\n    patient_id || '|' || data_source as patient_data_source_key\nFROM dev_coco.core.patient", "relation_name": "dev_coco.data_quality.mart_review__patient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.800078Z", "completed_at": "2024-10-11T23:52:37.830713Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.851538Z", "completed_at": "2024-10-11T23:52:37.851548Z"}], "thread_id": "Thread-8", "execution_time": 0.06511998176574707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__patient_patient_id.8fc869ed1e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.core.patient\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.805385Z", "completed_at": "2024-10-11T23:52:37.849912Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.857884Z", "completed_at": "2024-10-11T23:52:37.857894Z"}], "thread_id": "Thread-6", "execution_time": 0.06971383094787598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_all_medications", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__hcc_suspecting__stg_core__medication as (\n\nselect\n      patient_id\n    , dispensing_date\n    , source_code\n    , source_code_type\n    , ndc_code\n    , rxnorm_code\n    , data_source\nfrom dev_coco.core.medication\n\n\n),  __dbt__cte__hcc_suspecting__stg_core__pharmacy_claim as (\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , paid_date\n    , data_source\nfrom dev_coco.core.pharmacy_claim\n\n\n), medications as (\n\n    select\n          patient_id\n        , dispensing_date\n        , source_code\n        , source_code_type\n        , ndc_code\n        , rxnorm_code\n        , data_source\n    from __dbt__cte__hcc_suspecting__stg_core__medication\n\n)\n\n, pharmacy_claims as (\n\n    select\n          patient_id\n        , coalesce(dispensing_date, paid_date) as dispensing_date\n        , ndc_code as drug_code\n        , 'ndc' as code_system\n        , data_source\n    from __dbt__cte__hcc_suspecting__stg_core__pharmacy_claim\n\n)\n\n, ndc_medications as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code as drug_code\n        , 'ndc' as code_system\n        , data_source\n    from medications\n    where ndc_code is not null\n\n    union all\n\n    select\n          patient_id\n        , dispensing_date\n        , source_code as drug_code\n        , 'ndc' as code_system\n        , data_source\n    from medications\n    where lower(source_code_type) = 'ndc'\n\n)\n\n, rxnorm_medications as (\n\n    select\n          patient_id\n        , dispensing_date\n        , rxnorm_code as drug_code\n        , 'rxnorm' as code_system\n        , data_source\n    from medications\n    where rxnorm_code is not null\n\n    union all\n\n    select\n          patient_id\n        , dispensing_date\n        , source_code as drug_code\n        , 'rxnorm' as code_system\n        , data_source\n    from medications\n    where lower(source_code_type) = 'rxnorm'\n\n)\n\n, unioned as (\n\n    select * from pharmacy_claims\n    union all\n    select * from ndc_medications\n    union all\n    select * from rxnorm_medications\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(dispensing_date as date) as dispensing_date\n        , cast(drug_code as TEXT) as drug_code\n        , cast(code_system as TEXT) as code_system\n        , cast(data_source as TEXT) as data_source\n    from unioned\n\n)\n\nselect\n      patient_id\n    , dispensing_date\n    , drug_code\n    , code_system\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.hcc_suspecting._int_all_medications"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.845412Z", "completed_at": "2024-10-11T23:52:37.858979Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.867264Z", "completed_at": "2024-10-11T23:52:37.867271Z"}], "thread_id": "Thread-9", "execution_time": 0.06273412704467773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__summary", "compiled": true, "compiled_code": "\n\nWITH CTE AS (\n    SELECT DISTINCT fm.field_name\n    ,fm.input_layer_table_name\n    ,fm.claim_type\n    ,table_claim_type_field_sk\n    FROM dev_coco.dev_coco.data_quality__crosswalk_field_to_mart_sk fm\n)\n\nSELECT\n    summary_sk,\n    fm.table_claim_type_field_sk,\n    data_source,\n    x.table_name,\n    x.claim_type,\n    x.field_name,\n    sct.red,\n    sct.green,\n    sum(case when bucket_name = 'valid' then 1 else 0 end) as valid_num,\n    sum(case when bucket_name <> 'null' then 1 else 0 end) as fill_num,\n    count(drill_down_value) as denom,\n    '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM\n    dev_coco.data_quality.data_quality_detail x\nLEFT JOIN CTE fm\n    on x.field_name = fm.field_name\n    and\n    fm.input_layer_table_name = x.table_name\n    and\n    fm.claim_type = x.claim_type\nLEFT JOIN dev_coco.data_quality._value_set_crosswalk_field_info sct\n    on x.field_name = sct.field_name\n    and\n    sct.input_layer_table_name = x.table_name\n    and\n    sct.claim_type = x.claim_type\nGROUP BY\n    summary_sk,\n    data_source,\n    fm.table_claim_type_field_sk,\n    x.claim_type,\n    x.table_name,\n    x.field_name,\n    sct.red,\n    sct.green", "relation_name": "dev_coco.data_quality.summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.832798Z", "completed_at": "2024-10-11T23:52:37.859586Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.872624Z", "completed_at": "2024-10-11T23:52:37.872633Z"}], "thread_id": "Thread-10", "execution_time": 0.06843805313110352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.pharmacy__int_claims_current_cost", "compiled": true, "compiled_code": "\nwith __dbt__cte__pharmacy__stg_pharmacy_claim as (\n\n\nselect \n    p.ndc_code\n  , n.fda_description as ndc_description\n  , p.data_source\n  , n.rxcui\n  , p.paid_amount\n  , p.allowed_amount\n  , p.claim_id\n  , p.claim_line_number\n  , p.patient_id\n  , p.member_id\n  , p.prescribing_provider_id\n  , p.dispensing_provider_id\n  , p.dispensing_date\n  , p.quantity\n  , p.days_supply\n  , p.refills\n  , p.paid_date\nfrom dev_coco.core.pharmacy_claim as p\nleft join dev_coco.terminology.ndc as n \n  on p.ndc_code = n.ndc\n) /* All claims, current cost*/\n\nselect \n    p.ndc_code\n  , p.ndc_description\n  , p.data_source\n  , p.rxcui\n  , r.brand_vs_generic\n  , case \n      when ga.brand_with_generic_available is not null \n        then 'brand_with_generic_available' \n      else null \n    end as generic_available\n  , sum(paid_amount) as paid_amount\n  , count(distinct claim_id) as claim_count\n  , sum(paid_amount) / count(distinct claim_id) as cost_per_claim\n  , sum(quantity) as total_units\n  , case \n      when sum(quantity) > 0 \n      and  sum(paid_amount) > 0 \n      then sum(paid_amount) / sum(quantity) \n      else null \n    end as cost_per_unit\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom __dbt__cte__pharmacy__stg_pharmacy_claim as p\nleft join dev_coco.terminology.rxnorm_brand_generic as r \n  on p.rxcui = r.product_rxcui\nleft join dev_coco.pharmacy._int_brand_with_generic_available as ga \n  on p.rxcui = ga.brand_with_generic_available\nwhere p.ndc_code is not null\ngroup by \n    case \n      when ga.brand_with_generic_available is not null \n        then 'brand_with_generic_available' \n      else null \n    end\n  , r.brand_vs_generic\n  , p.ndc_code\n  , p.rxcui\n  , p.ndc_description\n  , p.data_source", "relation_name": "dev_coco.pharmacy._int_claims_current_cost"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.852797Z", "completed_at": "2024-10-11T23:52:37.866265Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.873827Z", "completed_at": "2024-10-11T23:52:37.873832Z"}], "thread_id": "Thread-3", "execution_time": 0.04963207244873047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__stg_pqi_member_months", "compiled": true, "compiled_code": "\n\nwith\n\ndate_int as (\n    select distinct\n        replace(year_month,'-','') yyyymm\n      , first_day_of_month\n    from dev_coco.reference_data.calendar as c\n)\n\nselect \n    data_source\n  , patient_id\n  , first_day_of_month\n  , d.yyyymm as year_month\n\nfrom \n    dev_coco.core.member_months mm\ninner join date_int d on mm.year_month = d.yyyymm", "relation_name": "dev_coco.ahrq_measures._stg_pqi_member_months"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.867776Z", "completed_at": "2024-10-11T23:52:37.880199Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.889355Z", "completed_at": "2024-10-11T23:52:37.889364Z"}], "thread_id": "Thread-2", "execution_time": 0.037320852279663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__stg_member_month", "compiled": true, "compiled_code": "\n\nwith cte as\n(\nselect distinct year_month_int\n,full_date\nfrom dev_coco.reference_data.calendar c\nwhere day = 1\n\n)\n\nselect  mm.*\n,c.year_month_int\n,c.full_date as year_month_date\nFROM dev_coco.core.member_months mm\nleft join cte c on cast(mm.year_month as int) = c.year_month_int", "relation_name": "dev_coco.data_quality.mart_review__stg_member_month"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.876160Z", "completed_at": "2024-10-11T23:52:37.896526Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.900827Z", "completed_at": "2024-10-11T23:52:37.900835Z"}], "thread_id": "Thread-4", "execution_time": 0.04105401039123535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.encounters__patient_data_source_id", "compiled": true, "compiled_code": "\n\nwith multiple_sources as (\nselect distinct patient_id\n,data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\n\n\nunion distinct\n\n\nselect distinct patient_id\n,data_source\nfrom dev_coco.claims_preprocessing.normalized_input_eligibility\n)\n\nselect\npatient_id\n,data_source\n,dense_rank() over (order by concat(patient_id,data_source)) as patient_data_source_id\nfrom multiple_sources", "relation_name": "dev_coco.claims_preprocessing.encounters__patient_data_source_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.881805Z", "completed_at": "2024-10-11T23:52:37.900107Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.915994Z", "completed_at": "2024-10-11T23:52:37.916002Z"}], "thread_id": "Thread-8", "execution_time": 0.0491328239440918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__stg_medical_claim", "compiled": true, "compiled_code": "\n\nselect\n    m.apr_drg_code\n  , m.claim_id\n  , m.claim_line_number\n  , m.claim_id || '|' || cast(m.claim_line_number as TEXT) as claim_line_id\n  , m.claim_type\n  , coalesce(m.admission_date,m.claim_line_start_date,m.claim_start_date) as start_date\n  , coalesce(m.discharge_date,m.claim_line_end_date,m.claim_end_date) as end_date\n  , m.admission_date\n  , m.discharge_date\n  , m.claim_start_date\n  , m.claim_end_date\n  , m.claim_line_start_date\n  , m.claim_line_end_date\n  , m.bill_type_code\n  , bt.bill_type_description\n  , m.hcpcs_code\n  , c.ccs_category\n  , c.ccs_category_description\n  , m.ms_drg_code\n  , drg.ms_drg_description\n  , m.place_of_service_code\n  , pos.place_of_service_description\n  , m.revenue_center_code\n  , r.revenue_center_description\n  , m.diagnosis_code_1\n  , dx.default_ccsr_category_ip\n  , dx.default_ccsr_category_op\n  , dx.default_ccsr_category_description_ip\n  , dx.default_ccsr_category_description_op\n  , p.primary_taxonomy_code\n  , p.primary_specialty_description\n  , rend.primary_specialty_description as rend_primary_specialty_description\n  , n.modality\n  , m.data_source\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim m\nleft join dev_coco.ccsr._value_set_dxccsr_v2023_1_cleaned_map dx on m.diagnosis_code_1 = dx.icd_10_cm_code\nleft join dev_coco.terminology.provider p on m.facility_id = p.npi\nleft join dev_coco.terminology.ccs_services_procedures c on m.hcpcs_code = c.hcpcs_code\nleft join dev_coco.terminology.nitos n on m.hcpcs_code = n.hcpcs_code\nleft join dev_coco.terminology.ms_drg drg on m.ms_drg_code = drg.ms_drg_code\nleft join dev_coco.terminology.revenue_center r on m.revenue_center_code = r.revenue_center_code\nleft join dev_coco.terminology.place_of_service pos on m.place_of_service_code = pos.place_of_service_code\nleft join dev_coco.terminology.bill_type bt on m.bill_type_code = bt.bill_type_code\nleft join dev_coco.terminology.provider rend on m.rendering_id = rend.npi", "relation_name": "dev_coco.dev_coco.service_category__stg_medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.890255Z", "completed_at": "2024-10-11T23:52:37.915388Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:37.966530Z", "completed_at": "2024-10-11T23:52:37.966542Z"}], "thread_id": "Thread-6", "execution_time": 0.09232783317565918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_normalized_input__medical_claim_claim_id__claim_line_number.6d94c0c08d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        claim_id, claim_line_number\n    from dev_coco.claims_preprocessing.normalized_input_medical_claim\n    group by claim_id, claim_line_number\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.901651Z", "completed_at": "2024-10-11T23:52:37.973406Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.008651Z", "completed_at": "2024-10-11T23:52:38.008658Z"}], "thread_id": "Thread-9", "execution_time": 0.1200859546661377, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.claims_enrollment__flag_claims_with_enrollment", "compiled": true, "compiled_code": "\n\n\nwith claim_dates as(\n    select\n        claim_id\n        , claim_line_number\n        , patient_id\n        , payer\n        , plan\n        , coalesce(claim_line_start_date, claim_start_date, admission_date) as inferred_claim_start_date\n        , coalesce(claim_line_end_date, claim_end_date, discharge_date) as inferred_claim_end_date\n        , case\n            when claim_line_start_date is not null then 'claim_line_start_date'\n            when claim_line_start_date is null and claim_start_date is not null then 'claim_start_date'\n            when claim_line_start_date is null and claim_start_date is null and admission_date is not null then 'admission_date'\n        end as inferred_claim_start_column_used\n        , case\n            when claim_line_end_date is not null then 'claim_line_end_date'\n            when claim_line_end_date is null and claim_end_date is not null then 'claim_end_date'\n            when claim_line_end_date is null and claim_end_date is null and discharge_date is not null then 'discharge_date'\n        end as inferred_claim_end_column_used\n    from dev_coco.claims_preprocessing.normalized_input_medical_claim\n)\n\n, claim_year_month as(\n    select\n          claim_id\n        , claim_line_number\n        , patient_id\n        , payer\n        , plan\n        , inferred_claim_start_date\n        , inferred_claim_end_date\n        , inferred_claim_start_column_used\n        , inferred_claim_end_column_used\n\n        , date_part('year', inferred_claim_start_date) || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || date_part('month', inferred_claim_start_date),\n            2\n        )\n    end as inferred_claim_start_year_month\n\n    , date_part('year', inferred_claim_end_date) || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || date_part('month', inferred_claim_end_date),\n            2\n        )\n    end as inferred_claim_end_year_month\n\nfrom claim_dates\n\n)\n\nselect distinct\n     claim.claim_id\n    , claim.claim_line_number\n    , claim.patient_id\n    , claim.payer\n    , claim.plan\n    , claim.inferred_claim_start_year_month\n    , claim.inferred_claim_end_year_month\n    , claim.inferred_claim_start_column_used\n    , claim.inferred_claim_end_column_used\n    , cast('2024-10-11 23:52:28.343846+00:00' as timestamp ) as tuva_last_run\nfrom dev_coco.core.member_months mm\ninner join claim_year_month claim\n    on mm.patient_id = claim.patient_id\n    and mm.payer = claim.payer\n    and mm.plan = claim.plan\n    and mm.year_month >= claim.inferred_claim_start_year_month\n    and mm.year_month <= claim.inferred_claim_end_year_month", "relation_name": "dev_coco.claims_preprocessing.flag_claims_with_enrollment"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.909451Z", "completed_at": "2024-10-11T23:52:37.986239Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.021676Z", "completed_at": "2024-10-11T23:52:38.021685Z"}], "thread_id": "Thread-10", "execution_time": 0.13277792930603027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_shared_exclusion_missing_age", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__ahrq_measures__stg_pqi_patient as (\n\n\nselect \n    data_source\n  , birth_date\n  , patient_id\n  , sex\nfrom \n    dev_coco.core.patient\n) /* Exclude patients with missing age */\nselect \n    data_source\n    , patient_id\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom __dbt__cte__ahrq_measures__stg_pqi_patient\nwhere birth_date is null", "relation_name": "dev_coco.ahrq_measures._int_pqi_shared_exclusions_missing_age"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.916475Z", "completed_at": "2024-10-11T23:52:38.004954Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.051298Z", "completed_at": "2024-10-11T23:52:38.051304Z"}], "thread_id": "Thread-3", "execution_time": 0.16149520874023438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_shared_exclusion_missing_gender", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__ahrq_measures__stg_pqi_patient as (\n\n\nselect \n    data_source\n  , birth_date\n  , patient_id\n  , sex\nfrom \n    dev_coco.core.patient\n) -- Exclude patients with undefined or missing gender\nselect \n    data_source\n  , patient_id\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom __dbt__cte__ahrq_measures__stg_pqi_patient\nwhere \n  sex not in ('male', 'female')", "relation_name": "dev_coco.ahrq_measures._int_pqi_shared_exclusion_missing_gender"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:37.921740Z", "completed_at": "2024-10-11T23:52:38.052442Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.097231Z", "completed_at": "2024-10-11T23:52:38.097239Z"}], "thread_id": "Thread-5", "execution_time": 0.19871282577514648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_members", "compiled": true, "compiled_code": "\n/*\nSteps for transforming eligibility data into member demographics:\n    1) Determine enrollment status using eligibility from the collection year.\n    2) Roll up to latest eligibility record for enrollment statuses.\n    3) Add age groups based on the payment year.\n    4) Determine other statuses.\n\nJinja is used to set payment year variable.\n - The payment_year var has been set here so it gets compiled.\n - CMS guidance: Age is calculated as of Feb 1 of the payment year.\n - The collection year is one year prior to the payment year.\n*/\n\n\n\n\nwith  __dbt__cte__cms_hcc__stg_core__eligibility as (\n\nselect\n      patient_id\n    , enrollment_start_date\n    , enrollment_end_date\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.eligibility\n),  __dbt__cte__cms_hcc__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), stg_eligibility as (\n\n    select\n          patient_id\n        , enrollment_start_date\n        , enrollment_end_date\n        , original_reason_entitlement_code\n        , dual_status_code\n        , medicare_status_code\n        , row_number() over(\n            partition by patient_id\n            order by enrollment_end_date desc\n        ) as row_num /* used to dedupe eligibility */\n    from __dbt__cte__cms_hcc__stg_core__eligibility\n    where (\n        /* Include members with any overlap in the collection or payment year */\n        enrollment_start_date <= '2024-12-31'\n        and enrollment_end_date >= '2023-01-01'\n    )\n\n)\n\n, stg_patient as (\n\n    select\n          patient_id\n        , sex\n        , birth_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        '2024-02-01'\n        ) / 8766.0) as payment_year_age\n        , death_date\n    from __dbt__cte__cms_hcc__stg_core__patient\n\n)\n\n/* create proxy enrollment dates if outside of the collection year */\n, cap_collection_start_end_dates as (\n\n    select\n          patient_id\n        , enrollment_start_date\n        , enrollment_end_date\n        , case\n            when enrollment_start_date < try_cast( '2023-01-01' as date )\n            then try_cast( '2023-01-01' as date )\n            else enrollment_start_date\n          end as proxy_enrollment_start_date\n        , case\n            when enrollment_end_date > try_cast( '2024-12-31' as date )\n            then try_cast( '2024-12-31' as date )\n            else enrollment_end_date\n          end as proxy_enrollment_end_date\n    from stg_eligibility\n    where (\n        /* filter to members with eligibility in collection or payment year */\n        \n            extract(year from enrollment_start_date)\n                between 2023\n                and 2024\n            or extract(year from enrollment_end_date)\n                between 2023\n                and 2024\n        \n    )\n\n)\n\n, calculate_prior_coverage as (\n\n    select patient_id\n        , sum(datediff(\n        month,\n        proxy_enrollment_start_date,\n        proxy_enrollment_end_date\n        ) + 1) as coverage_months  /* include starting month */\n    from cap_collection_start_end_dates\n    group by patient_id\n\n)\n\n/*\n   CMS guidance: A \u201cNew Enrollee\u201d status is when a beneficiary has less than\n   12 months of coverage prior to the payment year.\n*/\n, add_enrollment as (\n\n    select\n          patient_id\n        , case\n            when coverage_months < 12 then 'New'\n            else 'Continuing'\n          end as enrollment_status\n    from calculate_prior_coverage\n\n)\n\n, latest_eligibility as (\n\n    select\n          stg_eligibility.patient_id\n        , stg_patient.sex as gender\n        , stg_patient.payment_year_age\n        , stg_eligibility.original_reason_entitlement_code\n        , stg_eligibility.dual_status_code\n        , stg_eligibility.medicare_status_code\n        /* Defaulting to \"New\" enrollment status when missing */\n        , case\n            when add_enrollment.enrollment_status is null then 'New'\n            else add_enrollment.enrollment_status\n          end as enrollment_status\n        \n            , case\n                when add_enrollment.enrollment_status is null then TRUE\n                else FALSE\n              end as enrollment_status_default\n        \n    from stg_eligibility\n        left join add_enrollment\n            on stg_eligibility.patient_id = add_enrollment.patient_id\n        left join stg_patient\n            on stg_eligibility.patient_id = stg_patient.patient_id\n    where stg_eligibility.row_num = 1\n\n)\n\n, add_age_group as (\n\n    select\n          patient_id\n        , gender\n        , payment_year_age\n        , original_reason_entitlement_code\n        , dual_status_code\n        , medicare_status_code\n        , enrollment_status\n        , enrollment_status_default\n        , case\n            when enrollment_status = 'Continuing' and payment_year_age between 0 and 34 then '0-34'\n            when enrollment_status = 'Continuing' and payment_year_age between 35 and 44 then '35-44'\n            when enrollment_status = 'Continuing' and payment_year_age between 45 and 54 then '45-54'\n            when enrollment_status = 'Continuing' and payment_year_age between 55 and 59 then '55-59'\n            when enrollment_status = 'Continuing' and payment_year_age between 60 and 64 then '60-64'\n            when enrollment_status = 'Continuing' and payment_year_age between 65 and 69 then '65-69'\n            when enrollment_status = 'Continuing' and payment_year_age between 70 and 74 then '70-74'\n            when enrollment_status = 'Continuing' and payment_year_age between 75 and 79 then '75-79'\n            when enrollment_status = 'Continuing' and payment_year_age between 80 and 84 then '80-84'\n            when enrollment_status = 'Continuing' and payment_year_age between 85 and 89 then '85-89'\n            when enrollment_status = 'Continuing' and payment_year_age between 90 and 94 then '90-94'\n            when enrollment_status = 'Continuing' and payment_year_age >= 95 then '>=95'\n            when enrollment_status = 'New' and payment_year_age between 0 and 34 then '0-34'\n            when enrollment_status = 'New' and payment_year_age between 35 and 44 then '35-44'\n            when enrollment_status = 'New' and payment_year_age between 45 and 54 then '45-54'\n            when enrollment_status = 'New' and payment_year_age between 55 and 59 then '55-59'\n            when enrollment_status = 'New' and payment_year_age between 60 and 64 then '60-64'\n            when enrollment_status = 'New' and payment_year_age = 65 then '65'\n            when enrollment_status = 'New' and payment_year_age = 66 then '66'\n            when enrollment_status = 'New' and payment_year_age = 67 then '67'\n            when enrollment_status = 'New' and payment_year_age = 68 then '68'\n            when enrollment_status = 'New' and payment_year_age = 69 then '69'\n            when enrollment_status = 'New' and payment_year_age between 70 and 74 then '70-74'\n            when enrollment_status = 'New' and payment_year_age between 75 and 79 then '75-79'\n            when enrollment_status = 'New' and payment_year_age between 80 and 84 then '80-84'\n            when enrollment_status = 'New' and payment_year_age between 85 and 89 then '85-89'\n            when enrollment_status = 'New' and payment_year_age between 90 and 94 then '90-94'\n            when enrollment_status = 'New' and payment_year_age >= 95 then '>=95'\n          end as age_group\n    from latest_eligibility\n\n)\n\n, add_status_logic as (\n\n    select\n          patient_id\n        , enrollment_status\n        , case\n            when gender = 'female' then 'Female'\n            when gender = 'male' then 'Male'\n            else null\n          end as gender\n        , age_group\n        , case\n            when dual_status_code in ('01','02','03','04','05','06','08') then 'Yes'\n            else 'No'\n          end as medicaid_status\n        , case\n            when dual_status_code in ('02','04','08') then 'Full'\n            when dual_status_code in ('01','03','05','06') then 'Partial'\n            else 'Non'\n          end as dual_status\n        /*\n           The CMS-HCC model does not have factors for ESRD for these edge-cases,\n           we default to 'Aged'. When OREC is missing, latest Medicare status is\n           used, if available.\n        */\n        , case\n            when original_reason_entitlement_code in ('0','2') then 'Aged'\n            when original_reason_entitlement_code in ('1','3') then 'Disabled'\n            when original_reason_entitlement_code is null and medicare_status_code in ('10','11','31') then 'Aged'\n            when original_reason_entitlement_code is null and medicare_status_code in ('20','21') then 'Disabled'\n            when coalesce(original_reason_entitlement_code,medicare_status_code) is null then 'Aged'\n          end as orec\n        /* Defaulting everyone to non-institutional until logic is added */\n        , cast('No' as TEXT) as institutional_status\n        , enrollment_status_default\n        , case\n            \n                when dual_status_code is null then TRUE\n                else FALSE\n            \n          end as medicaid_dual_status_default\n        /* Setting default true when OREC or Medicare Status is ESRD, or null */\n        , case\n            \n                when original_reason_entitlement_code in ('2') then TRUE\n                when original_reason_entitlement_code is null and medicare_status_code in ('31') then TRUE\n                when coalesce(original_reason_entitlement_code,medicare_status_code) is null then TRUE\n                else FALSE\n            \n          end as orec_default\n        /* Setting default true until institutional logic is added */\n        \n            , TRUE as institutional_status_default\n        \n    from add_age_group\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(enrollment_status as TEXT) as enrollment_status\n        , cast(gender as TEXT) as gender\n        , cast(age_group as TEXT) as age_group\n        , cast(medicaid_status as TEXT) as medicaid_status\n        , cast(dual_status as TEXT) as dual_status\n        , cast(orec as TEXT) as orec\n        , cast(institutional_status as TEXT) as institutional_status\n        \n            , cast(enrollment_status_default as boolean) as enrollment_status_default\n            , cast(medicaid_dual_status_default as boolean) as medicaid_dual_status_default\n            , cast(orec_default as boolean) as orec_default\n            , cast(institutional_status_default as boolean) as institutional_status_default\n        \n        , cast('2024' as integer) as payment_year\n    from add_status_logic\n\n)\n\nselect\n      patient_id\n    , enrollment_status\n    , gender\n    , age_group\n    , medicaid_status\n    , dual_status\n    , orec\n    , institutional_status\n    , enrollment_status_default\n    , medicaid_dual_status_default\n    , orec_default\n    , institutional_status_default\n    , payment_year\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.cms_hcc._int_members"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.009147Z", "completed_at": "2024-10-11T23:52:38.096954Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.113433Z", "completed_at": "2024-10-11T23:52:38.113441Z"}], "thread_id": "Thread-2", "execution_time": 0.19784808158874512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_adh_diabetes_denominator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_pharmacy_claim as (\n\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , days_supply\n    , paid_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.pharmacy_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), diabetics_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'pqa diabetes medications'\n        )\n\n)\n\n, rx_diabetes as (\n\n    select\n        patient_id\n      , dispensing_date\n      , ndc_code\n      , days_supply\n    from __dbt__cte__quality_measures__stg_pharmacy_claim as pharmacy_claims\n    inner join diabetics_codes\n        on pharmacy_claims.ndc_code = diabetics_codes.code\n            and lower(diabetics_codes.code_system) = 'ndc'\n\n)\n\n, rx_diabetes_in_measurement_period as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code\n        , days_supply\n        , performance_period_end -- to use in latter cte for days in treatment period calculation\n    from rx_diabetes\n    inner join dev_coco.quality_measures._int_adh_diabetes__performance_period pp\n        on dispensing_date between pp.performance_period_begin and pp.performance_period_end\n\n)\n\n/* \n    These patients need to pass two checks\n    - First medication fill date should be at least 91 days before the end of measurement period\n    - Should have at least two distinct Date of Service (FillDate) for rx\n*/\n\n, rx_fill_order as (\n\n    select\n          patient_id\n        , dispensing_date\n        , performance_period_end\n        , dense_rank() over (\n            partition by \n                  patient_id\n                , performance_period_end\n            order by dispensing_date\n        ) as dr\n    from rx_diabetes_in_measurement_period\n\n)\n\n, rx_first_fill as (\n\n    select\n          patient_id\n        , dispensing_date\n        , performance_period_end\n    from rx_fill_order\n    where dr = 1\n          \n)\n\n, timely_fill_check as (\n\n    select\n          patient_id\n        , ( 1 + datediff(\n        day,\n        dispensing_date,\n        performance_period_end\n        ) )\n            as days_in_treatment_period\n        /*  \n            Performance Period end minus dispensing date results in \n            second_date non-inclusive difference, so to include both of these days\n            1 day is added\n        */\n    from rx_first_fill\n\n)\n\n, first_check_passed_patients as (\n\n    select\n          patient_id\n        , days_in_treatment_period\n    from timely_fill_check\n    where days_in_treatment_period > 90\n\n)\n\n, second_check_passed_patients as (\n\n    select\n          patient_id\n    from rx_fill_order\n    where dr = 2\n\n)\n\n, qualifying_patients as (\n\n    select\n          first_check_passed_patients.patient_id\n        , first_check_passed_patients.days_in_treatment_period\n    from first_check_passed_patients\n    inner join second_check_passed_patients\n        on first_check_passed_patients.patient_id = second_check_passed_patients.patient_id \n\n)\n\n, qualifying_patients_with_age as (\n    \n    select\n          patients.patient_id\n        , floor(datediff(\n        hour,\n        birth_date,\n        pp.performance_period_begin\n        ) / 8760.0) as age\n        , days_in_treatment_period\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from __dbt__cte__quality_measures__stg_core__patient patients\n    inner join qualifying_patients\n        on patients.patient_id = qualifying_patients.patient_id\n    cross join dev_coco.quality_measures._int_adh_diabetes__performance_period pp\n    where patients.death_date is null\n\n)\n/*\n    Extracting related fields like dispensing_date, ndc_code and days_supply of qualified patients\n    to avoid redundant computations in numerator model\n*/\n\n, qualifying_patients_all_claim_info as (\n\n    select\n          qualifying_patients_with_age.patient_id\n        , qualifying_patients_with_age.age\n        , rx_diabetes_in_measurement_period.dispensing_date\n        , rx_diabetes_in_measurement_period.ndc_code\n        , rx_diabetes_in_measurement_period.days_supply\n        , qualifying_patients_with_age.days_in_treatment_period\n        , qualifying_patients_with_age.performance_period_begin\n        , qualifying_patients_with_age.performance_period_end\n        , qualifying_patients_with_age.measure_id\n        , qualifying_patients_with_age.measure_name\n        , qualifying_patients_with_age.measure_version\n    from qualifying_patients_with_age\n    inner join rx_diabetes_in_measurement_period\n        on qualifying_patients_with_age.patient_id = rx_diabetes_in_measurement_period.patient_id\n\n)\n\n, denominator as (\n\n    select\n          patient_id\n        , age\n        , dispensing_date\n        , ndc_code\n        , days_supply\n        , days_in_treatment_period\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , 1 as denominator_flag\n    from qualifying_patients_all_claim_info\n    where age >= 18\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(dispensing_date as date) as dispensing_date\n        , cast(ndc_code as TEXT) as ndc_code\n        , cast(days_supply as integer) as days_supply\n        , cast(days_in_treatment_period as integer) as days_in_treatment_period\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from denominator\n\n)\n\nselect\n      patient_id\n    , age\n    , dispensing_date\n    , ndc_code\n    , days_supply\n    , days_in_treatment_period\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_adh_diabetes_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.053716Z", "completed_at": "2024-10-11T23:52:38.114257Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.117891Z", "completed_at": "2024-10-11T23:52:38.117897Z"}], "thread_id": "Thread-4", "execution_time": 0.11356019973754883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_adhras_denominator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_pharmacy_claim as (\n\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , days_supply\n    , paid_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.pharmacy_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), performance_period as (\n\n    select\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_end\n        , performance_period_begin\n    from dev_coco.quality_measures._int_adhras__performance_period\n\n)\n\n, visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) = 'pqa rasa medications'\n\n)\n\n, pharmacy_claim  as (\n\n    select \n          patient_id\n        , dispensing_date\n        , ndc_code\n        , days_supply\n    from __dbt__cte__quality_measures__stg_pharmacy_claim\n\n)\n\n, patient_with_claim as (\n\n    select\n          pharmacy_claim.patient_id\n        , dispensing_date\n        , days_supply\n        , ndc_code\n    from pharmacy_claim \n    inner join visit_codes\n        on pharmacy_claim.ndc_code = visit_codes.code\n    \n)\n\n, patient_within_performance_period as (\n\n    select\n          patient_id\n        , dispensing_date\n        , days_supply\n        , ndc_code\n        , performance_period_begin\n        , performance_period_end\n    from patient_with_claim as claim_patient\n    inner join performance_period as pp\n        on claim_patient.dispensing_date between pp.performance_period_begin and pp.performance_period_end\n\n)\n\n/* \n    These patients need to pass two checks\n    - First medication fill date should be at least 91 days before the end of measurement period\n    - Should have at least two distinct Date of Service (FillDate) for rx\n*/\n\n, patient_with_rank as (\n\n    select\n          patient_id\n        , dispensing_date\n        , days_supply\n        , ndc_code\n        , dense_rank() over (partition by patient_id order by dispensing_date) as dense_rank\n    from patient_within_performance_period\n\n)\n\n, patient_with_first_dispensing_date as (\n\n    select\n          patient_id\n        , dispensing_date as first_dispensing_date\n    from patient_with_rank\n    where dense_rank = 1\n\n)\n\n/*\ntreatment period days is abbreviated as tpd\n*/\n\n, patient_with_tpd as (\n\n    select\n          patients1.patient_id\n        , patients1.dispensing_date\n        , patients2.first_dispensing_date\n        , patients1.days_supply\n        , datediff(\n        day,\n        first_dispensing_date,\n        performance_period_end\n        ) as tpd\n    from patient_within_performance_period as patients1\n    inner join patient_with_first_dispensing_date as patients2\n        on patients1.patient_id = patients2.patient_id\n\n)\n\n, first_check_patient as (\n\n    select\n          patient_id\n        , dispensing_date\n        , first_dispensing_date\n        , days_supply\n    from patient_with_tpd\n    where tpd > 89\n    \n)\n\n, second_check_patient as (\n\n    select\n          patient_id\n        , ndc_code\n    from patient_with_rank\n    where dense_rank = 2\n\n)\n\n, both_check_patient as (\n\n    select\n          valid_patients1.patient_id\n        , valid_patients1.dispensing_date\n        , valid_patients1.first_dispensing_date\n        , valid_patients1.days_supply\n        , valid_patients2.ndc_code\n    from first_check_patient as valid_patients1\n    inner join second_check_patient as valid_patients2\n        on valid_patients1.patient_id = valid_patients2.patient_id\n     \n)\n\n, patient_with_age as (\n\n    select\n          valid_patients1.patient_id\n        , floor(datediff(\n        hour,\n        birth_date,\n        pp.performance_period_begin\n        ) / 8760.0) as age\n        , dispensing_date\n        , first_dispensing_date\n        , days_supply\n        , ndc_code\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n    from __dbt__cte__quality_measures__stg_core__patient as patient\n    inner join both_check_patient as valid_patients1\n        on patient.patient_id = valid_patients1.patient_id\n    cross join performance_period as pp\n    where patient.death_date is null\n\n)\n\n, qualifying_patients as (\n\n    select\n          patient_id\n        , dispensing_date\n        , first_dispensing_date\n        , days_supply\n        , ndc_code\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , 1 as denominator_flag\n    from patient_with_age \n    where age > 17\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(dispensing_date as date) as dispensing_date\n        , cast(first_dispensing_date as date) as first_dispensing_date\n        , cast(days_supply as integer) as days_supply\n        , cast(ndc_code as TEXT) as ndc_code\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , dispensing_date\n    , first_dispensing_date\n    , days_supply\n    , ndc_code\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_adhras_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.099394Z", "completed_at": "2024-10-11T23:52:38.116689Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.131729Z", "completed_at": "2024-10-11T23:52:38.131737Z"}], "thread_id": "Thread-8", "execution_time": 0.09759211540222168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.accepted_values_quality_measures__stg_core__patient_sex__female__male__unknown.e6adc9ce2b", "compiled": true, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), all_values as (\n\n    select\n        sex as value_field,\n        count(*) as n_records\n\n    from __dbt__cte__quality_measures__stg_core__patient\n    group by sex\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'female','male','unknown'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.109389Z", "completed_at": "2024-10-11T23:52:38.117341Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.132529Z", "completed_at": "2024-10-11T23:52:38.132533Z"}], "thread_id": "Thread-6", "execution_time": 0.0804290771484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__patient_birth_date.4b3a2e74e6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n) select birth_date\nfrom __dbt__cte__quality_measures__stg_core__patient\nwhere birth_date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.118641Z", "completed_at": "2024-10-11T23:52:38.134547Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.141352Z", "completed_at": "2024-10-11T23:52:38.141360Z"}], "thread_id": "Thread-9", "execution_time": 0.04285621643066406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__patient_patient_id.5510e1a0fd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__patient\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.122760Z", "completed_at": "2024-10-11T23:52:38.135154Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.142254Z", "completed_at": "2024-10-11T23:52:38.142260Z"}], "thread_id": "Thread-10", "execution_time": 0.043356895446777344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__patient_sex.e2f34cab69", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n) select sex\nfrom __dbt__cte__quality_measures__stg_core__patient\nwhere sex is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.127765Z", "completed_at": "2024-10-11T23:52:38.135701Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.151786Z", "completed_at": "2024-10-11T23:52:38.151795Z"}], "thread_id": "Thread-3", "execution_time": 0.0430300235748291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.pharmacy__int_generic_cost", "compiled": true, "compiled_code": "\n\n/* for each brand rxcui, what is the average cost/unit of generics available*/\n\nselect\n    g.product_rxcui as brand_rxcui\n  , cl.data_source\n  , max(case when claim_count > 0 then 1 else 0 end) as prescribed_atleast_one_generic_history\n  , sum(case when total_units > 0 and paid_amount > 0 then paid_amount else null end)/sum(case when total_units > 0 and paid_amount > 0 then total_units else null end) as generic_average_cost_per_unit\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.pharmacy.rxnorm_generic_available as g\nleft join dev_coco.pharmacy._int_claims_current_cost as cl \n  on cl.ndc_code = g.ndc\nwhere cl.brand_vs_generic = 'generic'\ngroup by\n    g.product_rxcui\n  , cl.data_source", "relation_name": "dev_coco.pharmacy._int_generic_cost"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.136340Z", "completed_at": "2024-10-11T23:52:38.153450Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.165047Z", "completed_at": "2024-10-11T23:52:38.165056Z"}], "thread_id": "Thread-5", "execution_time": 0.0475311279296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.pharmacy__int_generic_cost_by_ndc", "compiled": true, "compiled_code": "\n\n/* for each brand rxcui, what is the average cost/unit of all generics available*/\n\nselect\n    g.product_rxcui as brand_rxcui\n  , cl.data_source\n  , cl.ndc_code as generic_ndc_code\n  , cl.paid_amount\n  , cl.claim_count\n  , cl.total_units\n  , cl.cost_per_unit\n  , case when claim_count > 0 then 1 else 0 end as prescribed_atleast_one_generic_history\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.pharmacy.rxnorm_generic_available as g\nleft join dev_coco.pharmacy._int_claims_current_cost as cl \n  on cl.ndc_code = g.ndc\nwhere cl.brand_vs_generic = 'generic'", "relation_name": "dev_coco.pharmacy._int_generic_cost_by_ndc"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.142778Z", "completed_at": "2024-10-11T23:52:38.161383Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.186027Z", "completed_at": "2024-10-11T23:52:38.186036Z"}], "thread_id": "Thread-2", "execution_time": 0.05388998985290527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_01_denom", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__ahrq_measures__stg_pqi_patient as (\n\n\nselect \n    data_source\n  , birth_date\n  , patient_id\n  , sex\nfrom \n    dev_coco.core.patient\n) select distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_member_months as e\ninner join __dbt__cte__ahrq_measures__stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_coco.ahrq_measures._int_pqi_01_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.155113Z", "completed_at": "2024-10-11T23:52:38.187624Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.199300Z", "completed_at": "2024-10-11T23:52:38.199310Z"}], "thread_id": "Thread-4", "execution_time": 0.05839109420776367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_03_denom", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__ahrq_measures__stg_pqi_patient as (\n\n\nselect \n    data_source\n  , birth_date\n  , patient_id\n  , sex\nfrom \n    dev_coco.core.patient\n) select distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_member_months as e\ninner join __dbt__cte__ahrq_measures__stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_coco.ahrq_measures._int_pqi_03_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.165559Z", "completed_at": "2024-10-11T23:52:38.188463Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.219327Z", "completed_at": "2024-10-11T23:52:38.219337Z"}], "thread_id": "Thread-8", "execution_time": 0.07749390602111816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_05_denom", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__ahrq_measures__stg_pqi_patient as (\n\n\nselect \n    data_source\n  , birth_date\n  , patient_id\n  , sex\nfrom \n    dev_coco.core.patient\n) select distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_member_months as e\ninner join __dbt__cte__ahrq_measures__stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 40", "relation_name": "dev_coco.ahrq_measures._int_pqi_05_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.176778Z", "completed_at": "2024-10-11T23:52:38.189138Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.221257Z", "completed_at": "2024-10-11T23:52:38.221262Z"}], "thread_id": "Thread-6", "execution_time": 0.06898784637451172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_07_denom", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__ahrq_measures__stg_pqi_patient as (\n\n\nselect \n    data_source\n  , birth_date\n  , patient_id\n  , sex\nfrom \n    dev_coco.core.patient\n) select distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_member_months as e\ninner join __dbt__cte__ahrq_measures__stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_coco.ahrq_measures._int_pqi_07_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.189441Z", "completed_at": "2024-10-11T23:52:38.222577Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.237782Z", "completed_at": "2024-10-11T23:52:38.237793Z"}], "thread_id": "Thread-9", "execution_time": 0.07317996025085449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_08_denom", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__ahrq_measures__stg_pqi_patient as (\n\n\nselect \n    data_source\n  , birth_date\n  , patient_id\n  , sex\nfrom \n    dev_coco.core.patient\n) select distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_member_months as e\ninner join __dbt__cte__ahrq_measures__stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_coco.ahrq_measures._int_pqi_08_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.199823Z", "completed_at": "2024-10-11T23:52:38.223303Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.238620Z", "completed_at": "2024-10-11T23:52:38.238626Z"}], "thread_id": "Thread-10", "execution_time": 0.06254291534423828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_11_denom", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__ahrq_measures__stg_pqi_patient as (\n\n\nselect \n    data_source\n  , birth_date\n  , patient_id\n  , sex\nfrom \n    dev_coco.core.patient\n) select distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_member_months as e\ninner join __dbt__cte__ahrq_measures__stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_coco.ahrq_measures._int_pqi_11_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.209252Z", "completed_at": "2024-10-11T23:52:38.223914Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.245819Z", "completed_at": "2024-10-11T23:52:38.245830Z"}], "thread_id": "Thread-3", "execution_time": 0.06941890716552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_12_denom", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__ahrq_measures__stg_pqi_patient as (\n\n\nselect \n    data_source\n  , birth_date\n  , patient_id\n  , sex\nfrom \n    dev_coco.core.patient\n) select distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_member_months as e\ninner join __dbt__cte__ahrq_measures__stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_coco.ahrq_measures._int_pqi_12_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.227943Z", "completed_at": "2024-10-11T23:52:38.252518Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.271564Z", "completed_at": "2024-10-11T23:52:38.271573Z"}], "thread_id": "Thread-5", "execution_time": 0.07271099090576172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_14_denom", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__ahrq_measures__stg_pqi_patient as (\n\n\nselect \n    data_source\n  , birth_date\n  , patient_id\n  , sex\nfrom \n    dev_coco.core.patient\n) select distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_member_months as e\ninner join __dbt__cte__ahrq_measures__stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_coco.ahrq_measures._int_pqi_14_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.239096Z", "completed_at": "2024-10-11T23:52:38.255272Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.273189Z", "completed_at": "2024-10-11T23:52:38.273195Z"}], "thread_id": "Thread-2", "execution_time": 0.05312490463256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_15_denom", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__ahrq_measures__stg_pqi_patient as (\n\n\nselect \n    data_source\n  , birth_date\n  , patient_id\n  , sex\nfrom \n    dev_coco.core.patient\n) select distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_member_months as e\ninner join __dbt__cte__ahrq_measures__stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18\n  and\n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) <= 39", "relation_name": "dev_coco.ahrq_measures._int_pqi_15_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.255836Z", "completed_at": "2024-10-11T23:52:38.278266Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.285085Z", "completed_at": "2024-10-11T23:52:38.285094Z"}], "thread_id": "Thread-4", "execution_time": 0.047796010971069336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_16_denom", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__ahrq_measures__stg_pqi_patient as (\n\n\nselect \n    data_source\n  , birth_date\n  , patient_id\n  , sex\nfrom \n    dev_coco.core.patient\n) select distinct\n    cast(substring(e.year_month, 1, 4) as int) AS year_number\n  , e.patient_id\n  , e.data_source\n  , datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) as age\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_member_months as e\ninner join __dbt__cte__ahrq_measures__stg_pqi_patient as p \n  on e.patient_id = p.patient_id\n  and p.data_source = e.data_source\nwhere \n  datediff(\n        year,\n        p.birth_date,\n        e.first_day_of_month\n        ) >= 18", "relation_name": "dev_coco.ahrq_measures._int_pqi_16_denom"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.265451Z", "completed_at": "2024-10-11T23:52:38.278833Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.286500Z", "completed_at": "2024-10-11T23:52:38.286506Z"}], "thread_id": "Thread-8", "execution_time": 0.04825305938720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__enrollment_change", "compiled": true, "compiled_code": "\n\nWITH RankedMonths AS (\n    SELECT\n        patient_id,\n        year_month,\n        data_source,\n        lag(year_month_date, 1) over (partition by patient_id, data_source order by year_month_date) as prev_year_month,\n        lead(year_month_date, 1) over (partition by patient_id, data_source order by year_month_date) as next_year_month,\n        year_month_date\n    FROM dev_coco.data_quality.mart_review__stg_member_month\n),\nChanges AS (\n SELECT\n    patient_id,\n    data_source,\n    year_month_date as change_month,\n    case\n        when prev_year_month is null\n            or \n\n    dateadd(\n        month,\n        -1,\n        year_month_date\n        )\n\n != prev_year_month\n        then 'added'\n    end as change_type\nFROM RankedMonths\nunion all\nSELECT\n    patient_id,\n    data_source,\n    \n\n    dateadd(\n        month,\n        1,\n        year_month_date\n        )\n\n as change_month,\n    case\n        when next_year_month is null\n            or \n\n    dateadd(\n        month,\n        1,\n        year_month_date\n        )\n\n != next_year_month\n        then 'removed'\n    end as change_type\nFROM RankedMonths\n\n),\nFinal AS (\n    SELECT\n       patient_id || '|' || change_month as membermonthkey,\n        data_source,\n        patient_id,\n        change_month,\n        change_type\n    FROM Changes\n    WHERE change_type IS NOT NULL\n),\nResult AS (\n    SELECT\n        data_source,\n        change_month,\n        change_type,\n        count(*) as member_count\n    FROM Final\n    GROUP BY data_source\n    , change_month\n    , change_type\n)\n\n\nSELECT * , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM Result", "relation_name": "dev_coco.data_quality.mart_review__enrollment_change"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.273767Z", "completed_at": "2024-10-11T23:52:38.286046Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.296448Z", "completed_at": "2024-10-11T23:52:38.296456Z"}], "thread_id": "Thread-6", "execution_time": 0.045332908630371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.encounters__stg_eligibility", "compiled": true, "compiled_code": "\n\nselect\n      e.patient_id\n    , e.birth_date\n    , e.gender\n    , e.race\n    , d.patient_data_source_id\n    , row_number() over (partition by d.patient_data_source_id order by e.enrollment_start_date desc) patient_row_num\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing.normalized_input_eligibility e\ninner join dev_coco.claims_preprocessing.encounters__patient_data_source_id d on e.patient_id = d.patient_id\nand\ne.data_source = d.data_source", "relation_name": "dev_coco.claims_preprocessing.encounters__stg_eligibility"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.280674Z", "completed_at": "2024-10-11T23:52:38.296937Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.303189Z", "completed_at": "2024-10-11T23:52:38.303195Z"}], "thread_id": "Thread-9", "execution_time": 0.03830099105834961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__acute_inpatient_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n    claim_id\n  , claim_line_number\n  , claim_line_id\n  , 'inpatient' as service_category_1\n  , 'acute inpatient' as service_category_2\n  , case \n      when hcpcs_code in ('59400', '59409', '59410', '59610', '59612', '59614') then 'l/d - vaginal delivery'\n      when hcpcs_code in ('59510', '59514', '59515', '59618', '59620', '59622') then 'l/d - cesarean delivery'\n      else 'acute inpatient - other'\n    end as service_category_3\n  , '_int_acute_inpatient_professional' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim\nwhere \n  claim_type = 'professional'\n  and place_of_service_code = '21'", "relation_name": "dev_coco.claims_preprocessing._int_acute_inpatient_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.291263Z", "completed_at": "2024-10-11T23:52:38.302311Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.309148Z", "completed_at": "2024-10-11T23:52:38.309155Z"}], "thread_id": "Thread-3", "execution_time": 0.03668498992919922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__dme_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n    claim_id\n    , claim_line_number\n    , claim_line_id\n, 'ancillary' as service_category_1\n, 'durable medical equipment' as service_category_2\n, 'durable medical equipment' as service_category_3\n, '_int_dme_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and hcpcs_code between 'E0100' and 'E8002'", "relation_name": "dev_coco.claims_preprocessing._int_dme_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.286993Z", "completed_at": "2024-10-11T23:52:38.302549Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.309660Z", "completed_at": "2024-10-11T23:52:38.309665Z"}], "thread_id": "Thread-10", "execution_time": 0.0375368595123291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__ambulance_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n    claim_id\n  , claim_line_number\n  , claim_line_id\n  , 'ancillary' as service_category_1\n  , 'ambulance' as service_category_2\n  , 'ambulance' as service_category_3\n  , '_int_ambulance_professional' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim\nwhere \n  claim_type = 'professional'\n  and (\n    hcpcs_code between 'A0425' and 'A0436'\n    or place_of_service_code in ('41', '42')\n  )", "relation_name": "dev_coco.claims_preprocessing._int_ambulance_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.298253Z", "completed_at": "2024-10-11T23:52:38.310429Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.316540Z", "completed_at": "2024-10-11T23:52:38.316546Z"}], "thread_id": "Thread-5", "execution_time": 0.03085803985595703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__home_health_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n  , 'outpatient' as service_category_1\n, 'home health' as service_category_2\n, 'home health' as service_category_3\n, '_int_home_health_institutional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and substring(bill_type_code, 1, 2) in ('31','32','33')", "relation_name": "dev_coco.claims_preprocessing._int_home_health_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.303968Z", "completed_at": "2024-10-11T23:52:38.315959Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.322074Z", "completed_at": "2024-10-11T23:52:38.322080Z"}], "thread_id": "Thread-2", "execution_time": 0.02685713768005371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__inpatient_psychiatric_professional", "compiled": true, "compiled_code": "\n\nselect distinct \nclaim_id\n, claim_line_number\n, claim_line_id\n, 'inpatient' as service_category_1\n, 'inpatient psychiatric' as service_category_2\n, 'inpatient psychiatric' as service_category_3\n,'_int_inpatient_psychiatric_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('51','55','56')", "relation_name": "dev_coco.claims_preprocessing._int_inpatient_psychiatric_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.311291Z", "completed_at": "2024-10-11T23:52:38.322542Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.328477Z", "completed_at": "2024-10-11T23:52:38.328484Z"}], "thread_id": "Thread-4", "execution_time": 0.030630111694335938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__inpatient_rehab_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n  claim_id\n, claim_line_number\n, claim_line_id\n, 'inpatient' as service_category_1\n, 'inpatient rehabilitation' as service_category_2\n, 'inpatient rehabilitation' as service_category_3\n,'_int_inpatient_rehab_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('61')", "relation_name": "dev_coco.claims_preprocessing._int_inpatient_rehab_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.317332Z", "completed_at": "2024-10-11T23:52:38.328244Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.344545Z", "completed_at": "2024-10-11T23:52:38.344553Z"}], "thread_id": "Thread-8", "execution_time": 0.040946245193481445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__inpatient_skilled_nursing_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, 'inpatient' as service_category_1\n, 'skilled nursing' as service_category_2\n, 'skilled nursing' as service_category_3\n, '_int_inpatient_skilled_nursing_institutional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and substring(bill_type_code, 1, 2) in ('21','22')", "relation_name": "dev_coco.claims_preprocessing._int_inpatient_skilled_nursing_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.322807Z", "completed_at": "2024-10-11T23:52:38.337235Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.345849Z", "completed_at": "2024-10-11T23:52:38.345854Z"}], "thread_id": "Thread-6", "execution_time": 0.03578805923461914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__observation_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n   med.claim_id\n,  med.claim_line_number\n, 'outpatient' as service_category_1\n, 'observation' as service_category_2\n, 'observation' as service_category_3\n, '_int_observation_institutional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\nwhere claim_type = 'institutional'\nand (revenue_center_code in ('0762')\nor hcpcs_code in ('G0378','G0379')\n)", "relation_name": "dev_coco.claims_preprocessing._int_observation_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.329331Z", "completed_at": "2024-10-11T23:52:38.346720Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.357349Z", "completed_at": "2024-10-11T23:52:38.357356Z"}], "thread_id": "Thread-9", "execution_time": 0.040411949157714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_psychiatric_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n  claim_id\n, claim_line_number\n, claim_line_id\n, 'outpatient' as service_category_1    \n, 'outpatient psychiatric' as service_category_2\n, 'outpatient psychiatric' as service_category_3\n, '_int_outpatient_psychiatric_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('52','53','57','58')", "relation_name": "dev_coco.claims_preprocessing._int_outpatient_psychiatric_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.333366Z", "completed_at": "2024-10-11T23:52:38.346969Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.357849Z", "completed_at": "2024-10-11T23:52:38.357854Z"}], "thread_id": "Thread-3", "execution_time": 0.0364832878112793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_rehab_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n  claim_id\n, claim_line_number\n, claim_line_id\n, 'outpatient' as service_category_1    \n, 'outpatient rehabilitation' as service_category_2\n, 'outpatient rehabilitation' as service_category_3\n,'_int_outpatient_rehab_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('62')", "relation_name": "dev_coco.claims_preprocessing._int_outpatient_rehab_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.337492Z", "completed_at": "2024-10-11T23:52:38.347516Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.358598Z", "completed_at": "2024-10-11T23:52:38.358603Z"}], "thread_id": "Thread-10", "execution_time": 0.03691864013671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__stg_inpatient_institutional", "compiled": true, "compiled_code": "\n\nwith drg_requirement as (\n  select distinct\n      mc.claim_id\n  from dev_coco.dev_coco.service_category__stg_medical_claim as mc\n  left join dev_coco.terminology.ms_drg as msdrg\n    on mc.ms_drg_code = msdrg.ms_drg_code\n  left join dev_coco.terminology.apr_drg as aprdrg\n    on mc.apr_drg_code = aprdrg.apr_drg_code\n  where mc.claim_type = 'institutional'\n    and (\n      msdrg.ms_drg_code is not null\n      or aprdrg.apr_drg_code is not null\n    )\n)\n\n, bill_type_requirement as (\n  select distinct\n      claim_id\n  from dev_coco.dev_coco.service_category__stg_medical_claim\n  where claim_type = 'institutional'\n    and substring(bill_type_code, 1, 2) in (\n      '11'  -- hospital inpatient \n    , '12'  -- hospital inpatient \n    , '21'  -- SNF inpatient\n    , '82'  -- inpatient hospice\n    )\n)\n\nselect distinct\n    a.claim_id\n  , 'inpatient' as service_type\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim as a\ninner join bill_type_requirement as d\n  on a.claim_id = d.claim_id\n\n\nunion distinct\n\n\nselect distinct\n    a.claim_id\n  , 'inpatient' as service_type\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim as a\ninner join drg_requirement as c\n  on a.claim_id = c.claim_id", "relation_name": "dev_coco.dev_coco.service_category__stg_inpatient_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.348079Z", "completed_at": "2024-10-11T23:52:38.360371Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.367538Z", "completed_at": "2024-10-11T23:52:38.367545Z"}], "thread_id": "Thread-5", "execution_time": 0.03859400749206543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__stg_professional", "compiled": true, "compiled_code": "\n\nselect  distinct \n    a.claim_id\n  , a.claim_line_number\n  , a.claim_line_id as claim_line_id\n  , 'professional' as service_type\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim a\nwhere a.claim_type = 'professional'", "relation_name": "dev_coco.dev_coco.service_category__stg_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.352409Z", "completed_at": "2024-10-11T23:52:38.360875Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.375619Z", "completed_at": "2024-10-11T23:52:38.375626Z"}], "thread_id": "Thread-2", "execution_time": 0.031475067138671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__urgent_care_institutional", "compiled": true, "compiled_code": "\n\nwith multiple_sources as (\nselect distinct \n  a.claim_id\n, 'urgent care' as service_category_2\n, 'urgent care' as service_category_3\n,'_int_urgent_care_institutional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim a\nwhere claim_type = 'institutional'\n  and revenue_center_code = '0456'\n  and substring(bill_type_code, 1, 2) in ('13','71','73')\n \nunion all\n\nselect distinct \n  a.claim_id\n, 'urgent care' as service_category_2\n, 'urgent care' as service_category_3\n,'_int_urgent_care_institutional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim a\nwhere claim_type = 'institutional'\n  and hcpcs_code in ('S9088','99051','S9083')\n)\n\nselect distinct \nclaim_id\n,'outpatient' as service_category_1    \n,service_category_2\n,service_category_3\n,source_model_name\n,tuva_last_run\nfrom multiple_sources", "relation_name": "dev_coco.claims_preprocessing._int_urgent_care_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.361477Z", "completed_at": "2024-10-11T23:52:38.382574Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.400580Z", "completed_at": "2024-10-11T23:52:38.400589Z"}], "thread_id": "Thread-4", "execution_time": 0.052906036376953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__urgent_care_professional", "compiled": true, "compiled_code": "\n\nwith multiple_source as (\nselect distinct\n    claim_id\n    , claim_line_number\n    , claim_line_id\n, 'urgent care' as service_category_2\n, 'urgent care' as service_category_3\n,'_int_urgent_care_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('20')\n\nunion all\n\nselect distinct\n    claim_id\n    , claim_line_number\n    , claim_line_id\n, 'urgent care' as service_category_2\n, 'urgent care' as service_category_3\n,'_int_urgent_care_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim\nwhere claim_type = 'professional'\nand hcpcs_code in ('S9088','99051','S9083')\n)\n\nselect distinct \nclaim_id\n,claim_line_number\n,claim_line_id\n,'outpatient' as service_category_1    \n,service_category_2\n,service_category_3\n,source_model_name\n,tuva_last_run\nfrom multiple_source", "relation_name": "dev_coco.claims_preprocessing._int_urgent_care_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.367997Z", "completed_at": "2024-10-11T23:52:38.386573Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.410999Z", "completed_at": "2024-10-11T23:52:38.411006Z"}], "thread_id": "Thread-8", "execution_time": 0.052770137786865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_demographic_factors", "compiled": true, "compiled_code": "\n\nwith members as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , enrollment_status_default\n        , medicaid_dual_status_default\n        , orec_default\n        , institutional_status_default\n        , payment_year\n    from dev_coco.cms_hcc._int_members\n\n)\n\n, seed_demographic_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , coefficient\n    from dev_coco.cms_hcc._value_set_demographic_factors\n    where plan_segment is null /* data not available */\n\n)\n\n, v24_new_enrollees as (\n\n    select\n          members.patient_id\n        , members.enrollment_status\n        , members.gender\n        , members.age_group\n        , members.medicaid_status\n        , members.dual_status\n        , members.orec\n        , members.institutional_status\n        , members.enrollment_status_default\n        , members.medicaid_dual_status_default\n        , members.orec_default\n        , members.institutional_status_default\n        , members.payment_year\n        , seed_demographic_factors.model_version\n        , seed_demographic_factors.factor_type\n        , seed_demographic_factors.coefficient\n    from members\n        inner join seed_demographic_factors\n            on members.enrollment_status = seed_demographic_factors.enrollment_status\n            and members.gender = seed_demographic_factors.gender\n            and members.age_group = seed_demographic_factors.age_group\n            and members.medicaid_status = seed_demographic_factors.medicaid_status\n            and members.orec = seed_demographic_factors.orec\n    where members.enrollment_status = 'New'\n        and seed_demographic_factors.model_version = 'CMS-HCC-V24'\n\n)\n\n, v24_continuining_enrollees as (\n\n    select\n          members.patient_id\n        , members.enrollment_status\n        , members.gender\n        , members.age_group\n        , members.medicaid_status\n        , members.dual_status\n        , members.orec\n        , members.institutional_status\n        , members.enrollment_status_default\n        , members.medicaid_dual_status_default\n        , members.orec_default\n        , members.institutional_status_default\n        , members.payment_year\n        , seed_demographic_factors.model_version\n        , seed_demographic_factors.factor_type\n        , seed_demographic_factors.coefficient\n    from members\n        inner join seed_demographic_factors\n            on members.enrollment_status = seed_demographic_factors.enrollment_status\n            and members.gender = seed_demographic_factors.gender\n            and members.age_group = seed_demographic_factors.age_group\n            and members.medicaid_status = seed_demographic_factors.medicaid_status\n            and members.dual_status = seed_demographic_factors.dual_status\n            and members.orec = seed_demographic_factors.orec\n            and members.institutional_status = seed_demographic_factors.institutional_status\n    where members.enrollment_status = 'Continuing'\n        and seed_demographic_factors.model_version = 'CMS-HCC-V24'\n\n)\n\n, v28_new_enrollees as (\n\n    select\n          members.patient_id\n        , members.enrollment_status\n        , members.gender\n        , members.age_group\n        , members.medicaid_status\n        , members.dual_status\n        , members.orec\n        , members.institutional_status\n        , members.enrollment_status_default\n        , members.medicaid_dual_status_default\n        , members.orec_default\n        , members.institutional_status_default\n        , members.payment_year\n        , seed_demographic_factors.model_version\n        , seed_demographic_factors.factor_type\n        , seed_demographic_factors.coefficient\n    from members\n        inner join seed_demographic_factors\n            on members.enrollment_status = seed_demographic_factors.enrollment_status\n            and members.gender = seed_demographic_factors.gender\n            and members.age_group = seed_demographic_factors.age_group\n            and members.medicaid_status = seed_demographic_factors.medicaid_status\n            and members.orec = seed_demographic_factors.orec\n    where members.enrollment_status = 'New'\n        and seed_demographic_factors.model_version = 'CMS-HCC-V28'\n\n)\n\n, v28_continuining_enrollees as (\n\n    select\n          members.patient_id\n        , members.enrollment_status\n        , members.gender\n        , members.age_group\n        , members.medicaid_status\n        , members.dual_status\n        , members.orec\n        , members.institutional_status\n        , members.enrollment_status_default\n        , members.medicaid_dual_status_default\n        , members.orec_default\n        , members.institutional_status_default\n        , members.payment_year\n        , seed_demographic_factors.model_version\n        , seed_demographic_factors.factor_type\n        , seed_demographic_factors.coefficient\n    from members\n        inner join seed_demographic_factors\n            on members.enrollment_status = seed_demographic_factors.enrollment_status\n            and members.gender = seed_demographic_factors.gender\n            and members.age_group = seed_demographic_factors.age_group\n            and members.medicaid_status = seed_demographic_factors.medicaid_status\n            and members.dual_status = seed_demographic_factors.dual_status\n            and members.orec = seed_demographic_factors.orec\n            and members.institutional_status = seed_demographic_factors.institutional_status\n    where members.enrollment_status = 'Continuing'\n        and seed_demographic_factors.model_version = 'CMS-HCC-V28'\n\n)\n\n, unioned as (\n\n    select * from v24_new_enrollees\n    union all\n    select * from v24_continuining_enrollees\n    union all\n    select * from v28_new_enrollees\n    union all\n    select * from v28_continuining_enrollees\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(enrollment_status as TEXT) as enrollment_status\n        , cast(gender as TEXT) as gender\n        , cast(age_group as TEXT) as age_group\n        , cast(medicaid_status as TEXT) as medicaid_status\n        , cast(dual_status as TEXT) as dual_status\n        , cast(orec as TEXT) as orec\n        , cast(institutional_status as TEXT) as institutional_status\n        \n            , cast(enrollment_status_default as boolean) as enrollment_status_default\n            , cast(medicaid_dual_status_default as boolean) as medicaid_dual_status_default\n            , cast(orec_default as boolean) as orec_default\n            , cast(institutional_status_default as boolean) as institutional_status_default\n        \n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(factor_type as TEXT) as factor_type\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from unioned\n\n)\n\nselect\n      patient_id\n    , enrollment_status\n    , gender\n    , age_group\n    , medicaid_status\n    , dual_status\n    , orec\n    , institutional_status\n    , enrollment_status_default\n    , medicaid_dual_status_default\n    , orec_default\n    , institutional_status_default\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.cms_hcc._int_demographic_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.377091Z", "completed_at": "2024-10-11T23:52:38.400283Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.412847Z", "completed_at": "2024-10-11T23:52:38.412853Z"}], "thread_id": "Thread-6", "execution_time": 0.053556203842163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_cms_hcc__int_members_patient_id.75e528329b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_coco.cms_hcc._int_members\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.386853Z", "completed_at": "2024-10-11T23:52:38.413337Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.432627Z", "completed_at": "2024-10-11T23:52:38.432636Z"}], "thread_id": "Thread-9", "execution_time": 0.06582784652709961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_cms_hcc__int_members_patient_id.4d202f2bbb", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.cms_hcc._int_members\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.390473Z", "completed_at": "2024-10-11T23:52:38.413858Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.433994Z", "completed_at": "2024-10-11T23:52:38.434000Z"}], "thread_id": "Thread-3", "execution_time": 0.06682586669921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_adh_diabetes_numerator", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code\n        , days_supply\n        , days_in_treatment_period\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_coco.quality_measures._int_adh_diabetes_denominator\n\n)\n\n, performance_end as (\n\n    select\n      performance_period_end\n    from dev_coco.quality_measures._int_adh_diabetes__performance_period\n\n)\n\n/*\n  The below 3 cte identifies periods of continuous medication use for each patient by:\n  1. Assigning a row number and tracking the previous medication per patient.\n  2. Flagging when a medication change occurs.\n  3. Grouping consecutive periods of the same medication by assigning a group ID.\n*/\n\n, ranked_patient as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code\n        , days_supply\n        , dense_rank() over (partition by patient_id order by dispensing_date) as dr\n        , lag(ndc_code) over (partition by patient_id order by dispensing_date) as previous_ndc\n    from denominator\n\n)\n\n, grouped_meds as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code\n        , days_supply\n        , dr\n        , case\n            when (ndc_code != previous_ndc) or previous_ndc is null then 1\n            else 0\n          end as med_change_flag --to increment group when medication changes\n    from ranked_patient\n\n)\n\n, final_groups as (\n\n    select\n          patient_id\n        , ndc_code\n        , dispensing_date\n        , days_supply\n        , sum(med_change_flag) over (\n              partition by patient_id \n              order by dr \n              rows between unbounded preceding and current row\n          ) as group_id\n    from grouped_meds\n\n)\n\n/*\n  The ctes below calculates adjusted medication fill dates,\n  groups fills by continuous periods of use and ensures accurate start and end dates based \n  on previous fills and the performance period.\n*/\n\n, fills as (\n\n    select\n          patient_id\n        , group_id\n        , dispensing_date\n        , days_supply\n        , \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        day,\n        days_supply,\n        dispensing_date\n        )\n\n\n        )\n\n as theoretical_end_date\n    from final_groups\n\n)\n\n, previous_fill_end_date as (\n    \n    select\n          patient_id\n        , group_id\n        , dispensing_date\n        , days_supply\n        , theoretical_end_date\n        , lag(theoretical_end_date)\n          over (partition by \n                patient_id\n              , group_id  \n            order by\n                dispensing_date\n          ) as previous_end_date\n    from fills\n\n)\n\n, adjusted_fills as (\n    \n    /* Adjust start dates based on the previous fill's end date + 1,\n    or use the current rx_fill_date */\n    select\n          patient_id\n        , group_id\n        , dispensing_date\n        , days_supply\n        , theoretical_end_date\n        , coalesce(\n            greatest(\n                  dispensing_date\n                , \n\n    dateadd(\n        day,\n        1,\n        previous_end_date\n        )\n\n\n                )\n            , dispensing_date\n        ) as adjusted_start_date\n    from previous_fill_end_date\n\n)\n\n, final_fills as (\n\n    select\n        patient_id\n      , group_id\n      , dispensing_date\n      , days_supply\n      , adjusted_start_date\n      , least(\n            \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        day,\n        days_supply,\n        adjusted_start_date\n        )\n\n\n        )\n\n\n          , performance_period_end\n      ) as final_end_date\n    from adjusted_fills\n    inner join performance_end\n      on adjusted_fills.adjusted_start_date <= performance_end.performance_period_end\n\n)\n\n, grouped_fill_ranges as (\n\n    select\n          patient_id\n        , group_id\n        , dispensing_date\n        , days_supply\n        , adjusted_start_date\n        , final_end_date\n        , min(adjusted_start_date) over(partition by patient_id, group_id) as first_disp_date\n        , max(adjusted_start_date) over(partition by patient_id, group_id) as last_disp_date\n    from final_fills\n\n)\n\n, last_med_end_groupwise as (\n\n    select\n          patient_id\n        , group_id\n        , dispensing_date\n        , days_supply\n        , adjusted_start_date\n        , final_end_date\n        , first_disp_date\n        , last_disp_date\n        , max(\n            case\n              when adjusted_start_date = last_disp_date\n              then days_supply\n              else null\n            end) over (partition by patient_id, group_id) as last_days_supply\n    from grouped_fill_ranges\n\n)\n\n/*\n  1. Calculates the total covered days per medication group per patient\n  2. Then calculates the overlap between groups of medication per patient\n  3. Finally calculates the actual total covered days for each patient\n*/\n\n, covered_days_per_group as (\n    \n    select\n          patient_id\n        , group_id\n        , first_disp_date\n        , last_disp_date\n        , last_days_supply\n        , sum( 1 + datediff(\n        day,\n        adjusted_start_date,\n        final_end_date\n        ) ) as covered_days\n    from last_med_end_groupwise\n    group by \n          patient_id\n        , group_id\n        , first_disp_date\n        , last_disp_date\n        , last_days_supply\n\n)\n\n, final_with_lag as (\n\n    select\n          patient_id\n        , group_id\n        , first_disp_date\n        , last_disp_date\n        , covered_days\n        , lag(last_disp_date) over(partition by patient_id order by first_disp_date) as lag_date\n        , lag(last_days_supply) over(partition by patient_id order by first_disp_date) as lag_days_supply\n    from covered_days_per_group\n\n)\n\n, overlap_days as (\n\n    select\n          patient_id\n        , group_id\n        , first_disp_date\n        , last_disp_date\n        , covered_days\n        , lag_date\n        , case\n            when first_disp_date < \n                \n\n    dateadd(\n        day,\n        lag_days_supply,\n        lag_date\n        )\n\n\n            then\n                datediff(\n        day,\n        first_disp_date,\n        \n\n    dateadd(\n        day,\n        lag_days_supply,\n        lag_date\n        )\n\n\n        )\n            else 0\n          end as overlap\n    from final_with_lag\n\n)\n\n, final_covered_days as (\n\n    select \n          patient_id\n        , sum(covered_days) - sum(overlap) as actual_covered_days\n    from overlap_days\n    group by patient_id\n\n)\n\n, relevant_patients_from_deno as (\n\n    select\n          final_covered_days.patient_id\n        , round(cast(actual_covered_days / days_in_treatment_period as numeric(28,6)), 4) as adherence\n        , dispensing_date as evidence_date\n        , days_supply as evidence_value\n    from final_covered_days\n    inner join denominator\n      on final_covered_days.patient_id = denominator.patient_id\n        \n)\n\n, numerator as (\n\n    select\n          patient_id\n        , adherence * 100 as adherence --percent conversion\n        , evidence_date\n        , evidence_value\n        , 1 as numerator_flag\n    from relevant_patients_from_deno\n    where adherence >= 0.8\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(adherence as numeric(28,6)) as adherence\n        , cast(numerator_flag as integer) as numerator_flag\n    from numerator\n\n)\n\nselect\n      patient_id\n    , evidence_date\n    , evidence_value\n    , adherence\n    , numerator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_adh_diabetes_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.401746Z", "completed_at": "2024-10-11T23:52:38.422896Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.448583Z", "completed_at": "2024-10-11T23:52:38.448591Z"}], "thread_id": "Thread-10", "execution_time": 0.07193398475646973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_adhras_numerator", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , dispensing_date\n        , first_dispensing_date\n        , days_supply\n        , ndc_code\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_coco.quality_measures._int_adhras_denominator\n\n)\n\n, performance_end as (\n\n    select\n      performance_period_end\n    from dev_coco.quality_measures._int_adhras__performance_period\n\n)\n\n/*\nThe below 3 cte identifies periods of continuous medication use for each patient by:\n1. Assigning a row number and tracking the previous medication per patient.\n2. Flagging when a medication change occurs.\n3. Grouping consecutive periods of the same medication by assigning a group ID.\n*/\n\n, ranked_patient as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code\n        , days_supply\n        , dense_rank() over (partition by patient_id order by dispensing_date) as dense_rank\n        , lag(ndc_code) over (partition by patient_id order by dispensing_date) as previous_ndc\n    from denominator\n\n)\n\n, grouped_meds as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code\n        , days_supply\n        , dense_rank\n        , case\n            when (ndc_code != previous_ndc) or previous_ndc is null then 1\n            else 0\n          end as med_change_flag --to increment group when medication changes\n    from ranked_patient\n\n)\n\n, final_groups as (\n\n    select\n          patient_id\n        , ndc_code\n        , dispensing_date\n        , days_supply\n        , sum(med_change_flag) over (\n              partition by patient_id \n              order by dense_rank \n              rows between unbounded preceding and current row\n          ) as group_id\n    from grouped_meds\n\n)\n\n/*\nThis cte theoretical_end_dates to final_fills calculates adjusted medication fill dates, \ngroups fills by continuous periods of use and ensures accurate start and end dates based \non previous fills and the performance period.\n*/\n\n, theoretical_end_dates as (\n\n    select\n          patient_id\n        , group_id\n        , dispensing_date\n        , days_supply\n        , \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        day,\n        days_supply,\n        dispensing_date\n        )\n\n\n        )\n\n as theoretical_end_date\n    from final_groups\n\n)\n\n/* \nAdjust start dates based on the previous fill's end date + 1,\nor use the current rx_fill_date \n*/\n\n, previous_fill_end_dates as (\n    \n    select\n          patient_id\n        , group_id\n        , dispensing_date\n        , days_supply\n        , theoretical_end_date\n        , lag(theoretical_end_date)\n          over (partition by \n                patient_id\n              , group_id  \n            order by\n                dispensing_date\n          ) as previous_fill_end_date\n    from theoretical_end_dates\n\n)\n\n, adjusted_fill_dates as (\n    \n    select\n          patient_id\n        , group_id\n        , dispensing_date\n        , days_supply\n        , theoretical_end_date\n        , coalesce(\n            greatest(\n                  dispensing_date\n                , \n\n    dateadd(\n        day,\n        1,\n        previous_fill_end_date\n        )\n\n\n                )\n            , dispensing_date\n        ) as adjusted_fill_date\n    from previous_fill_end_dates\n\n)\n\n\n, actual_end_dates as (\n\n    select\n        patient_id\n      , group_id\n      , dispensing_date\n      , days_supply\n      , adjusted_fill_date\n      , least(\n            \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        day,\n        days_supply,\n        adjusted_fill_date\n        )\n\n\n        )\n\n\n          , performance_period_end\n      ) as actual_end_date\n    from adjusted_fill_dates\n    inner join performance_end\n      on adjusted_fill_dates.adjusted_fill_date <= performance_end.performance_period_end\n\n)\n\n, grouped_fill_ranges as (\n\n    select\n          patient_id\n        , group_id\n        , dispensing_date\n        , days_supply\n        , adjusted_fill_date\n        , actual_end_date\n        , min(adjusted_fill_date) over(partition by patient_id, group_id) as group_first\n        , max(adjusted_fill_date) over(partition by patient_id, group_id) as group_last\n    from actual_end_dates\n\n)\n\n, final_fills as (\n\n    select\n          patient_id\n        , group_id\n        , dispensing_date\n        , days_supply\n        , adjusted_fill_date\n        , actual_end_date\n        , group_first\n        , group_last\n        , max(\n            case\n              when adjusted_fill_date = group_last\n              then days_supply\n              else 0\n            end) over (partition by patient_id, group_id) as group_last_days_supply\n    from grouped_fill_ranges\n\n)\n\n/*\n1. Calculates the total covered days per every medication group per patient\n2. Then, calculates the overlap between groups of medication per patient.\n3. Then, calculates the actual total covered days for each patient.\n*/\n\n, covered_days_per_groups as (\n    \n    select\n          patient_id\n        , group_id\n        , group_first\n        , group_last\n        , group_last_days_supply\n        , sum( 1 + datediff(\n        day,\n        adjusted_fill_date,\n        actual_end_date\n        ) ) as covered_days_per_group\n    from final_fills\n    group by \n          patient_id\n        , group_id\n        , group_first\n        , group_last\n        , group_last_days_supply\n\n)\n\n, with_lag as (\n\n    select\n          patient_id\n        , group_id\n        , group_first\n        , group_last\n        , covered_days_per_group\n        , lag(group_last) over(partition by patient_id order by group_first) as lag_date\n        , lag(group_last_days_supply) over(partition by patient_id order by group_first) as lag_days_supply\n    from covered_days_per_groups\n\n)\n\n, overlap_days as (\n\n    select\n          patient_id\n        , group_id\n        , group_first\n        , group_last\n        , covered_days_per_group\n        , lag_date\n        , case\n            when group_first < \n                \n\n    dateadd(\n        day,\n        lag_days_supply,\n        lag_date\n        )\n\n\n            then\n                datediff(\n        day,\n        group_first,\n        \n\n    dateadd(\n        day,\n        lag_days_supply,\n        lag_date\n        )\n\n\n        )\n            else 0\n          end as overlap\n    from with_lag\n\n)\n\n\n, final_covered_days as (\n\n    select \n          patient_id\n        , sum(covered_days_per_group) - sum(overlap) as actual_covered_days\n    from overlap_days\n    group by patient_id\n\n)\n\n, patient_with_treatment_period_days as (\n    select\n          patient_id\n        , datediff(\n        day,\n        first_dispensing_date,\n        performance_period_end\n        ) as treatment_period_days\n    from denominator\n\n)\n\n, patient_with_pdc as (\n\n    select\n          final_covered_days.patient_id\n        , round(cast(actual_covered_days * 100 / treatment_period_days as numeric(28,6)), 4) as adherence\n    from final_covered_days\n    inner join patient_with_treatment_period_days \n        on final_covered_days.patient_id = patient_with_treatment_period_days.patient_id\n\n)\n\n/*\nSelects only the patient whose pdc is greater than 80%.\n*/\n\n, valid_patients as (\n\n    select \n          patient_with_pdc.patient_id\n        , adherence\n        , denominator.dispensing_date as evidence_date\n        , denominator.days_supply as evidence_value\n        , 1 as numerator_flag\n    from patient_with_pdc \n    inner join denominator\n        on patient_with_pdc.patient_id = denominator.patient_id \n    where patient_with_pdc.adherence >= 80.00 \n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(adherence as numeric(28,6)) as adherence\n        , cast(numerator_flag as integer) as numerator_flag\n    from valid_patients\n\n)\n\nselect\n      patient_id\n    , evidence_date\n    , evidence_value\n    , adherence\n    , numerator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_adhras_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.416754Z", "completed_at": "2024-10-11T23:52:38.450714Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.461966Z", "completed_at": "2024-10-11T23:52:38.461976Z"}], "thread_id": "Thread-5", "execution_time": 0.062087297439575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.pharmacy__brand_generic_opportunity", "compiled": true, "compiled_code": "\n\n/* claimid/line/source grain. calculates opportunity at line level*/\n\nwith  __dbt__cte__pharmacy__stg_pharmacy_claim as (\n\n\nselect \n    p.ndc_code\n  , n.fda_description as ndc_description\n  , p.data_source\n  , n.rxcui\n  , p.paid_amount\n  , p.allowed_amount\n  , p.claim_id\n  , p.claim_line_number\n  , p.patient_id\n  , p.member_id\n  , p.prescribing_provider_id\n  , p.dispensing_provider_id\n  , p.dispensing_date\n  , p.quantity\n  , p.days_supply\n  , p.refills\n  , p.paid_date\nfrom dev_coco.core.pharmacy_claim as p\nleft join dev_coco.terminology.ndc as n \n  on p.ndc_code = n.ndc\n), cpu as (\nselect claim_id\n,claim_line_number\n,data_source\n,case when quantity > 0 then paid_amount/quantity else null end as brand_cost_per_unit\nfrom __dbt__cte__pharmacy__stg_pharmacy_claim\n)\n\n\nselect \n    pc.data_source\n  , pc.claim_id\n  , pc.claim_line_number\n  , cc.ndc_code\n  , cc.ndc_description\n  , cc.rxcui as brand_rxcui\n  , cc.brand_vs_generic \n  , cc.generic_available\n  , pc.paid_amount\n  , pc.quantity as total_units\n  , cpu.brand_cost_per_unit\n  , gc.generic_average_cost_per_unit \n  , cpu.brand_cost_per_unit - gc.generic_average_cost_per_unit as brand_less_generic_cost_per_unit\n  , case \n      when cpu.brand_cost_per_unit - gc.generic_average_cost_per_unit > 0 \n        then (cpu.brand_cost_per_unit - gc.generic_average_cost_per_unit) * pc.quantity \n      else 0 \n    end as generic_available_total_opportunity\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom __dbt__cte__pharmacy__stg_pharmacy_claim as pc\ninner join cpu on pc.claim_id = cpu.claim_id\n  and\n  pc.claim_line_number = cpu.claim_line_number\n  and\n  pc.data_source = cpu.data_source\ninner join dev_coco.pharmacy._int_claims_current_cost cc\n  on cc.ndc_code = pc.ndc_code\n  and\n  cc.data_source = pc.data_source\ninner join dev_coco.pharmacy._int_generic_cost  as gc \n  on cc.rxcui = gc.brand_rxcui\n  and gc.data_source = cc.data_source\nwhere prescribed_atleast_one_generic_history = 1", "relation_name": "dev_coco.pharmacy.brand_generic_opportunity"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.434631Z", "completed_at": "2024-10-11T23:52:38.452396Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.467646Z", "completed_at": "2024-10-11T23:52:38.467653Z"}], "thread_id": "Thread-2", "execution_time": 0.06661200523376465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__pqi_denom_long", "compiled": true, "compiled_code": "\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '01' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_01_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '03' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_03_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '05' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_05_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '07' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_07_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '08' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_08_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '11' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_11_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '12' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_12_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '14' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_14_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '15' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_15_denom as d\n\nunion all\n\nselect\n    d.year_number\n  , d.patient_id\n  , d.data_source\n  , '16' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_16_denom as d", "relation_name": "dev_coco.ahrq_measures.pqi_denom_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.452969Z", "completed_at": "2024-10-11T23:52:38.469601Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.486425Z", "completed_at": "2024-10-11T23:52:38.486434Z"}], "thread_id": "Thread-4", "execution_time": 0.053070068359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__inpatient_skilled_nursing_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n  a.claim_id\n, a.claim_line_number\n, a.claim_line_id\n, 'inpatient' as service_category_1\n, 'skilled nursing' as service_category_2\n, 'skilled nursing' as service_category_3\n, '_int_inpatient_skilled_nursing_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim a\nleft join dev_coco.claims_preprocessing._int_dme_professional b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere claim_type = 'professional'\n  and place_of_service_code in ('31','32')\n  and (b.claim_id is null and b.claim_line_number is null)", "relation_name": "dev_coco.claims_preprocessing._int_inpatient_skilled_nursing_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.458040Z", "completed_at": "2024-10-11T23:52:38.469934Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.486988Z", "completed_at": "2024-10-11T23:52:38.486994Z"}], "thread_id": "Thread-8", "execution_time": 0.039659976959228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.encounters__stg_inpatient_institutional", "compiled": true, "compiled_code": "\n\nselect  \n  claim_id\n, service_type\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_inpatient_institutional a", "relation_name": "dev_coco.claims_preprocessing.encounters__stg_inpatient_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.463173Z", "completed_at": "2024-10-11T23:52:38.481503Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.488439Z", "completed_at": "2024-10-11T23:52:38.488445Z"}], "thread_id": "Thread-6", "execution_time": 0.03936505317687988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__acute_inpatient_institutional_maternity", "compiled": true, "compiled_code": "\n\nselect distinct\n    a.claim_id\n  , 'inpatient' as service_category_1\n  , 'acute inpatient' as service_category_2\n  , case \n      when s.ms_drg_code in ('768', '796', '797', '798', '805', '806', '807') then 'l/d - vaginal delivery'\n      when s.ms_drg_code in ('783', '784', '785', '786', '787', '788') then 'l/d - cesarean delivery'\n      when s.ms_drg_code = '795' then 'l/d - newborn'\n      when s.ms_drg_code in ('789', '790', '791', '792', '793', '794') then 'l/d - newborn nicu'\n      when s.revenue_center_code in ('0173', '0174') then 'l/d - newborn nicu'\n      else 'l/d - other'\n    end as service_category_3\n  , '_int_acute_inpatient_institutional_maternity' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim as s\ninner join dev_coco.dev_coco.service_category__stg_inpatient_institutional as a\n  on s.claim_id = a.claim_id\ninner join dev_coco.terminology.ms_drg as m\n  on s.ms_drg_code = m.ms_drg_code\nwhere \n  m.mdc_code in ('MDC 14', 'MDC 15')", "relation_name": "dev_coco.claims_preprocessing._int_acute_inpatient_institutional_maternity"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.476333Z", "completed_at": "2024-10-11T23:52:38.489047Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.495993Z", "completed_at": "2024-10-11T23:52:38.496000Z"}], "thread_id": "Thread-3", "execution_time": 0.038520097732543945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__acute_inpatient_institutional_other", "compiled": true, "compiled_code": "\n\n\n--simplified by setting lowest priority instead of explicitly doing all the joins\nselect distinct \n  a.claim_id\n  , 'inpatient' as service_category_1\n, 'acute inpatient' as service_category_2\n, 'acute inpatient - other' as service_category_3\n, '_int_acute_inpatient_institutional_other' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim s\ninner join dev_coco.dev_coco.service_category__stg_inpatient_institutional a on s.claim_id = a.claim_id", "relation_name": "dev_coco.claims_preprocessing._int_acute_inpatient_institutional_other"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.470571Z", "completed_at": "2024-10-11T23:52:38.489313Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.496538Z", "completed_at": "2024-10-11T23:52:38.496544Z"}], "thread_id": "Thread-9", "execution_time": 0.04396700859069824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__acute_inpatient_institutional_med_surg", "compiled": true, "compiled_code": "\n\nselect distinct\n    a.claim_id\n  , 'inpatient' as service_category_1\n  , 'acute inpatient' as service_category_2\n  , case \n      when m.medical_surgical = 'M' then 'medical'\n      when m.medical_surgical = 'P' then 'surgical'\n      when m.medical_surgical = 'surgical' then 'surgical'\n      else 'acute inpatient - other' \n    end as service_category_3\n  , '_int_acute_inpatient_institutional_med_surg' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim as s\ninner join dev_coco.dev_coco.service_category__stg_inpatient_institutional as a\n  on s.claim_id = a.claim_id\ninner join dev_coco.terminology.ms_drg as m\n  on s.ms_drg_code = m.ms_drg_code", "relation_name": "dev_coco.claims_preprocessing._int_acute_inpatient_institutional_med_surg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.481818Z", "completed_at": "2024-10-11T23:52:38.490352Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.497714Z", "completed_at": "2024-10-11T23:52:38.497719Z"}], "thread_id": "Thread-10", "execution_time": 0.03500795364379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__inpatient_hospice_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \ns.claim_id\n, 'inpatient' as service_category_1\n, 'inpatient hospice' as service_category_2\n, 'inpatient hospice' as service_category_3\n, '_int_inpatient_hospice_institutional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim s\ninner join dev_coco.dev_coco.service_category__stg_inpatient_institutional a on s.claim_id = a.claim_id\nwhere substring(s.bill_type_code, 1, 2) in ('82')", "relation_name": "dev_coco.claims_preprocessing._int_inpatient_hospice_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.490908Z", "completed_at": "2024-10-11T23:52:38.503587Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.505842Z", "completed_at": "2024-10-11T23:52:38.505850Z"}], "thread_id": "Thread-5", "execution_time": 0.024797916412353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__inpatient_psychiatric_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \ns.claim_id\n, 'inpatient' as service_category_1\n, 'inpatient psychiatric' as service_category_2\n, 'inpatient psychiatric' as service_category_3\n, '_int_inpatient_psychiatric_institutional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim s\ninner join dev_coco.dev_coco.service_category__stg_inpatient_institutional i on s.claim_id = i.claim_id\nwhere s.primary_taxonomy_code in ('283Q00000X'\n                                  ,'273R00000X')", "relation_name": "dev_coco.claims_preprocessing._int_inpatient_psychiatric_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.498210Z", "completed_at": "2024-10-11T23:52:38.506347Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.520852Z", "completed_at": "2024-10-11T23:52:38.520860Z"}], "thread_id": "Thread-2", "execution_time": 0.03342103958129883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__inpatient_rehab_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n  s.claim_id\n, 'inpatient' as service_category_1\n, 'inpatient rehabilitation' as service_category_2\n, 'inpatient rehabilitation' as service_category_3\n, '_int_inpatient_rehab_institutional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim s\ninner join dev_coco.dev_coco.service_category__stg_inpatient_institutional i on s.claim_id = i.claim_id\nwhere s.primary_taxonomy_code in ('283X00000X'\n                                  ,'273Y00000X'\n                                  )", "relation_name": "dev_coco.claims_preprocessing._int_inpatient_rehab_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.506886Z", "completed_at": "2024-10-11T23:52:38.522138Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.535848Z", "completed_at": "2024-10-11T23:52:38.535856Z"}], "thread_id": "Thread-4", "execution_time": 0.03887200355529785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__inpatient_substance_use_institutional", "compiled": true, "compiled_code": "\n\nselect distinct\n    a.claim_id\n  , 'inpatient' as service_category_1\n  , 'inpatient substance use' as service_category_2\n  , 'inpatient substance use' as service_category_3\n  , '_int_inpatient_substance_use_institutional' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim as s\ninner join dev_coco.dev_coco.service_category__stg_inpatient_institutional as a\n  on s.claim_id = a.claim_id\nwhere \n  s.primary_taxonomy_code in (\n      '324500000X'\n    , '261QR0405X'\n    , '101YA0400X'\n  )\n  or s.default_ccsr_category_description_ip in (\n      'MBD026'\n    , 'SYM008'\n    , 'MBD025'\n    , 'SYM009'\n    , 'MBD034'\n  )", "relation_name": "dev_coco.claims_preprocessing._int_inpatient_substance_use_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.512214Z", "completed_at": "2024-10-11T23:52:38.522413Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.536344Z", "completed_at": "2024-10-11T23:52:38.536348Z"}], "thread_id": "Thread-8", "execution_time": 0.03902101516723633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__stg_outpatient_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n  a.claim_id\n, 'outpatient' as service_type\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim a\nleft join dev_coco.dev_coco.service_category__stg_inpatient_institutional i on a.claim_id = i.claim_id\nwhere i.claim_id is null\nand\na.claim_type = 'institutional'", "relation_name": "dev_coco.dev_coco.service_category__stg_outpatient_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.516464Z", "completed_at": "2024-10-11T23:52:38.527460Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.537453Z", "completed_at": "2024-10-11T23:52:38.537459Z"}], "thread_id": "Thread-6", "execution_time": 0.034703731536865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.encounters__stg_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  claim_id\n, claim_line_number\n, claim_line_id\n, service_type\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_professional a", "relation_name": "dev_coco.claims_preprocessing.encounters__stg_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.522667Z", "completed_at": "2024-10-11T23:52:38.537917Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.546518Z", "completed_at": "2024-10-11T23:52:38.546525Z"}], "thread_id": "Thread-3", "execution_time": 0.04111003875732422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__ambulatory_surgery_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n    med.claim_id\n    , med.claim_line_number\n    , med.claim_line_id\n    , 'outpatient' as service_category_1\n, 'ambulatory surgery center' as service_category_2\n, 'ambulatory surgery center' as service_category_3\n, '_int_ambulatory_surgery_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_professional prof on med.claim_id = prof.claim_id \nand\nmed.claim_line_number = prof.claim_line_number\nwhere med.place_of_service_code in ('24')", "relation_name": "dev_coco.claims_preprocessing._int_ambulatory_surgery_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.527741Z", "completed_at": "2024-10-11T23:52:38.538922Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.547614Z", "completed_at": "2024-10-11T23:52:38.547618Z"}], "thread_id": "Thread-9", "execution_time": 0.04108691215515137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__dialysis_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n    med.claim_id\n  , med.claim_line_number\n  , med.claim_line_id\n  , 'outpatient' as service_category_1    \n  , 'dialysis' as service_category_2\n  , 'dialysis' as service_category_3\n  , '_int_dialysis_professional' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim as med\ninner join dev_coco.dev_coco.service_category__stg_professional as prof\n  on med.claim_id = prof.claim_id\n  and med.claim_line_number = prof.claim_line_number\nwhere \n  med.place_of_service_code in ('65')\n  or med.ccs_category in ('91', '58', '57')", "relation_name": "dev_coco.claims_preprocessing._int_dialysis_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.531842Z", "completed_at": "2024-10-11T23:52:38.539193Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.548066Z", "completed_at": "2024-10-11T23:52:38.548070Z"}], "thread_id": "Thread-10", "execution_time": 0.03197908401489258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__emergency_department_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n  med.claim_id\n, med.claim_line_number\n, med.claim_line_id\n, 'outpatient' as service_category_1\n, 'emergency department' as service_category_2\n, 'emergency department' as service_category_3\n, '_int_emergency_department_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_professional prof on med.claim_id = prof.claim_id \nand\nmed.claim_line_number = prof.claim_line_number\nwhere place_of_service_code = '23'\nOR\nhcpcs_code in ('99281','99282','99283','99284','99285','G0380','G0381','G0382','G0383','G0384')", "relation_name": "dev_coco.claims_preprocessing._int_emergency_department_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.539556Z", "completed_at": "2024-10-11T23:52:38.556280Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.558942Z", "completed_at": "2024-10-11T23:52:38.558949Z"}], "thread_id": "Thread-5", "execution_time": 0.03217792510986328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__home_health_professional", "compiled": true, "compiled_code": "\n\nselect distinct\nmed.claim_id\n, med.claim_line_number\n, med.claim_line_id\n, 'outpatient' as service_category_1\n, 'home health' as service_category_2\n, 'home health' as service_category_3\n, '_int_home_health_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_professional prof on med.claim_id = prof.claim_id \nand\nmed.claim_line_number = prof.claim_line_number\nwhere med.place_of_service_code in ('12')", "relation_name": "dev_coco.claims_preprocessing._int_home_health_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.548559Z", "completed_at": "2024-10-11T23:52:38.558700Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.574445Z", "completed_at": "2024-10-11T23:52:38.574454Z"}], "thread_id": "Thread-2", "execution_time": 0.03740334510803223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__inpatient_hospice_professional", "compiled": true, "compiled_code": "\n\nselect distinct\nmed.claim_id\n, med.claim_line_number\n, med.claim_line_id\n, 'inpatient' as service_category_1\n, 'inpatient hospice' as service_category_2\n, 'inpatient hospice' as service_category_3\n,'_int_inpatient_hospice_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_professional prof on med.claim_id = prof.claim_id \nand\nmed.claim_line_number = prof.claim_line_number\nwhere place_of_service_code in ('34')", "relation_name": "dev_coco.claims_preprocessing._int_inpatient_hospice_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.564222Z", "completed_at": "2024-10-11T23:52:38.578073Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.594105Z", "completed_at": "2024-10-11T23:52:38.594114Z"}], "thread_id": "Thread-8", "execution_time": 0.04688692092895508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__observation_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n    med.claim_id\n  , med.claim_line_number\n  , med.claim_line_id\n  , 'outpatient' as service_category_1\n  , 'observation' as service_category_2\n  , 'observation' as service_category_3\n  , '_int_observation_professional' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim as med\ninner join dev_coco.dev_coco.service_category__stg_professional as prof\n  on med.claim_id = prof.claim_id\n  and med.claim_line_number = prof.claim_line_number\nwhere \n  med.hcpcs_code in ('G0378', 'G0379')", "relation_name": "dev_coco.claims_preprocessing._int_observation_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.559694Z", "completed_at": "2024-10-11T23:52:38.578447Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.594621Z", "completed_at": "2024-10-11T23:52:38.594625Z"}], "thread_id": "Thread-4", "execution_time": 0.047666072845458984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__lab_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n  med.claim_id\n, med.claim_line_number\n, med.claim_line_id\n, 'ancillary' as service_category_1  \n, 'lab' as service_category_2\n, 'lab' as service_category_3\n,'_int_lab_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_professional prof on med.claim_id = prof.claim_id \nand\nmed.claim_line_number = prof.claim_line_number\nwhere place_of_service_code = '81'\nOR\nmed.ccs_category in ('233' -- lab\n,'235' --other lab\n,'234' --pathology\n)", "relation_name": "dev_coco.claims_preprocessing._int_lab_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.570158Z", "completed_at": "2024-10-11T23:52:38.585129Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.595890Z", "completed_at": "2024-10-11T23:52:38.595895Z"}], "thread_id": "Thread-6", "execution_time": 0.039981842041015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_hospice_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  med.claim_id\n, med.claim_line_number\n, med.claim_line_id\n, 'outpatient' as service_category_1    \n, 'outpatient hospice' as service_category_2\n, 'outpatient hospice' as service_category_3\n, '_int_outpatient_hospice_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_professional prof on med.claim_id = prof.claim_id \nand\nmed.claim_line_number = prof.claim_line_number\nwhere \nmed.hcpcs_code in ('Q5001','Q5002','Q5003','Q5009')", "relation_name": "dev_coco.claims_preprocessing._int_outpatient_hospice_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.579734Z", "completed_at": "2024-10-11T23:52:38.596571Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.604099Z", "completed_at": "2024-10-11T23:52:38.604106Z"}], "thread_id": "Thread-3", "execution_time": 0.044790029525756836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n    med.claim_id\n  , med.claim_line_number\n  , med.claim_line_id\n  , 'outpatient' as service_category_1\n  , 'outpatient hospital or clinic' as service_category_2\n  , 'outpatient hospital or clinic' as service_category_3\n  , '_int_outpatient_hospital_or_clinic_professional' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim as med\ninner join dev_coco.dev_coco.service_category__stg_professional as prof\n  on med.claim_id = prof.claim_id\n  and med.claim_line_number = prof.claim_line_number\nwhere \n  med.place_of_service_code in ('15', '17', '19', '22', '49', '50', '60', '71', '72')", "relation_name": "dev_coco.claims_preprocessing._int_outpatient_hospital_or_clinic_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.585526Z", "completed_at": "2024-10-11T23:52:38.596833Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.604789Z", "completed_at": "2024-10-11T23:52:38.604794Z"}], "thread_id": "Thread-9", "execution_time": 0.03618001937866211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_physical_therapy_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  med.claim_id\n, med.claim_line_number\n, med.claim_line_id\n, 'outpatient' as service_category_1    \n, 'outpatient pt/ot/st' as service_category_2\n, 'outpatient pt/ot/st' as service_category_3\n, 'service_category__outpatient_physical_therapy_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_professional prof on med.claim_id = prof.claim_id \nand\nmed.claim_line_number = prof.claim_line_number\nwhere (ccs_category in ('213','212','215')\nOR\nmed.primary_specialty_description IN (\n        'Occupational Health'\n        ,'Occupational Medicine'\n        ,'Occupational Therapist in Private Practice'\n        ,'Occupational Therapy Assistant'\n        ,'Physical Therapist'\n        ,'Physical Therapist in Private Practice'\n        ,'Physical Therapy Assistant'\n        ,'Speech Language Pathologist'\n        ,'Speech-Language Assistant'\n    ))\nAND\nplace_of_service_code <> '11'", "relation_name": "dev_coco.claims_preprocessing.service_category__outpatient_physical_therapy_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.589687Z", "completed_at": "2024-10-11T23:52:38.598685Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.610263Z", "completed_at": "2024-10-11T23:52:38.610270Z"}], "thread_id": "Thread-10", "execution_time": 0.04126691818237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_substance_use_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n    med.claim_id\n  , med.claim_line_number\n  , med.claim_line_id\n  , 'outpatient' as service_category_1\n  , 'outpatient substance use' as service_category_2\n  , 'outpatient substance use' as service_category_3\n  , 'service_category__outpatient_substance_use_professional' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim as med\ninner join dev_coco.dev_coco.service_category__stg_professional as prof\n  on med.claim_id = prof.claim_id\n  and med.claim_line_number = prof.claim_line_number\nwhere \n  med.default_ccsr_category_description_op in (\n      'MBD026'\n    , 'SYM008'\n    , 'MBD025'\n    , 'SYM009'\n    , 'MBD034'\n  )\n  and med.place_of_service_code <> '11'", "relation_name": "dev_coco.claims_preprocessing.service_category__outpatient_substance_use_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.598980Z", "completed_at": "2024-10-11T23:52:38.611826Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.614073Z", "completed_at": "2024-10-11T23:52:38.614078Z"}], "thread_id": "Thread-5", "execution_time": 0.03472304344177246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_surgery_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n    med.claim_id\n  , med.claim_line_number\n  , 'outpatient' as service_category_1    \n  , 'outpatient surgery' as service_category_2\n  , 'outpatient surgery' as service_category_3\n  , 'service_category__outpatient_surgery_professional' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_professional prof on med.claim_id = prof.claim_id \nand\nmed.claim_line_number = prof.claim_line_number\nwhere\n(ccs_category between '1' and '176'\nor\nccs_category in ('229','230','231','232','244'))\nand\nplace_of_service_code in ('15','17','19','22','49','50','60','71','72')", "relation_name": "dev_coco.claims_preprocessing.service_category__outpatient_surgery_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.606057Z", "completed_at": "2024-10-11T23:52:38.613542Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.710208Z", "completed_at": "2024-10-11T23:52:38.710217Z"}], "thread_id": "Thread-2", "execution_time": 0.11523199081420898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__pharmacy_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n    med.claim_id\n    , med.claim_line_number\n    , med.claim_line_id\n    , case when place_of_service_code = '11' then 'office-based' else 'outpatient' end as service_category_1\n    , 'pharmacy' as service_category_2\n    , 'pharmacy' as service_category_3\n    ,'service_category__pharmacy_professional' as source_model_name\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_professional prof on med.claim_id = prof.claim_id \nand\nmed.claim_line_number = prof.claim_line_number\nwhere\nccs_category = '240' --medications", "relation_name": "dev_coco.claims_preprocessing.service_category__pharmacy_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.619603Z", "completed_at": "2024-10-11T23:52:38.728474Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.748492Z", "completed_at": "2024-10-11T23:52:38.748499Z"}], "thread_id": "Thread-4", "execution_time": 0.1428999900817871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors", "compiled": true, "compiled_code": "\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from dev_coco.cms_hcc._int_demographic_factors\n\n)\n\n, seed_interaction_factors as (\n\n    select\n          model_version\n        , factor_type\n        , gender\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , institutional_status\n        , description\n        , coefficient\n    from dev_coco.cms_hcc._value_set_enrollment_interaction_factors\n\n)\n\n/*\n    Originally disabled interactions for non-institutional members >= 65\n*/\n, non_institutional_interactions as (\n\n    select\n          demographics.patient_id\n        , demographics.model_version\n        , demographics.payment_year\n        , seed_interaction_factors.factor_type\n        , seed_interaction_factors.description\n        , seed_interaction_factors.coefficient\n    from demographics\n        inner join seed_interaction_factors\n            on demographics.gender = seed_interaction_factors.gender\n            and demographics.enrollment_status = seed_interaction_factors.enrollment_status\n            and demographics.medicaid_status = seed_interaction_factors.medicaid_status\n            and demographics.dual_status = seed_interaction_factors.dual_status\n            and demographics.institutional_status = seed_interaction_factors.institutional_status\n            and demographics.model_version = seed_interaction_factors.model_version\n    where demographics.institutional_status = 'No'\n        and demographics.orec = 'Disabled'\n        and demographics.age_group in (\n              '65-69'\n            , '70-74'\n            , '75-79'\n            , '80-84'\n            , '85-89'\n            , '90-94'\n            , '>=95'\n        )\n\n)\n\n/*\n    Medicaid interactions for institutional members\n*/\n, institutional_interactions as (\n\n    select\n          demographics.patient_id\n        , demographics.model_version\n        , demographics.payment_year\n        , seed_interaction_factors.factor_type\n        , seed_interaction_factors.description\n        , seed_interaction_factors.coefficient\n    from demographics\n        inner join seed_interaction_factors\n            on demographics.enrollment_status = seed_interaction_factors.enrollment_status\n            and demographics.institutional_status = seed_interaction_factors.institutional_status\n            and demographics.model_version = seed_interaction_factors.model_version\n    where demographics.institutional_status = 'Yes'\n        and demographics.medicaid_status = 'Yes'\n\n)\n\n, unioned as (\n\n    select * from non_institutional_interactions\n    union all\n    select * from institutional_interactions\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(description as TEXT) as description\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(factor_type as TEXT) as factor_type\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from unioned\n\n)\n\nselect\n      patient_id\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.cms_hcc._int_enrollment_interaction_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.614534Z", "completed_at": "2024-10-11T23:52:38.728768Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.748971Z", "completed_at": "2024-10-11T23:52:38.748976Z"}], "thread_id": "Thread-8", "execution_time": 0.14375877380371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__stg_office_based", "compiled": true, "compiled_code": "\n\nselect distinct \n  a.claim_id\n  , a.claim_line_number\n  , a.claim_line_id\n  , 'office based' as service_type\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim a\ninner join  dev_coco.dev_coco.service_category__stg_professional p on a.claim_id = p.claim_id \nand\na.claim_line_number = p.claim_line_number\nwhere a.place_of_service_code in ( '11' -- office\n,'02' --telehealth \n,'10' --telehealth\n)", "relation_name": "dev_coco.dev_coco.service_category__stg_office_based"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.705204Z", "completed_at": "2024-10-11T23:52:38.743578Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.749941Z", "completed_at": "2024-10-11T23:52:38.749947Z"}], "thread_id": "Thread-6", "execution_time": 0.13921189308166504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_cms_hcc__int_demographic_factors_patient_id__model_version.d5ad3bc1ba", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        patient_id, model_version\n    from dev_coco.cms_hcc._int_demographic_factors\n    group by patient_id, model_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.738896Z", "completed_at": "2024-10-11T23:52:38.750732Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.758465Z", "completed_at": "2024-10-11T23:52:38.758473Z"}], "thread_id": "Thread-9", "execution_time": 0.1447761058807373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_pharmacy__brand_generic_opportunity_data_source__claim_id__claim_line_number.c19d0cecc7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        data_source, claim_id, claim_line_number\n    from dev_coco.pharmacy.brand_generic_opportunity\n    group by data_source, claim_id, claim_line_number\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.715008Z", "completed_at": "2024-10-11T23:52:38.751002Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.759074Z", "completed_at": "2024-10-11T23:52:38.759079Z"}], "thread_id": "Thread-3", "execution_time": 0.1458742618560791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.pharmacy__pharmacy_claim_expanded", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__pharmacy__stg_pharmacy_claim as (\n\n\nselect \n    p.ndc_code\n  , n.fda_description as ndc_description\n  , p.data_source\n  , n.rxcui\n  , p.paid_amount\n  , p.allowed_amount\n  , p.claim_id\n  , p.claim_line_number\n  , p.patient_id\n  , p.member_id\n  , p.prescribing_provider_id\n  , p.dispensing_provider_id\n  , p.dispensing_date\n  , p.quantity\n  , p.days_supply\n  , p.refills\n  , p.paid_date\nfrom dev_coco.core.pharmacy_claim as p\nleft join dev_coco.terminology.ndc as n \n  on p.ndc_code = n.ndc\n), all_drugs as (\n  select \n      p.data_source\n    , p.claim_id\n    , p.claim_line_number\n    , p.patient_id\n    , p.member_id\n    , p.prescribing_provider_id\n    , p.dispensing_provider_id\n    , p.dispensing_date\n    , p.ndc_code\n    , p.ndc_description\n    , p.quantity\n    , p.days_supply\n    , p.refills\n    , p.paid_date\n    , p.paid_amount\n    , p.allowed_amount\n    , p.rxcui\n    , r.product_name\n    , r.product_tty\n    , r.brand_vs_generic\n    , r.brand_name\n    , r.clinical_product_rxcui as generic_rxcui\n    , r.clinical_product_name as generic_rxcui_description\n    , r.clinical_product_tty as generic_tty\n    , r.ingredient_name\n    , r.dose_form_name\n    , case \n        when ga.brand_with_generic_available is not null \n          then 'brand_with_generic_available' \n        else r.brand_vs_generic \n      end as generic_available\n    , opp.brand_cost_per_unit\n    , opp.generic_average_cost_per_unit\n    , opp.brand_less_generic_cost_per_unit\n    , opp.generic_available_total_opportunity\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n  from __dbt__cte__pharmacy__stg_pharmacy_claim as p\n  left join dev_coco.terminology.rxnorm_brand_generic as r \n    on p.rxcui = r.product_rxcui\n  left join dev_coco.pharmacy._int_brand_with_generic_available as ga \n    on p.rxcui = ga.brand_with_generic_available\n  left join dev_coco.pharmacy.brand_generic_opportunity as opp \n    on p.claim_id = opp.claim_id\n    and p.claim_line_number = opp.claim_line_number\n    and p.data_source = opp.data_source\n)\n\n, generic_available as (\n  select \n      *\n    , row_number() over (order by ndc_code, data_source) as generic_available_sk\n  from all_drugs\n  where generic_available = 'brand_with_generic_available'\n)\n\nselect \n    a.data_source\n  , a.claim_id\n  , a.claim_line_number\n  , a.patient_id\n  , a.member_id\n  , a.prescribing_provider_id\n  , a.dispensing_provider_id\n  , a.dispensing_date\n  , a.ndc_code\n  , a.ndc_description\n  , a.quantity\n  , a.days_supply\n  , a.refills\n  , a.paid_date\n  , a.paid_amount\n  , a.allowed_amount\n  , a.rxcui\n  , a.product_name\n  , a.product_tty\n  , a.brand_vs_generic\n  , a.brand_name\n  , a.generic_rxcui\n  , a.generic_rxcui_description\n  , a.generic_tty\n  , a.ingredient_name\n  , a.dose_form_name\n  , a.generic_available\n  , a.brand_cost_per_unit\n  , a.generic_average_cost_per_unit\n  , a.brand_less_generic_cost_per_unit\n  , a.generic_available_total_opportunity\n  , g.generic_available_sk\nfrom all_drugs as a\nleft join generic_available as g \n  on a.claim_id = g.claim_id\n  and a.claim_line_number = g.claim_line_number\n  and a.data_source = g.data_source", "relation_name": "dev_coco.pharmacy.pharmacy_claim_expanded"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.744182Z", "completed_at": "2024-10-11T23:52:38.752254Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.760581Z", "completed_at": "2024-10-11T23:52:38.760586Z"}], "thread_id": "Thread-10", "execution_time": 0.061132192611694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.encounters__stg_outpatient_institutional", "compiled": true, "compiled_code": "\n\n\nselect distinct \n  claim_id\n, service_type\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_outpatient_institutional a", "relation_name": "dev_coco.claims_preprocessing.encounters__stg_outpatient_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.754062Z", "completed_at": "2024-10-11T23:52:38.768671Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.774953Z", "completed_at": "2024-10-11T23:52:38.774961Z"}], "thread_id": "Thread-5", "execution_time": 0.03122687339782715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__ambulance_institutional", "compiled": true, "compiled_code": "\n\nselect distinct\n    med.claim_id\n  , med.claim_line_number\n  , med.claim_line_id\n  , 'ancillary' as service_category_1\n  , 'ambulance' as service_category_2\n  , 'ambulance' as service_category_3\n  , '_int_ambulance_institutional' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim as med\ninner join dev_coco.dev_coco.service_category__stg_outpatient_institutional as outpatient\n  on med.claim_id = outpatient.claim_id\nwhere \n  (med.hcpcs_code between 'A0425' and 'A0436')\n  or med.revenue_center_code = '0540'", "relation_name": "dev_coco.claims_preprocessing._int_ambulance_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.761529Z", "completed_at": "2024-10-11T23:52:38.770154Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.786120Z", "completed_at": "2024-10-11T23:52:38.786128Z"}], "thread_id": "Thread-2", "execution_time": 0.036715030670166016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__ambulatory_surgery_institutional", "compiled": true, "compiled_code": "\n\nwith multiple_sources as (\nselect distinct \n    med.claim_id\n    , 'ambulatory surgery center' as service_category_2\n    , 'ambulatory surgery center' as service_category_3\n    , '_int_ambulatory_surgery_institutional' as source_model_name\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_outpatient_institutional outpatient\n    on med.claim_id = outpatient.claim_id\nwhere revenue_center_code in ('0490','0499')\n\nunion all\n\nselect distinct \n    med.claim_id\n    , 'ambulatory surgery center' as service_category_2\n    , 'ambulatory surgery center' as service_category_3\n    , '_int_ambulatory_surgery_institutional' as source_model_name\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_outpatient_institutional outpatient\n    on med.claim_id = outpatient.claim_id\nwhere med.primary_taxonomy_code = '261QA1903X'\n)\n\nselect distinct claim_id\n, 'outpatient' as service_category_1\n,service_category_2\n,service_category_3\n,source_model_name\n,tuva_last_run\nfrom multiple_sources", "relation_name": "dev_coco.claims_preprocessing._int_ambulatory_surgery_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.770388Z", "completed_at": "2024-10-11T23:52:38.787304Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.802357Z", "completed_at": "2024-10-11T23:52:38.802365Z"}], "thread_id": "Thread-4", "execution_time": 0.0424959659576416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__dialysis_institutional", "compiled": true, "compiled_code": "\n\nselect distinct\n    med.claim_id\n  , 'outpatient' as service_category_1\n  , 'dialysis' as service_category_2\n  , 'dialysis' as service_category_3\n  , '_int_dialysis_institutional' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim as med\ninner join dev_coco.dev_coco.service_category__stg_outpatient_institutional as outpatient\n  on med.claim_id = outpatient.claim_id\nwhere \n  substring(med.bill_type_code, 1, 2) in ('72')\n  or med.primary_taxonomy_code in (\n      '2472R0900X'\n    , '163WD1100X'\n    , '163WH0500X'\n    , '261QE0700X'\n  )\n  or med.ccs_category in ('91', '58', '57')\n  or substring(med.revenue_center_code, 1, 3) in ('082', '083', '084', '085', '088')", "relation_name": "dev_coco.claims_preprocessing._int_dialysis_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.781582Z", "completed_at": "2024-10-11T23:52:38.797145Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.802953Z", "completed_at": "2024-10-11T23:52:38.802957Z"}], "thread_id": "Thread-6", "execution_time": 0.036108970642089844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__lab_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n  med.claim_id\n, med.claim_line_number\n, 'ancillary' as service_category_1  \n, 'lab' as service_category_2\n, 'lab' as service_category_3\n,'_int_lab_institutional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_outpatient_institutional outpatient\n    on med.claim_id = outpatient.claim_id\nwhere substring(med.bill_type_code, 1, 2) in ('14')\nOR\nmed.ccs_category in ('233' -- lab\n,'235' --other lab\n,'234' --pathology\n)", "relation_name": "dev_coco.claims_preprocessing._int_lab_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.775500Z", "completed_at": "2024-10-11T23:52:38.797715Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.803792Z", "completed_at": "2024-10-11T23:52:38.803797Z"}], "thread_id": "Thread-8", "execution_time": 0.04272913932800293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__emergency_department_institutional", "compiled": true, "compiled_code": "\n\nwith multiple_sources as (\nselect distinct \n    med.claim_id\n    , 'emergency department' as service_category_2\n    , 'emergency department' as service_category_3\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n    , '_int_emergency_department_institutional' as source_model_name\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_outpatient_institutional outpatient\n    on med.claim_id = outpatient.claim_id\nwhere revenue_center_code in ('0450','0451','0452','0459','0981')\nOR\nhcpcs_code in ('99281','99282','99283','99284','99285','G0380','G0381','G0382','G0383','G0384')\n  \nunion all\n\n--Adding in inpatient claims for flagging encounters with ED \nselect distinct \n    med.claim_id\n    , 'emergency department' as service_category_2\n    , 'emergency department' as service_category_3\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n    , '_int_emergency_department_institutional' as source_model_name\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_inpatient_institutional inp\n    on med.claim_id = inp.claim_id\nwhere revenue_center_code in ('0450','0451','0452','0459','0981')\n\n)\n\nselect claim_id\n, 'outpatient' as service_category_1\n,service_category_2\n,service_category_3\n,tuva_last_run\n,source_model_name\nfrom multiple_sources", "relation_name": "dev_coco.claims_preprocessing._int_emergency_department_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.787659Z", "completed_at": "2024-10-11T23:52:38.804233Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.806534Z", "completed_at": "2024-10-11T23:52:38.806538Z"}], "thread_id": "Thread-9", "execution_time": 0.03708505630493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_hospice_institutional", "compiled": true, "compiled_code": "\n\nselect distinct\n    med.claim_id\n  , 'outpatient' as service_category_1\n  , 'outpatient hospice' as service_category_2\n  , 'outpatient hospice' as service_category_3\n  , '_int_outpatient_hospice_institutional' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim as med\ninner join dev_coco.dev_coco.service_category__stg_outpatient_institutional as outpatient\n  on med.claim_id = outpatient.claim_id\nwhere \n  substring(med.bill_type_code, 1, 2) in ('81')\n  or (\n    med.hcpcs_code in ('Q5001', 'Q5002', 'Q5003', 'Q5009')\n    and substring(med.bill_type_code, 1, 2) not in ('31', '32', '33')\n  )\n  or med.revenue_center_code in ('0651', '0652')", "relation_name": "dev_coco.claims_preprocessing._int_outpatient_hospice_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.791857Z", "completed_at": "2024-10-11T23:52:38.804510Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.806995Z", "completed_at": "2024-10-11T23:52:38.806999Z"}], "thread_id": "Thread-3", "execution_time": 0.03721117973327637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional", "compiled": true, "compiled_code": "\n\nwith multiple_sources as (\n    select distinct \n        m.claim_id\n      , 'outpatient hospital or clinic' as service_category_2\n      , 'outpatient hospital or clinic' as service_category_3\n      , '_int_outpatient_hospital_or_clinic_institutional' as source_model_name\n      , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n    from dev_coco.dev_coco.service_category__stg_medical_claim as m\n    inner join dev_coco.dev_coco.service_category__stg_outpatient_institutional as o\n      on m.claim_id = o.claim_id\n    where \n      substring(m.bill_type_code, 1, 2) in ('13', '71', '73')\n\n    union all\n\n    select distinct\n        m.claim_id\n      , 'outpatient hospital or clinic' as service_category_2\n      , 'outpatient hospital or clinic' as service_category_3\n      , '_int_outpatient_hospital_or_clinic_institutional' as source_model_name\n      , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n    from dev_coco.dev_coco.service_category__stg_medical_claim as m\n    inner join dev_coco.dev_coco.service_category__stg_outpatient_institutional as o\n      on m.claim_id = o.claim_id\n    where \n      m.ccs_category = '227' -- Consultation, evaluation, and preventative care\n)\n\nselect distinct\n    claim_id\n  , 'outpatient' as service_category_1\n  , service_category_2\n  , service_category_3\n  , source_model_name\n  , tuva_last_run\nfrom multiple_sources", "relation_name": "dev_coco.claims_preprocessing._int_outpatient_hospital_or_clinic_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.798029Z", "completed_at": "2024-10-11T23:52:38.805704Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.813424Z", "completed_at": "2024-10-11T23:52:38.813431Z"}], "thread_id": "Thread-10", "execution_time": 0.03883790969848633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_physical_therapy_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n    med.claim_id\n    , med.claim_line_number\n    ,'outpatient' as service_category_1    \n    , 'outpatient pt/ot/st' as service_category_2\n    , 'outpatient pt/ot/st' as service_category_3\n    ,'service_category__outpatient_physical_therapy_institutional' as source_model_name\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_outpatient_institutional o on med.claim_id = o.claim_id\nwhere ccs_category in ('213','212','215')", "relation_name": "dev_coco.claims_preprocessing.service_category__outpatient_physical_therapy_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.807443Z", "completed_at": "2024-10-11T23:52:38.820931Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.831056Z", "completed_at": "2024-10-11T23:52:38.831063Z"}], "thread_id": "Thread-5", "execution_time": 0.029089927673339844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_psychiatric_institutional", "compiled": true, "compiled_code": "\nwith multiple_sources as (\n\nselect distinct \n  m.claim_id\n, 'outpatient psychiatric' as service_category_2\n, 'outpatient psychiatric' as service_category_3\n,'_int_outpatient_psychiatric_institutional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim m\ninner join dev_coco.dev_coco.service_category__stg_outpatient_institutional i on m.claim_id = i.claim_id\nwhere substring(m.bill_type_code, 1, 2) in ('52')\n\nunion all\n\nselect distinct \n  m.claim_id\n, 'outpatient psychiatric' as service_category_2\n, 'outpatient psychiatric' as service_category_3\n,'_int_outpatient_psychiatric_institutional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim m\ninner join dev_coco.dev_coco.service_category__stg_outpatient_institutional i on m.claim_id = i.claim_id\nwhere m.primary_taxonomy_code in ('283Q00000X'\n                                  ,'273R00000X')\n)\n\nselect distinct claim_id\n,'outpatient' as service_category_1    \n,service_category_2\n,service_category_3\n,source_model_name\n,tuva_last_run\nfrom multiple_sources", "relation_name": "dev_coco.claims_preprocessing._int_outpatient_psychiatric_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.813885Z", "completed_at": "2024-10-11T23:52:38.821728Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.835875Z", "completed_at": "2024-10-11T23:52:38.835881Z"}], "thread_id": "Thread-2", "execution_time": 0.03246784210205078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_radiology_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n  med.claim_id\n, med.claim_line_number\n, 'outpatient' as service_category_1    \n, 'outpatient radiology' as service_category_2\n, case when med.modality = 'Nuclear medicine' then 'pet'\n        when med.modality = 'Magnetic resonance' then 'mri'\n        when med.modality = 'Computerized tomography' then 'ct'\n        when med.modality in ('Invasive', 'Ultrasound', 'Computer-aided detection', 'Three-dimensional reconstruction', 'Radiography') then 'general'\n        else 'general' \n        end as service_category_3\n, 'service_category__outpatient_radiology_institutional' as source_model_name           \n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_outpatient_institutional o on med.claim_id = o.claim_id\nwhere med.modality is not null", "relation_name": "dev_coco.claims_preprocessing.service_category__outpatient_radiology_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.826544Z", "completed_at": "2024-10-11T23:52:38.837364Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.853425Z", "completed_at": "2024-10-11T23:52:38.853432Z"}], "thread_id": "Thread-6", "execution_time": 0.04035782814025879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_rehab_institutional", "compiled": true, "compiled_code": "\n\nwith multiple_sources as (\n    select distinct \n        m.claim_id\n      , 'outpatient rehabilitation' as service_category_2\n      , 'outpatient rehabilitation' as service_category_3\n      , 'service_category__outpatient_rehab_institutional' as source_model_name\n      , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n    from dev_coco.dev_coco.service_category__stg_medical_claim as m\n    inner join dev_coco.dev_coco.service_category__stg_outpatient_institutional as i\n      on m.claim_id = i.claim_id\n    where \n      m.primary_taxonomy_code in (\n          '283X00000X'\n        , '273Y00000X'\n        , '261QR0400X'\n        , '315D00000X'\n        , '261QR0401X'\n        , '208100000X'\n        , '225400000X'\n        , '324500000X'\n        , '2278P1005X'\n        , '261QR0405X'\n        , '2081S0010X'\n        , '261QR0404X'\n      )\n)\n\nselect distinct\n    claim_id\n  , 'outpatient' as service_category_1\n  , service_category_2\n  , service_category_3\n  , source_model_name\n  , tuva_last_run\nfrom multiple_sources", "relation_name": "dev_coco.claims_preprocessing.service_category__outpatient_rehab_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.822252Z", "completed_at": "2024-10-11T23:52:38.837712Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.853901Z", "completed_at": "2024-10-11T23:52:38.853905Z"}], "thread_id": "Thread-4", "execution_time": 0.04113268852233887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_radiology_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n  med.claim_id\n, med.claim_line_number\n, med.claim_line_id\n, 'outpatient' as service_category_1    \n, 'outpatient radiology' as service_category_2\n, case when med.modality = 'Nuclear medicine' then 'pet'\n        when med.modality = 'Magnetic resonance' then 'mri'\n        when med.modality = 'Computerized tomography' then 'ct'\n        when med.modality in ('Invasive', 'Ultrasound', 'Computer-aided detection', 'Three-dimensional reconstruction', 'Radiography') then 'general'\n        else 'general' \n        end as service_category_3\n, 'service_category__outpatient_radiology_professional' as source_model_name           \n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_outpatient_institutional o on med.claim_id = o.claim_id\nwhere med.modality is not null\nand\nplace_of_service_code <> '11'", "relation_name": "dev_coco.claims_preprocessing.service_category__outpatient_radiology_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.831544Z", "completed_at": "2024-10-11T23:52:38.847806Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.854779Z", "completed_at": "2024-10-11T23:52:38.854784Z"}], "thread_id": "Thread-8", "execution_time": 0.03592228889465332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_substance_use_institutional", "compiled": true, "compiled_code": "\n\nselect distinct\n    med.claim_id\n  , 'outpatient' as service_category_1\n  , 'outpatient substance use' as service_category_2\n  , 'outpatient substance use' as service_category_3\n  , 'service_category__outpatient_substance_use_institutional' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim as med\ninner join dev_coco.dev_coco.service_category__stg_outpatient_institutional as o\n  on med.claim_id = o.claim_id\nwhere \n  med.default_ccsr_category_description_op in (\n      'MBD026'\n    , 'SYM008'\n    , 'MBD025'\n    , 'SYM009'\n    , 'MBD034'\n  )\n  or med.primary_taxonomy_code in (\n      '324500000X'\n    , '261QR0405X'\n    , '101YA0400X'\n  )", "relation_name": "dev_coco.claims_preprocessing.service_category__outpatient_substance_use_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.837975Z", "completed_at": "2024-10-11T23:52:38.855239Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.857590Z", "completed_at": "2024-10-11T23:52:38.857594Z"}], "thread_id": "Thread-9", "execution_time": 0.03620004653930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_surgery_institutional", "compiled": true, "compiled_code": "\n\nselect distinct \n    med.claim_id --claim level\n  , 'outpatient' as service_category_1    \n  , 'outpatient surgery' as service_category_2\n  , 'outpatient surgery' as service_category_3\n  , 'service_category__outpatient_surgery_institutional' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_outpatient_institutional o on med.claim_id = o.claim_id\nwhere\nccs_category between '1' and '176'\nor\nccs_category in ('229','230','231','232','244')", "relation_name": "dev_coco.claims_preprocessing.service_category__outpatient_surgery_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.842482Z", "completed_at": "2024-10-11T23:52:38.855543Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.858069Z", "completed_at": "2024-10-11T23:52:38.858072Z"}], "thread_id": "Thread-3", "execution_time": 0.03615212440490723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__pharmacy_institutional", "compiled": true, "compiled_code": "\n\nwith multiple_sources as (\n    select distinct \n        med.claim_id\n      , med.claim_line_number\n      , 'outpatient' as service_category_1\n      , 'pharmacy' as service_category_2\n      , 'pharmacy' as service_category_3\n      , 'service_category__pharmacy_institutional' as source_model_name\n      , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n    from dev_coco.dev_coco.service_category__stg_medical_claim as med\n    inner join dev_coco.dev_coco.service_category__stg_outpatient_institutional as outpatient\n      on med.claim_id = outpatient.claim_id\n    where \n      (substring(med.revenue_center_code, 1, 3) in ('025', '026', '063', '089') -- pharmacy and iv therapy\n      or med.revenue_center_code = '0547'\n      or med.ccs_category = '240') -- medications\n\n    union all\n\n    select distinct \n        med.claim_id\n      , med.claim_line_number\n      , 'inpatient' as service_category_1\n      , 'pharmacy' as service_category_2\n      , 'pharmacy' as service_category_3\n      , 'service_category__pharmacy_institutional' as source_model_name\n      , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n    from dev_coco.dev_coco.service_category__stg_medical_claim as med\n    inner join dev_coco.dev_coco.service_category__stg_inpatient_institutional as outpatient\n      on med.claim_id = outpatient.claim_id\n    where \n      (substring(med.revenue_center_code, 1, 3) in ('025', '026', '063', '089') -- pharmacy and iv therapy\n      or med.revenue_center_code = '0547')\n)\n\nselect \n    claim_id\n  , claim_line_number\n  , service_category_1\n  , service_category_2\n  , service_category_3\n  , source_model_name\n  , tuva_last_run\nfrom multiple_sources", "relation_name": "dev_coco.claims_preprocessing.service_category__pharmacy_institutional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.848086Z", "completed_at": "2024-10-11T23:52:38.856413Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.863428Z", "completed_at": "2024-10-11T23:52:38.863435Z"}], "thread_id": "Thread-10", "execution_time": 0.03276228904724121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__office_based_physical_therapy_professional", "compiled": true, "compiled_code": "\n\nselect distinct \n    med.claim_id\n    , med.claim_line_number\n    , med.claim_line_id\n    , 'office-based' as service_category_1    \n    , 'office-based pt/ot/st' as service_category_2\n    , 'office-based pt/ot/st' as service_category_3\n    ,'service_category__office_based_physical_therapy_professional' as source_model_name\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_office_based prof on med.claim_id = prof.claim_id \nand\nmed.claim_line_number = prof.claim_line_number\nwhere (\nccs_category in ('213','212','215')\nOR\n med.rend_primary_specialty_description IN (\n        'Occupational Health'\n        ,'Occupational Medicine'\n        ,'Occupational Therapist in Private Practice'\n        ,'Occupational Therapy Assistant'\n        ,'Physical Therapist'\n        ,'Physical Therapist in Private Practice'\n        ,'Physical Therapy Assistant'\n        ,'Speech Language Pathologist'\n        ,'Speech-Language Assistant'\n    ))\nand place_of_service_code = '11'", "relation_name": "dev_coco.claims_preprocessing.service_category__office_based_physical_therapy_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.858514Z", "completed_at": "2024-10-11T23:52:38.877455Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.884623Z", "completed_at": "2024-10-11T23:52:38.884630Z"}], "thread_id": "Thread-5", "execution_time": 0.031597137451171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__office_based_radiology", "compiled": true, "compiled_code": "\n\nselect distinct \n    med.claim_id\n    , med.claim_line_number\n    , med.claim_line_id\n    , 'office-based' as service_category_1    \n    , 'office-based radiology' as service_category_2\n    , case when med.modality = 'Nuclear medicine' then 'pet'\n           when med.modality = 'Magnetic resonance' then 'mri'\n           when med.modality = 'Computerized tomography' then 'ct'\n           when med.modality in ('Invasive', 'Ultrasound', 'Computer-aided detection', 'Three-dimensional reconstruction', 'Radiography') then 'general'\n           else 'general' \n           end as service_category_3\n    ,'service_category__office_based_radiology' as source_model_name\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim med\ninner join dev_coco.dev_coco.service_category__stg_office_based o on med.claim_id = o.claim_id\nand\nmed.claim_line_number = o.claim_line_number\nwhere \nmed.modality is not null\nand\nmed.place_of_service_code = '11'", "relation_name": "dev_coco.claims_preprocessing.service_category__office_based_radiology"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.864811Z", "completed_at": "2024-10-11T23:52:38.884052Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.907222Z", "completed_at": "2024-10-11T23:52:38.907230Z"}], "thread_id": "Thread-2", "execution_time": 0.05289769172668457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__office_based_surgery_professional", "compiled": true, "compiled_code": "\n\n\nwith numeric_hcpcs as (\n    select *\n    from dev_coco.dev_coco.service_category__stg_medical_claim as med\n    where \n    \n        try_cast(hcpcs_code as int)\n     is not null\n)\n\n\n    select distinct \n        med.claim_id\n      , med.claim_line_number\n      , med.claim_line_id\n      ,'office-based' as service_category_1    \n      , 'office-based surgery' as service_category_2\n      , 'office-based surgery' as service_category_3\n      , 'service_category__office_based_surgery_professional' as source_model_name\n      , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n    from numeric_hcpcs as med\n    inner join dev_coco.dev_coco.service_category__stg_office_based as prof\n      on med.claim_id = prof.claim_id\n      and med.claim_line_number = prof.claim_line_number\n    where \n      (hcpcs_code between '10021' and '69999')", "relation_name": "dev_coco.claims_preprocessing.service_category__office_based_surgery_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.879800Z", "completed_at": "2024-10-11T23:52:38.908476Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.926743Z", "completed_at": "2024-10-11T23:52:38.926751Z"}], "thread_id": "Thread-6", "execution_time": 0.06402802467346191, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__office_based_visit_professional", "compiled": true, "compiled_code": "\n\nselect distinct\n    med.claim_id\n  , med.claim_line_number\n  , med.claim_line_id\n  , 'office-based' as service_category_1\n  , case \n      when med.place_of_service_code = '11' then 'office-based visit'\n      when med.place_of_service_code in ('02', '10') then 'telehealth visit'\n    end as service_category_2\n  , case \n      when med.place_of_service_code = '11' then 'office-based visit'\n      when med.place_of_service_code in ('02', '10') then 'telehealth visit'\n    end as service_category_3\n  , '_int_office_based_visit_professional' as source_model_name\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.dev_coco.service_category__stg_medical_claim as med\ninner join dev_coco.dev_coco.service_category__stg_office_based as prof\n  on med.claim_id = prof.claim_id\n  and med.claim_line_number = prof.claim_line_number\nwhere \n  (med.place_of_service_code = '11' and med.ccs_category = '227') -- consultation eval and preventative care\n  or med.place_of_service_code in ('02', '10') -- telehealth", "relation_name": "dev_coco.claims_preprocessing._int_office_based_visit_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.897676Z", "completed_at": "2024-10-11T23:52:38.915392Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.927361Z", "completed_at": "2024-10-11T23:52:38.927366Z"}], "thread_id": "Thread-8", "execution_time": 0.05632519721984863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_pharmacy__pharmacy_claim_expanded_data_source__claim_id__claim_line_number.132bf82f59", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        data_source, claim_id, claim_line_number\n    from dev_coco.pharmacy.pharmacy_claim_expanded\n    group by data_source, claim_id, claim_line_number\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.885119Z", "completed_at": "2024-10-11T23:52:38.926295Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.929013Z", "completed_at": "2024-10-11T23:52:38.929019Z"}], "thread_id": "Thread-4", "execution_time": 0.06456708908081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.pharmacy__generic_available_list", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__pharmacy__stg_pharmacy_claim as (\n\n\nselect \n    p.ndc_code\n  , n.fda_description as ndc_description\n  , p.data_source\n  , n.rxcui\n  , p.paid_amount\n  , p.allowed_amount\n  , p.claim_id\n  , p.claim_line_number\n  , p.patient_id\n  , p.member_id\n  , p.prescribing_provider_id\n  , p.dispensing_provider_id\n  , p.dispensing_date\n  , p.quantity\n  , p.days_supply\n  , p.refills\n  , p.paid_date\nfrom dev_coco.core.pharmacy_claim as p\nleft join dev_coco.terminology.ndc as n \n  on p.ndc_code = n.ndc\n), generic_sk as (\n  select \n      generic_available_sk\n    , claim_id\n    , claim_line_number\n    , data_source\n  from dev_coco.pharmacy.pharmacy_claim_expanded as e\n  where generic_available_sk is not null\n)\n\nselect \n    sk.generic_available_sk\n  , p.data_source\n  , p.ndc_code as brand_ndc_code\n  , p.ndc_description as brand_ndc_description\n  , p.rxcui as brand_rxcui\n  , p.paid_amount as brand_paid_amount\n  , p.quantity as brand_units\n  , case \n      when p.quantity = 0 \n        then 0 \n      else p.paid_amount / p.quantity  \n    end as brand_paid_per_unit\n  , ga.ndc as generic_ndc\n  , n.fda_description as generic_ndc_description\n  , case \n      when gc.ndc_code is not null \n        then 1 \n      else 0 \n    end as generic_prescribed_history\n  , gc.cost_per_unit as generic_cost_per_unit\n  , gc.cost_per_unit * p.quantity as generic_cost_at_units\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom __dbt__cte__pharmacy__stg_pharmacy_claim as p\ninner join generic_sk as sk \n  on p.claim_id = sk.claim_id\n  and p.claim_line_number = sk.claim_line_number\n  and p.data_source = sk.data_source\ninner join dev_coco.pharmacy._int_brand_with_generic_available as b \n  on p.rxcui = b.brand_with_generic_available\ninner join dev_coco.pharmacy.rxnorm_generic_available as ga \n  on p.rxcui = ga.product_rxcui\n  and ga.ndc_product_tty in ('SCD','GPCK')\nleft join dev_coco.terminology.ndc as n \n  on ga.ndc = n.ndc\nleft join dev_coco.pharmacy._int_claims_current_cost as gc \n  on ga.ndc = gc.ndc_code\n  and gc.brand_vs_generic = 'generic'\n  and gc.data_source = p.data_source\nwhere \n    ga.product_startmarketingdate is not null\n    \n        and cast(ga.product_startmarketingdate as date) <= current_date\n", "relation_name": "dev_coco.pharmacy.generic_available_list"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.933082Z", "completed_at": "2024-10-11T23:52:38.944336Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.944627Z", "completed_at": "2024-10-11T23:52:38.944635Z"}], "thread_id": "Thread-10", "execution_time": 0.013900041580200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__office_based_other_professional", "compiled": true, "compiled_code": "\n\n\n  select distinct  \n  med.claim_id\n, med.claim_line_number\n, med.claim_line_id\n, 'office-based' as service_category_1    \n, 'office-based other' as service_category_2\n, 'office-based other' as service_category_3\n, 'service_category__office_based_other_professional' as source_model_name\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n  from dev_coco.dev_coco.service_category__stg_office_based med\n  left join dev_coco.claims_preprocessing.service_category__pharmacy_professional pharm on med.claim_line_id = pharm.claim_line_id\n  left join dev_coco.claims_preprocessing.service_category__office_based_radiology rad on med.claim_line_id = rad.claim_line_id\n  left join dev_coco.claims_preprocessing._int_office_based_visit_professional visit on med.claim_line_id = visit.claim_line_id\n  left join dev_coco.claims_preprocessing.service_category__office_based_surgery_professional surg on med.claim_line_id = surg.claim_line_id\n  left join dev_coco.claims_preprocessing.service_category__office_based_physical_therapy_professional pt on med.claim_line_id = pt.claim_line_id\n  where pharm.claim_line_id is null \n  and rad.claim_line_id is null \n  and visit.claim_line_id is null\n  and surg.claim_line_id is null\n  and pt.claim_line_id is null", "relation_name": "dev_coco.claims_preprocessing.service_category__office_based_other_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.939925Z", "completed_at": "2024-10-11T23:52:38.945260Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:38.945910Z", "completed_at": "2024-10-11T23:52:38.945916Z"}], "thread_id": "Thread-2", "execution_time": 0.013305902481079102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_pharmacy__generic_available_list_generic_available_sk__generic_ndc.5460505c42", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        generic_available_sk, generic_ndc\n    from dev_coco.pharmacy.generic_available_list\n    group by generic_available_sk, generic_ndc\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:36.919957Z", "completed_at": "2024-10-11T23:52:40.095831Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:40.103427Z", "completed_at": "2024-10-11T23:52:40.103440Z"}], "thread_id": "Thread-7", "execution_time": 3.3973402976989746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__data_quality_test_summary", "compiled": true, "compiled_code": "\n\nwith unioned_data as (\n\n  -- Unioning multiple data quality checks, excluding the _loaded_at field\n  \n\n        (\n            select\n                cast('dev_coco.data_quality.medical_claim_claim_line_fields' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"DATA_QUALITY_CHECK\" as character varying(64)) as \"DATA_QUALITY_CHECK\" ,\n                    cast(\"RESULT_COUNT\" as NUMBER(13,0)) as \"RESULT_COUNT\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.data_quality.medical_claim_claim_line_fields\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.data_quality.medical_claim_date_checks' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"DATA_QUALITY_CHECK\" as character varying(64)) as \"DATA_QUALITY_CHECK\" ,\n                    cast(\"RESULT_COUNT\" as NUMBER(13,0)) as \"RESULT_COUNT\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.data_quality.medical_claim_date_checks\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.data_quality.medical_claim_inst_header_fields' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"DATA_QUALITY_CHECK\" as character varying(64)) as \"DATA_QUALITY_CHECK\" ,\n                    cast(\"RESULT_COUNT\" as NUMBER(13,0)) as \"RESULT_COUNT\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.data_quality.medical_claim_inst_header_fields\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.data_quality.medical_claim_patient_id' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"DATA_QUALITY_CHECK\" as character varying(64)) as \"DATA_QUALITY_CHECK\" ,\n                    cast(\"RESULT_COUNT\" as NUMBER(13,0)) as \"RESULT_COUNT\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.data_quality.medical_claim_patient_id\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.data_quality.medical_claim_provider_npi' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"DATA_QUALITY_CHECK\" as character varying(64)) as \"DATA_QUALITY_CHECK\" ,\n                    cast(\"RESULT_COUNT\" as NUMBER(13,0)) as \"RESULT_COUNT\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.data_quality.medical_claim_provider_npi\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.data_quality.pharmacy_claim_date_checks' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"DATA_QUALITY_CHECK\" as character varying(64)) as \"DATA_QUALITY_CHECK\" ,\n                    cast(\"RESULT_COUNT\" as NUMBER(13,0)) as \"RESULT_COUNT\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.data_quality.pharmacy_claim_date_checks\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.data_quality.pharmacy_claim_ndc' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"DATA_QUALITY_CHECK\" as character varying(64)) as \"DATA_QUALITY_CHECK\" ,\n                    cast(\"RESULT_COUNT\" as NUMBER(13,0)) as \"RESULT_COUNT\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.data_quality.pharmacy_claim_ndc\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.data_quality.pharmacy_claim_npi' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"DATA_QUALITY_CHECK\" as character varying(64)) as \"DATA_QUALITY_CHECK\" ,\n                    cast(\"RESULT_COUNT\" as NUMBER(13,0)) as \"RESULT_COUNT\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.data_quality.pharmacy_claim_npi\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.data_quality.pharmacy_claim_prescription_details' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"DATA_QUALITY_CHECK\" as character varying(64)) as \"DATA_QUALITY_CHECK\" ,\n                    cast(\"RESULT_COUNT\" as NUMBER(13,0)) as \"RESULT_COUNT\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.data_quality.pharmacy_claim_prescription_details\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.data_quality.pharmacy_patient' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"DATA_QUALITY_CHECK\" as character varying(64)) as \"DATA_QUALITY_CHECK\" ,\n                    cast(\"RESULT_COUNT\" as NUMBER(13,0)) as \"RESULT_COUNT\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.data_quality.pharmacy_patient\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.data_quality.primary_keys' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"DATA_QUALITY_CHECK\" as character varying(64)) as \"DATA_QUALITY_CHECK\" ,\n                    cast(\"RESULT_COUNT\" as NUMBER(13,0)) as \"RESULT_COUNT\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.data_quality.primary_keys\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.data_quality.eligibility_date_checks' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"DATA_QUALITY_CHECK\" as character varying(64)) as \"DATA_QUALITY_CHECK\" ,\n                    cast(\"RESULT_COUNT\" as NUMBER(13,0)) as \"RESULT_COUNT\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.data_quality.eligibility_date_checks\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.data_quality.eligibility_demographics' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"DATA_QUALITY_CHECK\" as character varying(64)) as \"DATA_QUALITY_CHECK\" ,\n                    cast(\"RESULT_COUNT\" as NUMBER(13,0)) as \"RESULT_COUNT\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.data_quality.eligibility_demographics\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.data_quality.eligibility_missing_patient_id' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"DATA_QUALITY_CHECK\" as character varying(64)) as \"DATA_QUALITY_CHECK\" ,\n                    cast(\"RESULT_COUNT\" as NUMBER(13,0)) as \"RESULT_COUNT\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.data_quality.eligibility_missing_patient_id\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.data_quality.eligibility_missing_payer' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"DATA_QUALITY_CHECK\" as character varying(64)) as \"DATA_QUALITY_CHECK\" ,\n                    cast(\"RESULT_COUNT\" as NUMBER(13,0)) as \"RESULT_COUNT\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.data_quality.eligibility_missing_payer\n\n            \n        )\n\n        \n\n)\n\nselect\n  data_quality_check\n  , result_count\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom unioned_data", "relation_name": "dev_coco.data_quality.data_quality_test_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.919026Z", "completed_at": "2024-10-11T23:52:40.108853Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:40.110580Z", "completed_at": "2024-10-11T23:52:40.110590Z"}], "thread_id": "Thread-9", "execution_time": 1.4247260093688965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__combined_institutional_line_level", "compiled": true, "compiled_code": "\n\nWITH combine_line_models AS (\n  \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.service_category__pharmacy_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(20)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(11)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(52)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"CLAIM_LINE_ID\" \n\n            from dev_coco.claims_preprocessing.service_category__pharmacy_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.service_category__outpatient_radiology_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(20)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(11)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(52)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"CLAIM_LINE_ID\" \n\n            from dev_coco.claims_preprocessing.service_category__outpatient_radiology_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_observation_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(20)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(11)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(52)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"CLAIM_LINE_ID\" \n\n            from dev_coco.claims_preprocessing._int_observation_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_ambulance_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(20)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(11)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(52)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" \n\n            from dev_coco.claims_preprocessing._int_ambulance_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_lab_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(20)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(11)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(52)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"CLAIM_LINE_ID\" \n\n            from dev_coco.claims_preprocessing._int_lab_institutional\n\n            \n        )\n\n        \n)\n\nSELECT\n  l.claim_id,\n  l.claim_line_number,\n  l.service_category_1,\n  l.service_category_2,\n  l.service_category_3,\n  l.source_model_name\nFROM combine_line_models l", "relation_name": "dev_coco.claims_preprocessing._int_combined_institutional_line_level"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.909408Z", "completed_at": "2024-10-11T23:52:42.563067Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:42.563870Z", "completed_at": "2024-10-11T23:52:42.563880Z"}], "thread_id": "Thread-3", "execution_time": 3.870098114013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__combined_institutional_header_level", "compiled": true, "compiled_code": "\n\nWITH combine_header_models AS (\n  \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_acute_inpatient_institutional_other' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_acute_inpatient_institutional_other\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_acute_inpatient_institutional_maternity' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_acute_inpatient_institutional_maternity\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_acute_inpatient_institutional_med_surg' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_acute_inpatient_institutional_med_surg\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_inpatient_substance_use_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_inpatient_substance_use_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_ambulatory_surgery_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_ambulatory_surgery_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_dialysis_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_dialysis_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_emergency_department_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_emergency_department_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_home_health_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_home_health_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_inpatient_hospice_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_inpatient_hospice_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_outpatient_hospice_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_outpatient_hospice_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_outpatient_hospital_or_clinic_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_outpatient_hospital_or_clinic_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.service_category__outpatient_physical_therapy_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing.service_category__outpatient_physical_therapy_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_outpatient_psychiatric_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_outpatient_psychiatric_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_inpatient_skilled_nursing_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_inpatient_skilled_nursing_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_urgent_care_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_urgent_care_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_inpatient_psychiatric_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_inpatient_psychiatric_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_inpatient_rehab_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing._int_inpatient_rehab_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.service_category__outpatient_rehab_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing.service_category__outpatient_rehab_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.service_category__outpatient_substance_use_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing.service_category__outpatient_substance_use_institutional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.service_category__outpatient_surgery_institutional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(10)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(29)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(29)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(59)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" \n\n            from dev_coco.claims_preprocessing.service_category__outpatient_surgery_institutional\n\n            \n        )\n\n        \n)\n\nSELECT\n  h.claim_id,\n  h.service_category_1,\n  h.service_category_2,\n  h.service_category_3,\n  h.source_model_name\nFROM combine_header_models h", "relation_name": "dev_coco.claims_preprocessing._int_combined_institutional_header_level"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:38.948013Z", "completed_at": "2024-10-11T23:52:43.521071Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.521695Z", "completed_at": "2024-10-11T23:52:43.521705Z"}], "thread_id": "Thread-8", "execution_time": 4.750406265258789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__combined_professional", "compiled": true, "compiled_code": "\n\nWITH combined_professional_services AS (\n  \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_acute_inpatient_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_acute_inpatient_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_ambulatory_surgery_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_ambulatory_surgery_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_dialysis_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_dialysis_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_emergency_department_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_emergency_department_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_home_health_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_home_health_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_inpatient_hospice_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_inpatient_hospice_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_inpatient_psychiatric_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_inpatient_psychiatric_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_inpatient_rehab_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_inpatient_rehab_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_lab_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_lab_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.service_category__office_based_other_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing.service_category__office_based_other_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.service_category__office_based_physical_therapy_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing.service_category__office_based_physical_therapy_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.service_category__office_based_radiology' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing.service_category__office_based_radiology\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.service_category__office_based_surgery_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing.service_category__office_based_surgery_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_office_based_visit_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_office_based_visit_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_outpatient_hospital_or_clinic_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_outpatient_hospital_or_clinic_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_outpatient_psychiatric_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_outpatient_psychiatric_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_outpatient_rehab_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_outpatient_rehab_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_inpatient_skilled_nursing_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_inpatient_skilled_nursing_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_urgent_care_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_urgent_care_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_outpatient_hospice_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_outpatient_hospice_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.service_category__pharmacy_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing.service_category__pharmacy_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.service_category__outpatient_substance_use_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing.service_category__outpatient_substance_use_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.service_category__outpatient_physical_therapy_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing.service_category__outpatient_physical_therapy_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.service_category__outpatient_radiology_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing.service_category__outpatient_radiology_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_observation_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_observation_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_dme_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_dme_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing._int_ambulance_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(\"CLAIM_LINE_ID\" as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing._int_ambulance_professional\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.service_category__outpatient_surgery_professional' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CLAIM_ID\" as character varying(16777216)) as \"CLAIM_ID\" ,\n                    cast(\"CLAIM_LINE_NUMBER\" as NUMBER(38,0)) as \"CLAIM_LINE_NUMBER\" ,\n                    cast(null as character varying(16777216)) as \"CLAIM_LINE_ID\" ,\n                    cast(\"SERVICE_CATEGORY_1\" as character varying(12)) as \"SERVICE_CATEGORY_1\" ,\n                    cast(\"SERVICE_CATEGORY_2\" as character varying(16777216)) as \"SERVICE_CATEGORY_2\" ,\n                    cast(\"SERVICE_CATEGORY_3\" as character varying(16777216)) as \"SERVICE_CATEGORY_3\" ,\n                    cast(\"SOURCE_MODEL_NAME\" as character varying(60)) as \"SOURCE_MODEL_NAME\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.claims_preprocessing.service_category__outpatient_surgery_professional\n\n            \n        )\n\n        \n)\n\nSELECT\n    p.claim_id,\n    p.claim_line_number,\n    p.claim_line_id,\n    p.service_category_1,\n    p.service_category_2,\n    p.service_category_3,\n    p.tuva_last_run,\n    p.source_model_name\nFROM combined_professional_services p", "relation_name": "dev_coco.claims_preprocessing._int_combined_professional"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.703146Z", "completed_at": "2024-10-11T23:52:43.724153Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.725016Z", "completed_at": "2024-10-11T23:52:43.725031Z"}], "thread_id": "Thread-4", "execution_time": 0.02462172508239746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__service_category_grouper", "compiled": true, "compiled_code": "\n\nwith service_category_1_mapping as(\n    select distinct \n        a.claim_id\n        , a.claim_line_number\n        , a.claim_type\n        , case when s.service_category_1 is null and b.service_category_1 is not null then 'Service cat value not in seed table'\n            else b.service_category_1\n          end service_category_1\n        , case when s.service_category_2 is null and b.service_category_2 is not null then 'Service cat value not in seed table'\n            else s.service_category_2\n          end service_category_2\n        , case\n            when s.service_category_3 is null and b.service_category_3 is not null then 'Service cat value not in seed table'\n            else s.service_category_3\n          end service_category_3\n        ,b.service_category_2 as original_service_cat_2\n        ,b.service_category_3 as original_service_cat_3\n        , s.priority\n        , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n        , b.source_model_name\n    from dev_coco.dev_coco.service_category__stg_medical_claim a\n    left join dev_coco.claims_preprocessing._int_combined_professional b\n    on a.claim_id = b.claim_id\n    and a.claim_line_number = b.claim_line_number\n    left join dev_coco.claims_preprocessing.service_category__service_categories s on b.service_category_2 = s.service_category_2\n    and\n    b.service_category_3 = s.service_category_3\n    where a.claim_type = 'professional'\n\n    union all\n\n    select distinct \n        a.claim_id\n        , a.claim_line_number\n        , a.claim_type\n        , case when s.service_category_1 is null and b.service_category_1 is not null then 'Service cat value not in seed table'\n            else b.service_category_1\n          end service_category_1\n        , case when s.service_category_2 is null and b.service_category_2 is not null then 'Service cat value not in seed table'\n            else s.service_category_2\n          end service_category_2\n        , case\n            when s.service_category_3 is null and b.service_category_3 is not null then 'Service cat value not in seed table'\n            else s.service_category_3\n          end service_category_3\n        ,b.service_category_2 as original_service_cat_2\n        ,b.service_category_3 as original_service_cat_3\n        , s.priority\n        , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n        , b.source_model_name\n    from dev_coco.dev_coco.service_category__stg_medical_claim a\n    left join dev_coco.claims_preprocessing._int_combined_institutional_header_level b\n    on a.claim_id = b.claim_id\n    left join dev_coco.claims_preprocessing.service_category__service_categories s on b.service_category_2 = s.service_category_2\n    and\n    b.service_category_3 = s.service_category_3\n    where a.claim_type = 'institutional'\n\n    union all\n\n    select distinct \n        a.claim_id\n        , a.claim_line_number\n        , a.claim_type\n        , case when s.service_category_1 is null and b.service_category_1 is not null then 'Service cat value not in seed table'\n            else b.service_category_1\n          end service_category_1\n        , case when s.service_category_2 is null and b.service_category_2 is not null then 'Service cat value not in seed table'\n            else s.service_category_2\n          end service_category_2\n        , case\n            when s.service_category_3 is null and b.service_category_3 is not null then 'Service cat value not in seed table'\n            else s.service_category_3\n          end service_category_3\n        ,b.service_category_2 as original_service_cat_2\n        ,b.service_category_3 as original_service_cat_3\n        , s.priority\n        , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n        , b.source_model_name\n    from dev_coco.dev_coco.service_category__stg_medical_claim a\n    left join dev_coco.claims_preprocessing._int_combined_institutional_line_level b\n    on a.claim_id = b.claim_id\n    and a.claim_line_number = b.claim_line_number\n    left join dev_coco.claims_preprocessing.service_category__service_categories s on b.service_category_2 = s.service_category_2\n    and\n    b.service_category_3 = s.service_category_3\n    where a.claim_type = 'institutional'\n)\n\n, service_category_2_deduplication as(\n    select \n        claim_id\n        , claim_line_number\n        , claim_type\n        , service_category_1\n        , service_category_2\n        , service_category_3\n        ,original_service_cat_2\n        ,original_service_cat_3\n        , source_model_name\n        , row_number() over (partition by claim_id, claim_line_number order by priority) as duplicate_row_number\n    from service_category_1_mapping\n)\n\nselect\n    d.claim_id\n    , d.claim_line_number\n    , d.claim_type\n    , coalesce(service_category_1,'other') as service_category_1\n    , coalesce(service_category_2,'other') as service_category_2\n    , coalesce(service_category_3,'other') as service_category_3\n    , original_service_cat_2\n    , original_service_cat_3\n    , duplicate_row_number\n    , s.ccs_category\n    , s.ccs_category_description\n    , s.ms_drg_code\n    , s.ms_drg_description\n    , s.place_of_service_code\n    , s.place_of_service_description\n    , s.revenue_center_code\n    , s.revenue_center_description\n    , s.hcpcs_code\n    , s.default_ccsr_category_ip\n    , s.default_ccsr_category_op\n    , s.default_ccsr_category_description_ip\n    , s.default_ccsr_category_description_op\n    , s.primary_taxonomy_code\n    , s.primary_specialty_description\n    , s.modality\n    , s.bill_type_code\n    , s.bill_type_description\n    , d.source_model_name\n    , s.data_source\nfrom service_category_2_deduplication d\ninner join dev_coco.dev_coco.service_category__stg_medical_claim s on d.claim_id = s.claim_id\nand\nd.claim_line_number = s.claim_line_number\n--where duplicate_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.service_category_grouper"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.729411Z", "completed_at": "2024-10-11T23:52:43.741728Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.742456Z", "completed_at": "2024-10-11T23:52:43.742468Z"}], "thread_id": "Thread-10", "execution_time": 0.015417814254760742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.encounters__stg_medical_claim", "compiled": true, "compiled_code": "\n\n\nselect\n    m.apr_drg_code\n  , m.patient_id \n  , d.patient_data_source_id\n  , m.claim_id\n  , m.claim_line_number\n  , m.claim_id || '|' || cast(m.claim_line_number as TEXT) as claim_line_id\n  , m.claim_type\n  , coalesce(m.admission_date,m.claim_line_start_date,m.claim_start_date) as start_date\n  , coalesce(m.discharge_date,m.claim_line_end_date,m.claim_end_date) as end_date\n  , m.admission_date\n  , m.discharge_date\n  , m.claim_start_date\n  , m.claim_end_date\n  , m.claim_line_start_date\n  , m.claim_line_end_date\n  , g.service_category_1\n  , g.service_category_2\n  , g.service_category_3\n  , m.bill_type_code\n  , bt.bill_type_description\n  , m.hcpcs_code\n  , m.hcpcs_modifier_1\n  , m.hcpcs_modifier_2\n  , m.hcpcs_modifier_3\n  , m.hcpcs_modifier_4\n  , m.hcpcs_modifier_5\n  , c.ccs_category\n  , c.ccs_category_description\n  , m.ms_drg_code\n  , drg.ms_drg_description\n  , m.admit_source_code\n  , m.admit_type_code\n  , m.place_of_service_code\n  , pos.place_of_service_description\n  , m.revenue_center_code\n  , r.revenue_center_description\n  , m.diagnosis_code_type\n  , m.diagnosis_code_1\n  , dx.default_ccsr_category_ip\n  , dx.default_ccsr_category_op\n  , dx.default_ccsr_category_description_ip\n  , dx.default_ccsr_category_description_op\n  , p.primary_taxonomy_code\n  , p.primary_specialty_description\n  , n.modality\n  , m.billing_id\n  , m.rendering_id\n  , rend.primary_specialty_description as rend_primary_specialty_description\n  , m.facility_id\n  , m.discharge_disposition_code\n  , m.paid_amount\n  , m.charge_amount\n  , m.allowed_amount\n  , m.data_source\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim m\ninner join dev_coco.claims_preprocessing.service_category_grouper g on m.claim_id = g.claim_id\nand\nm.claim_line_number = g.claim_line_number\nand g.duplicate_row_number = 1\ninner join dev_coco.claims_preprocessing.encounters__patient_data_source_id d on m.patient_id = d.patient_id\nand\nm.data_source = d.data_source\nleft join dev_coco.ccsr._value_set_dxccsr_v2023_1_cleaned_map dx on m.diagnosis_code_1 = dx.icd_10_cm_code\nleft join dev_coco.terminology.provider p on m.facility_id = p.npi\nleft join dev_coco.terminology.ccs_services_procedures c on m.hcpcs_code = c.hcpcs_code\nleft join dev_coco.terminology.nitos n on m.hcpcs_code = n.hcpcs_code\nleft join dev_coco.terminology.ms_drg drg on m.ms_drg_code = drg.ms_drg_code\nleft join dev_coco.terminology.revenue_center r on m.revenue_center_code = r.revenue_center_code\nleft join dev_coco.terminology.place_of_service pos on m.place_of_service_code = pos.place_of_service_code\nleft join dev_coco.terminology.bill_type bt on m.bill_type_code = bt.bill_type_code\nleft join dev_coco.terminology.provider rend on m.rendering_id = rend.npi", "relation_name": "dev_coco.claims_preprocessing.encounters__stg_medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.752229Z", "completed_at": "2024-10-11T23:52:43.787670Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.808212Z", "completed_at": "2024-10-11T23:52:43.808228Z"}], "thread_id": "Thread-2", "execution_time": 0.06305408477783203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith claim_start_end as (\nselect claim_id\n,patient_data_source_id\n,min(start_date) as start_date\n,max(end_date) as end_date \n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  group by claim_id\n  ,patient_data_source_id\n)\n\n, base as (\n  select distinct\n      enc.claim_id\n    , enc.patient_data_source_id\n    , c.start_date\n    , c.end_date\n    , enc.facility_id\n    , enc.discharge_disposition_code\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim enc\n    inner join claim_start_end c on enc.claim_id = c.claim_id\n  and\n  c.patient_data_source_id = enc.patient_data_source_id\n  where\n    service_category_2 in ('acute inpatient')\n    and claim_type = 'institutional'\n)\n\n, add_row_num as (\n  select\n      patient_data_source_id\n    , claim_id\n    , start_date\n    , end_date\n    , discharge_disposition_code\n    , facility_id\n    , row_number() over (partition by patient_data_source_id order by end_date, start_date, claim_id) as row_num\n  from base\n)\n\n, check_for_merges_with_larger_row_num as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id as claim_id_a\n    , bb.claim_id as claim_id_b\n    , aa.row_num as row_num_a\n    , bb.row_num as row_num_b\n    , case\n        -- Claims with same end_date and same facility_id should be merged:\n        when aa.end_date = bb.end_date\n          and aa.facility_id = bb.facility_id then 1\n\n        -- Claims with different end_date and start_date that are\n        -- adjacent (i.e. separated by 1 day) should be merged:\n        when \n\n    dateadd(\n        day,\n        1,\n        aa.end_date\n        )\n\n = bb.start_date\n          and aa.facility_id = bb.facility_id\n          and aa.discharge_disposition_code = '30' then 1\n\n        -- Claims with different end_date \n        -- should be merged if they overlap:\n        when aa.end_date <> bb.end_date\n          and aa.end_date >= bb.start_date\n          and aa.facility_id = bb.facility_id then 1\n        else 0\n      end as merge_flag\n  from add_row_num as aa\n  inner join add_row_num as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.row_num < bb.row_num\n  where aa.claim_id <> bb.claim_id\n)\n\n, merges_with_larger_row_num as (\n  select\n      patient_data_source_id\n    , claim_id_a\n    , claim_id_b\n    , row_num_a\n    , row_num_b\n    , merge_flag\n  from check_for_merges_with_larger_row_num\n  where merge_flag = 1\n)\n\n, claim_ids_that_merge_with_larger_row_num as (\n  select distinct\n      claim_id_a as claim_id\n  from merges_with_larger_row_num\n)\n\n, claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\n  select distinct\n      aa.claim_id as claim_id\n  from add_row_num as aa\n  inner join merges_with_larger_row_num as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and bb.row_num_a < aa.row_num\n    and bb.row_num_b > aa.row_num\n)\n\n, close_flags as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , case\n        when bb.claim_id is null\n          and cc.claim_id is null then 1\n        else 0\n      end as close_flag\n  from add_row_num as aa\n  left join claim_ids_that_merge_with_larger_row_num as bb\n    on aa.claim_id = bb.claim_id\n  left join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as cc\n    on aa.claim_id = cc.claim_id\n)\n\n, join_every_row_to_later_closes as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.row_num\n    , bb.row_num as row_num_b\n  from close_flags as aa\n  inner join close_flags as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.row_num <= bb.row_num\n  where bb.close_flag = 1\n)\n\n, find_min_closing_row_num_for_every_claim as (\n  select\n      patient_data_source_id\n    , claim_id\n    , min(row_num_b) as min_closing_row\n  from join_every_row_to_later_closes\n  group by\n      patient_data_source_id\n    , claim_id\n)\n\n, add_min_closing_row_to_every_claim as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , aa.close_flag\n    , bb.min_closing_row\n  from close_flags as aa\n  left join find_min_closing_row_num_for_every_claim as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.claim_id = bb.claim_id\n)\n\n, add_encounter_id as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , aa.close_flag\n    , aa.min_closing_row\n    , bb.claim_id as encounter_id\n  from add_min_closing_row_to_every_claim as aa\n  left join add_min_closing_row_to_every_claim as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.min_closing_row = bb.row_num\n)\n\nselect\n    patient_data_source_id\n  , claim_id\n  , start_date\n  , end_date\n  , discharge_disposition_code\n  , facility_id\n  , row_number() over (partition by encounter_id order by start_date, end_date, claim_id) as encounter_claim_number\n  , row_number() over (partition by encounter_id order by start_date desc, end_date desc, claim_id desc) as encounter_claim_number_desc\n  , close_flag\n  , min_closing_row\n  , dense_rank() over (order by encounter_id) as encounter_id\nfrom add_encounter_id", "relation_name": "dev_coco.claims_preprocessing.acute_inpatient__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.760978Z", "completed_at": "2024-10-11T23:52:43.805677Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.810339Z", "completed_at": "2024-10-11T23:52:43.810349Z"}], "thread_id": "Thread-7", "execution_time": 0.06336712837219238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ambulance__anchor_events", "compiled": true, "compiled_code": "\n\nwith service_category as (\n  select distinct\n      claim_id\n    , patient_data_source_id\n    , start_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  where\n    service_category_2 = 'ambulance' --both inst and prof\n    \n)\n\nselect distinct \nclaim_id\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_category", "relation_name": "dev_coco.claims_preprocessing.ambulance__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.772649Z", "completed_at": "2024-10-11T23:52:43.807301Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.813345Z", "completed_at": "2024-10-11T23:52:43.813353Z"}], "thread_id": "Thread-3", "execution_time": 0.06406402587890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.dialysis__anchor_events", "compiled": true, "compiled_code": "\n\nwith service_category as (\n  select distinct\n      claim_id\n    , patient_data_source_id\n    , start_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  where\n    service_category_2 = 'dialysis' --both inst and professional as anchor\n    \n)\n\nselect distinct \nclaim_id\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_category", "relation_name": "dev_coco.claims_preprocessing.dialysis__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.767312Z", "completed_at": "2024-10-11T23:52:43.807744Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.813892Z", "completed_at": "2024-10-11T23:52:43.813896Z"}], "thread_id": "Thread-9", "execution_time": 0.06537675857543945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.asc__anchor_events", "compiled": true, "compiled_code": "\n\nwith service_category as (\n  select distinct\n      claim_id\n    , patient_data_source_id\n    , start_date\n    , end_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  where\n    service_category_2 = 'ambulatory surgery center' -- include both professional and institutional claims as anchor events\n \n)\n\nselect distinct \nclaim_id\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_category", "relation_name": "dev_coco.claims_preprocessing.asc__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.782806Z", "completed_at": "2024-10-11T23:52:43.809341Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.814740Z", "completed_at": "2024-10-11T23:52:43.814746Z"}], "thread_id": "Thread-6", "execution_time": 0.06471014022827148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.emergency_department__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith claim_start_end as (\n  select\n    claim_id,\n    patient_data_source_id,\n    min(start_date) as start_date,\n    max(end_date) as end_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  group by claim_id, patient_data_source_id\n)\n\n, base as (\n  select distinct\n    enc.claim_id,\n    enc.patient_data_source_id,\n    c.start_date,\n    c.end_date,\n    enc.facility_id,\n    enc.discharge_disposition_code\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim enc\n  inner join claim_start_end c \n    on enc.claim_id = c.claim_id\n    and c.patient_data_source_id = enc.patient_data_source_id\n  where\n    enc.service_category_2 = 'emergency department' --both inst and prof\n)\n\n, add_row_num as (\n  select\n    patient_data_source_id,\n    claim_id,\n    start_date,\n    end_date,\n    discharge_disposition_code,\n    facility_id,\n    row_number() over (partition by patient_data_source_id order by end_date, start_date, claim_id) as row_num\n  from base\n)\n\n, check_for_merges_with_larger_row_num as (\n  select\n    aa.patient_data_source_id,\n    aa.claim_id as claim_id_a,\n    bb.claim_id as claim_id_b,\n    aa.row_num as row_num_a,\n    bb.row_num as row_num_b,\n    case\n      when aa.end_date = bb.end_date and aa.facility_id = bb.facility_id then 1\n      when \n\n    dateadd(\n        day,\n        1,\n        aa.end_date\n        )\n\n = bb.start_date\n        and aa.facility_id = bb.facility_id\n        and aa.discharge_disposition_code = '30' then 1\n      when aa.end_date <> bb.end_date\n        and aa.end_date >= bb.start_date\n        and aa.facility_id = bb.facility_id then 1\n      else 0\n    end as merge_flag\n  from add_row_num as aa\n  inner join add_row_num as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.row_num < bb.row_num\n    and aa.claim_id <> bb.claim_id\n)\n\n, merges_with_larger_row_num as (\n  select\n      patient_data_source_id\n    , claim_id_a\n    , claim_id_b\n    , row_num_a\n    , row_num_b\n    , merge_flag\n  from check_for_merges_with_larger_row_num\n  where merge_flag = 1\n)\n\n, claim_ids_that_merge_with_larger_row_num as (\n  select distinct\n      claim_id_a as claim_id\n  from merges_with_larger_row_num\n)\n\n, claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\n  select distinct\n      aa.claim_id as claim_id\n  from add_row_num as aa\n  inner join merges_with_larger_row_num as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and bb.row_num_a < aa.row_num\n    and bb.row_num_b > aa.row_num\n)\n\n, close_flags as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , case\n        when bb.claim_id is null\n          and cc.claim_id is null then 1\n        else 0\n      end as close_flag\n  from add_row_num as aa\n  left join claim_ids_that_merge_with_larger_row_num as bb\n    on aa.claim_id = bb.claim_id\n  left join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as cc\n    on aa.claim_id = cc.claim_id\n)\n\n, join_every_row_to_later_closes as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.row_num\n    , bb.row_num as row_num_b\n  from close_flags as aa\n  inner join close_flags as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.row_num <= bb.row_num\n  where bb.close_flag = 1\n)\n\n, find_min_closing_row_num_for_every_claim as (\n  select\n      patient_data_source_id\n    , claim_id\n    , min(row_num_b) as min_closing_row\n  from join_every_row_to_later_closes\n  group by\n      patient_data_source_id\n    , claim_id\n)\n\n, add_min_closing_row_to_every_claim as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , aa.close_flag\n    , bb.min_closing_row\n  from close_flags as aa\n  left join find_min_closing_row_num_for_every_claim as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.claim_id = bb.claim_id\n)\n\n, add_encounter_id as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , aa.close_flag\n    , aa.min_closing_row\n    , bb.claim_id as encounter_id\n  from add_min_closing_row_to_every_claim as aa\n  left join add_min_closing_row_to_every_claim as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.min_closing_row = bb.row_num\n)\n\nselect\n    patient_data_source_id\n  , claim_id\n  , start_date\n  , end_date\n  , discharge_disposition_code\n  , facility_id\n  , row_number() over (partition by encounter_id order by start_date, end_date, claim_id) as encounter_claim_number\n  , row_number() over (partition by encounter_id order by start_date desc, end_date desc, claim_id desc) as encounter_claim_number_desc\n  , close_flag\n  , min_closing_row\n  , dense_rank() over (order by encounter_id) as encounter_id\nfrom add_encounter_id", "relation_name": "dev_coco.claims_preprocessing.emergency_department__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.777908Z", "completed_at": "2024-10-11T23:52:43.809722Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.815295Z", "completed_at": "2024-10-11T23:52:43.815301Z"}], "thread_id": "Thread-8", "execution_time": 0.06561398506164551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.dme__anchor_events", "compiled": true, "compiled_code": "\n\nwith service_category as (\n  select distinct\n      claim_id\n    , patient_data_source_id\n    , start_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  where\n    service_category_2 = 'durable medical equipment' --both inst and prof\n    \n)\n\nselect distinct \nclaim_id\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_category", "relation_name": "dev_coco.claims_preprocessing.dme__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.788061Z", "completed_at": "2024-10-11T23:52:43.811014Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.816115Z", "completed_at": "2024-10-11T23:52:43.816121Z"}], "thread_id": "Thread-4", "execution_time": 0.06538820266723633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.home_health__anchor_events", "compiled": true, "compiled_code": "\n\nwith service_category as (\n  select distinct\n      claim_id\n    , patient_data_source_id\n    , start_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  where\n    service_category_2 = 'home health' -- both prof and inst as anchors\n    \n)\n\nselect distinct \nclaim_id\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_category", "relation_name": "dev_coco.claims_preprocessing.home_health__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.800815Z", "completed_at": "2024-10-11T23:52:43.812798Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.817050Z", "completed_at": "2024-10-11T23:52:43.817056Z"}], "thread_id": "Thread-10", "execution_time": 0.06558704376220703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_psych__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith claim_start_end as (\n  select\n    claim_id,\n    patient_data_source_id,\n    min(start_date) as start_date,\n    max(end_date) as end_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  group by claim_id, patient_data_source_id\n)\n\n, base as (\n  select distinct\n    enc.claim_id,\n    enc.patient_data_source_id,\n    c.start_date,\n    c.end_date,\n    enc.facility_id,\n    enc.discharge_disposition_code\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim enc\n  inner join claim_start_end c \n    on enc.claim_id = c.claim_id\n    and c.patient_data_source_id = enc.patient_data_source_id\n  where\n    enc.service_category_2 = 'inpatient psychiatric'\n    and enc.claim_type = 'institutional'\n)\n\n, add_row_num as (\n  select\n    patient_data_source_id,\n    claim_id,\n    start_date,\n    end_date,\n    discharge_disposition_code,\n    facility_id,\n    row_number() over (partition by patient_data_source_id order by end_date, start_date, claim_id) as row_num\n  from base\n)\n\n, check_for_merges_with_larger_row_num as (\n  select\n    aa.patient_data_source_id,\n    aa.claim_id as claim_id_a,\n    bb.claim_id as claim_id_b,\n    aa.row_num as row_num_a,\n    bb.row_num as row_num_b,\n    case\n      when aa.end_date = bb.end_date and aa.facility_id = bb.facility_id then 1\n      when \n\n    dateadd(\n        day,\n        1,\n        aa.end_date\n        )\n\n = bb.start_date\n        and aa.facility_id = bb.facility_id\n        and aa.discharge_disposition_code = '30' then 1\n      when aa.end_date <> bb.end_date\n        and aa.end_date >= bb.start_date\n        and aa.facility_id = bb.facility_id then 1\n      else 0\n    end as merge_flag\n  from add_row_num as aa\n  inner join add_row_num as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.row_num < bb.row_num\n    and aa.claim_id <> bb.claim_id\n)\n\n\n, merges_with_larger_row_num as (\n  select\n      patient_data_source_id\n    , claim_id_a\n    , claim_id_b\n    , row_num_a\n    , row_num_b\n    , merge_flag\n  from check_for_merges_with_larger_row_num\n  where merge_flag = 1\n)\n\n, claim_ids_that_merge_with_larger_row_num as (\n  select distinct\n      claim_id_a as claim_id\n  from merges_with_larger_row_num\n)\n\n, claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\n  select distinct\n      aa.claim_id as claim_id\n  from add_row_num as aa\n  inner join merges_with_larger_row_num as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and bb.row_num_a < aa.row_num\n    and bb.row_num_b > aa.row_num\n)\n\n, close_flags as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , case\n        when bb.claim_id is null\n          and cc.claim_id is null then 1\n        else 0\n      end as close_flag\n  from add_row_num as aa\n  left join claim_ids_that_merge_with_larger_row_num as bb\n    on aa.claim_id = bb.claim_id\n  left join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as cc\n    on aa.claim_id = cc.claim_id\n)\n\n, join_every_row_to_later_closes as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.row_num\n    , bb.row_num as row_num_b\n  from close_flags as aa\n  inner join close_flags as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.row_num <= bb.row_num\n  where bb.close_flag = 1\n)\n\n, find_min_closing_row_num_for_every_claim as (\n  select\n      patient_data_source_id\n    , claim_id\n    , min(row_num_b) as min_closing_row\n  from join_every_row_to_later_closes\n  group by\n      patient_data_source_id\n    , claim_id\n)\n\n, add_min_closing_row_to_every_claim as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , aa.close_flag\n    , bb.min_closing_row\n  from close_flags as aa\n  left join find_min_closing_row_num_for_every_claim as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.claim_id = bb.claim_id\n)\n\n, add_encounter_id as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , aa.close_flag\n    , aa.min_closing_row\n    , bb.claim_id as encounter_id\n  from add_min_closing_row_to_every_claim as aa\n  left join add_min_closing_row_to_every_claim as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.min_closing_row = bb.row_num\n)\n\nselect\n    patient_data_source_id\n  , claim_id\n  , start_date\n  , end_date\n  , discharge_disposition_code\n  , facility_id\n  , row_number() over (partition by encounter_id order by start_date, end_date, claim_id) as encounter_claim_number\n  , row_number() over (partition by encounter_id order by start_date desc, end_date desc, claim_id desc) as encounter_claim_number_desc\n  , close_flag\n  , min_closing_row\n  , dense_rank() over (order by encounter_id) as encounter_id\nfrom add_encounter_id", "relation_name": "dev_coco.claims_preprocessing.inpatient_psych__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.795553Z", "completed_at": "2024-10-11T23:52:43.813079Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.817572Z", "completed_at": "2024-10-11T23:52:43.817577Z"}], "thread_id": "Thread-5", "execution_time": 0.0664680004119873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_hospice__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith claim_start_end as (\n  select\n    claim_id,\n    patient_data_source_id,\n    min(start_date) as start_date,\n    max(end_date) as end_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  group by claim_id, patient_data_source_id\n)\n\n, base as (\n  select distinct\n    enc.claim_id,\n    enc.patient_data_source_id,\n    c.start_date,\n    c.end_date,\n    enc.facility_id,\n    enc.discharge_disposition_code\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim enc\n  inner join claim_start_end c \n    on enc.claim_id = c.claim_id\n    and c.patient_data_source_id = enc.patient_data_source_id\n  where\n    enc.service_category_2 in ('inpatient hospice')\n    and enc.claim_type = 'institutional'\n)\n\n, add_row_num as (\n  select\n    patient_data_source_id,\n    claim_id,\n    start_date,\n    end_date,\n    discharge_disposition_code,\n    facility_id,\n    row_number() over (partition by patient_data_source_id order by end_date, start_date, claim_id) as row_num\n  from base\n)\n\n, check_for_merges_with_larger_row_num as (\n  select\n    aa.patient_data_source_id,\n    aa.claim_id as claim_id_a,\n    bb.claim_id as claim_id_b,\n    aa.row_num as row_num_a,\n    bb.row_num as row_num_b,\n    case\n      when aa.end_date = bb.end_date and aa.facility_id = bb.facility_id then 1\n      when \n\n    dateadd(\n        day,\n        1,\n        aa.end_date\n        )\n\n = bb.start_date\n        and aa.facility_id = bb.facility_id\n        and aa.discharge_disposition_code = '30' then 1\n      when aa.end_date <> bb.end_date\n        and aa.end_date >= bb.start_date\n        and aa.facility_id = bb.facility_id then 1\n      else 0\n    end as merge_flag\n  from add_row_num as aa\n  inner join add_row_num as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.row_num < bb.row_num\n    and aa.claim_id <> bb.claim_id\n)\n\n\n, merges_with_larger_row_num as (\n  select\n      patient_data_source_id\n    , claim_id_a\n    , claim_id_b\n    , row_num_a\n    , row_num_b\n    , merge_flag\n  from check_for_merges_with_larger_row_num\n  where merge_flag = 1\n)\n\n, claim_ids_that_merge_with_larger_row_num as (\n  select distinct\n      claim_id_a as claim_id\n  from merges_with_larger_row_num\n)\n\n, claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\n  select distinct\n      aa.claim_id as claim_id\n  from add_row_num as aa\n  inner join merges_with_larger_row_num as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and bb.row_num_a < aa.row_num\n    and bb.row_num_b > aa.row_num\n)\n\n, close_flags as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , case\n        when bb.claim_id is null\n          and cc.claim_id is null then 1\n        else 0\n      end as close_flag\n  from add_row_num as aa\n  left join claim_ids_that_merge_with_larger_row_num as bb\n    on aa.claim_id = bb.claim_id\n  left join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as cc\n    on aa.claim_id = cc.claim_id\n)\n\n, join_every_row_to_later_closes as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.row_num\n    , bb.row_num as row_num_b\n  from close_flags as aa\n  inner join close_flags as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.row_num <= bb.row_num\n  where bb.close_flag = 1\n)\n\n, find_min_closing_row_num_for_every_claim as (\n  select\n      patient_data_source_id\n    , claim_id\n    , min(row_num_b) as min_closing_row\n  from join_every_row_to_later_closes\n  group by\n      patient_data_source_id\n    , claim_id\n)\n\n, add_min_closing_row_to_every_claim as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , aa.close_flag\n    , bb.min_closing_row\n  from close_flags as aa\n  left join find_min_closing_row_num_for_every_claim as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.claim_id = bb.claim_id\n)\n\n, add_encounter_id as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , aa.close_flag\n    , aa.min_closing_row\n    , bb.claim_id as encounter_id\n  from add_min_closing_row_to_every_claim as aa\n  left join add_min_closing_row_to_every_claim as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.min_closing_row = bb.row_num\n)\n\nselect\n    patient_data_source_id\n  , claim_id\n  , start_date\n  , end_date\n  , discharge_disposition_code\n  , facility_id\n  , row_number() over (partition by encounter_id order by start_date, end_date, claim_id) as encounter_claim_number\n  , row_number() over (partition by encounter_id order by start_date desc, end_date desc, claim_id desc) as encounter_claim_number_desc\n  , close_flag\n  , min_closing_row\n  , dense_rank() over (order by encounter_id) as encounter_id\nfrom add_encounter_id", "relation_name": "dev_coco.claims_preprocessing.inpatient_hospice__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.826446Z", "completed_at": "2024-10-11T23:52:43.861974Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.872962Z", "completed_at": "2024-10-11T23:52:43.872973Z"}], "thread_id": "Thread-2", "execution_time": 0.054225921630859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_rehab__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith claim_start_end as (\n  select\n    claim_id,\n    patient_data_source_id,\n    min(start_date) as start_date,\n    max(end_date) as end_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  group by claim_id, patient_data_source_id\n)\n\n, base as (\n  select distinct\n    enc.claim_id,\n    enc.patient_data_source_id,\n    c.start_date,\n    c.end_date,\n    enc.facility_id,\n    enc.discharge_disposition_code\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim enc\n  inner join claim_start_end c \n    on enc.claim_id = c.claim_id\n    and c.patient_data_source_id = enc.patient_data_source_id\n  where\n    enc.service_category_2 = 'inpatient rehabilitation'\n    and enc.claim_type = 'institutional'\n)\n\n, add_row_num as (\n  select\n    patient_data_source_id,\n    claim_id,\n    start_date,\n    end_date,\n    discharge_disposition_code,\n    facility_id,\n    row_number() over (partition by patient_data_source_id order by end_date, start_date, claim_id) as row_num\n  from base\n)\n\n, check_for_merges_with_larger_row_num as (\n  select\n    aa.patient_data_source_id,\n    aa.claim_id as claim_id_a,\n    bb.claim_id as claim_id_b,\n    aa.row_num as row_num_a,\n    bb.row_num as row_num_b,\n    case\n      when aa.end_date = bb.end_date and aa.facility_id = bb.facility_id then 1\n      when \n\n    dateadd(\n        day,\n        1,\n        aa.end_date\n        )\n\n = bb.start_date\n        and aa.facility_id = bb.facility_id\n        and aa.discharge_disposition_code = '30' then 1\n      when aa.end_date <> bb.end_date\n        and aa.end_date >= bb.start_date\n        and aa.facility_id = bb.facility_id then 1\n      else 0\n    end as merge_flag\n  from add_row_num as aa\n  inner join add_row_num as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.row_num < bb.row_num\n    and aa.claim_id <> bb.claim_id\n)\n\n\n, merges_with_larger_row_num as (\n  select\n      patient_data_source_id\n    , claim_id_a\n    , claim_id_b\n    , row_num_a\n    , row_num_b\n    , merge_flag\n  from check_for_merges_with_larger_row_num\n  where merge_flag = 1\n)\n\n, claim_ids_that_merge_with_larger_row_num as (\n  select distinct\n      claim_id_a as claim_id\n  from merges_with_larger_row_num\n)\n\n, claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\n  select distinct\n      aa.claim_id as claim_id\n  from add_row_num as aa\n  inner join merges_with_larger_row_num as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and bb.row_num_a < aa.row_num\n    and bb.row_num_b > aa.row_num\n)\n\n, close_flags as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , case\n        when bb.claim_id is null\n          and cc.claim_id is null then 1\n        else 0\n      end as close_flag\n  from add_row_num as aa\n  left join claim_ids_that_merge_with_larger_row_num as bb\n    on aa.claim_id = bb.claim_id\n  left join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as cc\n    on aa.claim_id = cc.claim_id\n)\n\n, join_every_row_to_later_closes as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.row_num\n    , bb.row_num as row_num_b\n  from close_flags as aa\n  inner join close_flags as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.row_num <= bb.row_num\n  where bb.close_flag = 1\n)\n\n, find_min_closing_row_num_for_every_claim as (\n  select\n      patient_data_source_id\n    , claim_id\n    , min(row_num_b) as min_closing_row\n  from join_every_row_to_later_closes\n  group by\n      patient_data_source_id\n    , claim_id\n)\n\n, add_min_closing_row_to_every_claim as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , aa.close_flag\n    , bb.min_closing_row\n  from close_flags as aa\n  left join find_min_closing_row_num_for_every_claim as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.claim_id = bb.claim_id\n)\n\n, add_encounter_id as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , aa.close_flag\n    , aa.min_closing_row\n    , bb.claim_id as encounter_id\n  from add_min_closing_row_to_every_claim as aa\n  left join add_min_closing_row_to_every_claim as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.min_closing_row = bb.row_num\n)\n\nselect\n    patient_data_source_id\n  , claim_id\n  , start_date\n  , end_date\n  , discharge_disposition_code\n  , facility_id\n  , row_number() over (partition by encounter_id order by start_date, end_date, claim_id) as encounter_claim_number\n  , row_number() over (partition by encounter_id order by start_date desc, end_date desc, claim_id desc) as encounter_claim_number_desc\n  , close_flag\n  , min_closing_row\n  , dense_rank() over (order by encounter_id) as encounter_id\nfrom add_encounter_id", "relation_name": "dev_coco.claims_preprocessing.inpatient_rehab__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.832272Z", "completed_at": "2024-10-11T23:52:43.872454Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.875587Z", "completed_at": "2024-10-11T23:52:43.875598Z"}], "thread_id": "Thread-7", "execution_time": 0.05582022666931152, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_snf__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith claim_start_end as (\n  select\n    claim_id,\n    patient_data_source_id,\n    min(start_date) as start_date,\n    max(end_date) as end_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  group by claim_id, patient_data_source_id\n)\n\n, base as (\n  select distinct\n    enc.claim_id,\n    enc.patient_data_source_id,\n    c.start_date,\n    c.end_date,\n    enc.facility_id,\n    enc.discharge_disposition_code\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim enc\n  inner join claim_start_end c \n    on enc.claim_id = c.claim_id\n    and c.patient_data_source_id = enc.patient_data_source_id\n  where\n    enc.service_category_2 = 'skilled nursing'\n    and enc.claim_type = 'institutional'\n)\n\n, add_row_num as (\n  select\n    patient_data_source_id,\n    claim_id,\n    start_date,\n    end_date,\n    discharge_disposition_code,\n    facility_id,\n    row_number() over (partition by patient_data_source_id order by end_date, start_date, claim_id) as row_num\n  from base\n)\n\n, check_for_merges_with_larger_row_num as (\n  select\n    aa.patient_data_source_id,\n    aa.claim_id as claim_id_a,\n    bb.claim_id as claim_id_b,\n    aa.row_num as row_num_a,\n    bb.row_num as row_num_b,   \n    case\n      when aa.end_date = bb.end_date and aa.facility_id = bb.facility_id then 1\n      when \n\n    dateadd(\n        day,\n        1,\n        aa.end_date\n        )\n\n = bb.start_date\n        and aa.facility_id = bb.facility_id\n        and aa.discharge_disposition_code = '30' then 1\n      when aa.end_date <> bb.end_date\n        and aa.end_date >= bb.start_date\n        and aa.facility_id = bb.facility_id then 1\n      else 0\n    end as merge_flag\n  from add_row_num as aa\n  inner join add_row_num as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.row_num < bb.row_num\n    and aa.claim_id <> bb.claim_id\n)\n\n, merges_with_larger_row_num as (\n  select\n      patient_data_source_id\n    , claim_id_a\n    , claim_id_b\n    , row_num_a\n    , row_num_b\n    , merge_flag\n  from check_for_merges_with_larger_row_num\n  where merge_flag = 1\n)\n\n, claim_ids_that_merge_with_larger_row_num as (\n  select distinct\n      claim_id_a as claim_id\n  from merges_with_larger_row_num\n)\n\n, claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\n  select distinct\n      aa.claim_id as claim_id\n  from add_row_num as aa\n  inner join merges_with_larger_row_num as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and bb.row_num_a < aa.row_num\n    and bb.row_num_b > aa.row_num\n)\n\n, close_flags as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , case\n        when bb.claim_id is null\n          and cc.claim_id is null then 1\n        else 0\n      end as close_flag\n  from add_row_num as aa\n  left join claim_ids_that_merge_with_larger_row_num as bb\n    on aa.claim_id = bb.claim_id\n  left join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as cc\n    on aa.claim_id = cc.claim_id\n)\n\n, join_every_row_to_later_closes as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.row_num\n    , bb.row_num as row_num_b\n  from close_flags as aa\n  inner join close_flags as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.row_num <= bb.row_num\n  where bb.close_flag = 1\n)\n\n, find_min_closing_row_num_for_every_claim as (\n  select\n      patient_data_source_id\n    , claim_id\n    , min(row_num_b) as min_closing_row\n  from join_every_row_to_later_closes\n  group by\n      patient_data_source_id\n    , claim_id\n)\n\n, add_min_closing_row_to_every_claim as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , aa.close_flag\n    , bb.min_closing_row\n  from close_flags as aa\n  left join find_min_closing_row_num_for_every_claim as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.claim_id = bb.claim_id\n)\n\n, add_encounter_id as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , aa.close_flag\n    , aa.min_closing_row\n    , bb.claim_id as encounter_id\n  from add_min_closing_row_to_every_claim as aa\n  left join add_min_closing_row_to_every_claim as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.min_closing_row = bb.row_num\n)\n\nselect\n    patient_data_source_id\n  , claim_id\n  , start_date\n  , end_date\n  , discharge_disposition_code\n  , facility_id\n  , row_number() over (partition by encounter_id order by start_date, end_date, claim_id) as encounter_claim_number\n  , row_number() over (partition by encounter_id order by start_date desc, end_date desc, claim_id desc) as encounter_claim_number_desc\n  , close_flag\n  , min_closing_row\n  , dense_rank() over (order by encounter_id) as encounter_id\nfrom add_encounter_id", "relation_name": "dev_coco.claims_preprocessing.inpatient_snf__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.837801Z", "completed_at": "2024-10-11T23:52:43.873555Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.876889Z", "completed_at": "2024-10-11T23:52:43.876894Z"}], "thread_id": "Thread-3", "execution_time": 0.054997920989990234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_substance_use__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith claim_start_end as (\n  select\n    claim_id,\n    patient_data_source_id,\n    min(start_date) as start_date,\n    max(end_date) as end_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  group by claim_id, patient_data_source_id\n)\n\n, base as (\n  select distinct\n    enc.claim_id,\n    enc.patient_data_source_id,\n    c.start_date,\n    c.end_date,\n    enc.facility_id,\n    enc.discharge_disposition_code\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim enc\n  inner join claim_start_end c \n    on enc.claim_id = c.claim_id\n    and c.patient_data_source_id = enc.patient_data_source_id\n  where\n    enc.service_category_2 = 'inpatient substance use'\n    and enc.claim_type = 'institutional'\n)\n\n, add_row_num as (\n  select\n    patient_data_source_id,\n    claim_id,\n    start_date,\n    end_date,\n    discharge_disposition_code,\n    facility_id,\n    row_number() over (partition by patient_data_source_id order by end_date, start_date, claim_id) as row_num\n  from base\n)\n\n, check_for_merges_with_larger_row_num as (\n  select\n    aa.patient_data_source_id,\n    aa.claim_id as claim_id_a,\n    bb.claim_id as claim_id_b,\n    aa.row_num as row_num_a,\n    bb.row_num as row_num_b,\n    case\n      when aa.end_date = bb.end_date and aa.facility_id = bb.facility_id then 1\n      when \n\n    dateadd(\n        day,\n        1,\n        aa.end_date\n        )\n\n = bb.start_date\n        and aa.facility_id = bb.facility_id\n        and aa.discharge_disposition_code = '30' then 1\n      when aa.end_date <> bb.end_date\n        and aa.end_date >= bb.start_date\n        and aa.facility_id = bb.facility_id then 1\n      else 0\n    end as merge_flag\n  from add_row_num as aa\n  inner join add_row_num as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.row_num < bb.row_num\n    and aa.claim_id <> bb.claim_id\n)\n\n\n, merges_with_larger_row_num as (\n  select\n      patient_data_source_id\n    , claim_id_a\n    , claim_id_b\n    , row_num_a\n    , row_num_b\n    , merge_flag\n  from check_for_merges_with_larger_row_num\n  where merge_flag = 1\n)\n\n, claim_ids_that_merge_with_larger_row_num as (\n  select distinct\n      claim_id_a as claim_id\n  from merges_with_larger_row_num\n)\n\n, claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\n  select distinct\n      aa.claim_id as claim_id\n  from add_row_num as aa\n  inner join merges_with_larger_row_num as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and bb.row_num_a < aa.row_num\n    and bb.row_num_b > aa.row_num\n)\n\n, close_flags as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , case\n        when bb.claim_id is null\n          and cc.claim_id is null then 1\n        else 0\n      end as close_flag\n  from add_row_num as aa\n  left join claim_ids_that_merge_with_larger_row_num as bb\n    on aa.claim_id = bb.claim_id\n  left join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as cc\n    on aa.claim_id = cc.claim_id\n)\n\n, join_every_row_to_later_closes as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.row_num\n    , bb.row_num as row_num_b\n  from close_flags as aa\n  inner join close_flags as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.row_num <= bb.row_num\n  where bb.close_flag = 1\n)\n\n, find_min_closing_row_num_for_every_claim as (\n  select\n      patient_data_source_id\n    , claim_id\n    , min(row_num_b) as min_closing_row\n  from join_every_row_to_later_closes\n  group by\n      patient_data_source_id\n    , claim_id\n)\n\n, add_min_closing_row_to_every_claim as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , aa.close_flag\n    , bb.min_closing_row\n  from close_flags as aa\n  left join find_min_closing_row_num_for_every_claim as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.claim_id = bb.claim_id\n)\n\n, add_encounter_id as (\n  select\n      aa.patient_data_source_id\n    , aa.claim_id\n    , aa.start_date\n    , aa.end_date\n    , aa.discharge_disposition_code\n    , aa.facility_id\n    , aa.row_num\n    , aa.close_flag\n    , aa.min_closing_row\n    , bb.claim_id as encounter_id\n  from add_min_closing_row_to_every_claim as aa\n  left join add_min_closing_row_to_every_claim as bb\n    on aa.patient_data_source_id = bb.patient_data_source_id\n    and aa.min_closing_row = bb.row_num\n)\n\nselect\n    patient_data_source_id\n  , claim_id\n  , start_date\n  , end_date\n  , discharge_disposition_code\n  , facility_id\n  , row_number() over (partition by encounter_id order by start_date, end_date, claim_id) as encounter_claim_number\n  , row_number() over (partition by encounter_id order by start_date desc, end_date desc, claim_id desc) as encounter_claim_number_desc\n  , close_flag\n  , min_closing_row\n  , dense_rank() over (order by encounter_id) as encounter_id\nfrom add_encounter_id", "relation_name": "dev_coco.claims_preprocessing.inpatient_substance_use__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.843760Z", "completed_at": "2024-10-11T23:52:43.874038Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.877661Z", "completed_at": "2024-10-11T23:52:43.877666Z"}], "thread_id": "Thread-9", "execution_time": 0.05541110038757324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.lab__anchor_events", "compiled": true, "compiled_code": "\n\nwith service_category as (\n  select distinct\n      claim_id\n    , patient_data_source_id\n    , start_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  where\n    service_category_2 = 'lab' --both inst and prof\n    \n)\n\nselect distinct \nclaim_id\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_category", "relation_name": "dev_coco.claims_preprocessing.lab__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.848579Z", "completed_at": "2024-10-11T23:52:43.874402Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.878134Z", "completed_at": "2024-10-11T23:52:43.878138Z"}], "thread_id": "Thread-6", "execution_time": 0.05529308319091797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.office_visits__int_office_visits", "compiled": true, "compiled_code": "\n\nwith anchor as (\n    select distinct\n        mc.patient_data_source_id\n      , mc.start_date\n      , mc.claim_id\n      , mc.claim_line_number\n      , mc.service_category_1\n      , mc.service_category_2\n      , mc.service_category_3\n    from dev_coco.claims_preprocessing.encounters__stg_medical_claim as mc\n    inner join dev_coco.claims_preprocessing._int_combined_professional as p -- joining in all sc regardless of final priority\n      on mc.claim_id = p.claim_id\n      and mc.claim_line_number = p.claim_line_number\n    where p.service_category_1 = 'office-based'\n)\n\nselect\n    patient_data_source_id\n  , start_date\n  , claim_id\n  , claim_line_number\n  , service_category_1\n  , service_category_2\n  , service_category_3\n  , dense_rank() over (order by patient_data_source_id, start_date) as old_encounter_id\nfrom anchor", "relation_name": "dev_coco.claims_preprocessing.office_visits__int_office_visits"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.852590Z", "completed_at": "2024-10-11T23:52:43.874674Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.878609Z", "completed_at": "2024-10-11T23:52:43.878614Z"}], "thread_id": "Thread-8", "execution_time": 0.05545997619628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_hospice__anchor_events", "compiled": true, "compiled_code": "\n\nwith service_category as (\n  select distinct\n      claim_id\n    , patient_data_source_id\n    , start_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  where\n    service_category_2 = 'outpatient hospice' --both inst and prof\n    \n)\n\nselect distinct \nclaim_id\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_category", "relation_name": "dev_coco.claims_preprocessing.outpatient_hospice__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.856749Z", "completed_at": "2024-10-11T23:52:43.875054Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.879074Z", "completed_at": "2024-10-11T23:52:43.879078Z"}], "thread_id": "Thread-4", "execution_time": 0.05505990982055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_hospital_or_clinic__anchor_events", "compiled": true, "compiled_code": "\n\nwith service_category as (\n    select distinct\n        claim_id\n      , patient_data_source_id\n      , start_date\n    from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n    where \n      service_category_2 in (\n          'outpatient hospital or clinic' -- both prof and inst\n        , 'observation' -- orphaned obs that didn't roll up to other encounter\n      )\n)\n\nselect distinct \n    claim_id\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_category", "relation_name": "dev_coco.claims_preprocessing.outpatient_hospital_or_clinic__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.862676Z", "completed_at": "2024-10-11T23:52:43.876185Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.879925Z", "completed_at": "2024-10-11T23:52:43.879929Z"}], "thread_id": "Thread-10", "execution_time": 0.055171966552734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_injections__anchor_events", "compiled": true, "compiled_code": "\n\nwith multiple_sources as \n(\nselect distinct\n    med.patient_data_source_id\n    ,med.start_date\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim med\ninner join dev_coco.claims_preprocessing.encounters__stg_outpatient_institutional outpatient\n    on med.claim_id = outpatient.claim_id\nwhere substring(med.hcpcs_code,1,1) = 'J'\n)\n\n\nselect distinct \n    patient_data_source_id\n    ,start_date\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom multiple_sources", "relation_name": "dev_coco.claims_preprocessing.outpatient_injections__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.867357Z", "completed_at": "2024-10-11T23:52:43.877414Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:43.881115Z", "completed_at": "2024-10-11T23:52:43.881122Z"}], "thread_id": "Thread-5", "execution_time": 0.05590701103210449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_psych__anchor_events", "compiled": true, "compiled_code": "\n\nwith service_category as (\n  select distinct\n      claim_id\n    , patient_data_source_id\n    , start_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  where\n    service_category_2 = 'outpatient psychiatric' --both inst and prof as anchor\n)\n\nselect distinct \nclaim_id\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_category", "relation_name": "dev_coco.claims_preprocessing.outpatient_psych__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.886821Z", "completed_at": "2024-10-11T23:52:43.908358Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.071242Z", "completed_at": "2024-10-11T23:52:44.071253Z"}], "thread_id": "Thread-2", "execution_time": 0.19093108177185059, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_ptotst__anchor_events", "compiled": true, "compiled_code": "\n\nwith service_category as (\n  select distinct\n      claim_id\n    , patient_data_source_id\n    , start_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  where\n    service_category_2 = 'outpatient pt/ot/st' --both inst and prof as anchor\n)\n\nselect distinct \nclaim_id\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_category", "relation_name": "dev_coco.claims_preprocessing.outpatient_ptotst__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.893768Z", "completed_at": "2024-10-11T23:52:44.070926Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.076056Z", "completed_at": "2024-10-11T23:52:44.076065Z"}], "thread_id": "Thread-7", "execution_time": 0.19298410415649414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_radiology__anchor_events", "compiled": true, "compiled_code": "\n\nwith service_category as (\n  select distinct\n    patient_data_source_id\n    , start_date\n    , hcpcs_code\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  where\n    service_category_2 = 'outpatient radiology' --both professional and inst\n)\n\nselect distinct \n    patient_data_source_id\n    , start_date\n    , hcpcs_code\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_category", "relation_name": "dev_coco.claims_preprocessing.outpatient_radiology__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.903677Z", "completed_at": "2024-10-11T23:52:44.071877Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.077614Z", "completed_at": "2024-10-11T23:52:44.077619Z"}], "thread_id": "Thread-9", "execution_time": 0.19286203384399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_substance_use__anchor_events", "compiled": true, "compiled_code": "\n\nwith service_category as (\n  select distinct\n      claim_id\n    , patient_data_source_id\n    , start_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  where\n    service_category_2 = 'outpatient substance use'\n    and claim_type = 'institutional'\n)\n\nselect distinct \nclaim_id\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_category", "relation_name": "dev_coco.claims_preprocessing.outpatient_substance_use__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.898678Z", "completed_at": "2024-10-11T23:52:44.072126Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.078180Z", "completed_at": "2024-10-11T23:52:44.078186Z"}], "thread_id": "Thread-3", "execution_time": 0.19405126571655273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_rehab__anchor_events", "compiled": true, "compiled_code": "\n\nwith service_category as (\n  select distinct\n      claim_id\n    , patient_data_source_id\n    , start_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  where\n    service_category_2 = 'outpatient rehabilitation'\n)\n\nselect distinct \nclaim_id\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_category", "relation_name": "dev_coco.claims_preprocessing.outpatient_rehab__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.908664Z", "completed_at": "2024-10-11T23:52:44.074770Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.078997Z", "completed_at": "2024-10-11T23:52:44.079001Z"}], "thread_id": "Thread-6", "execution_time": 0.19390010833740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_surgery__anchor_events", "compiled": true, "compiled_code": "\n\nwith service_category as (\n  select distinct\n      claim_id\n    , patient_data_source_id\n    , start_date\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  where\n    service_category_2 in ('outpatient surgery') --both inst and prof anchor\n)\n\nselect distinct \nclaim_id\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_category", "relation_name": "dev_coco.claims_preprocessing.outpatient_surgery__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.055870Z", "completed_at": "2024-10-11T23:52:44.075452Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.079465Z", "completed_at": "2024-10-11T23:52:44.079468Z"}], "thread_id": "Thread-4", "execution_time": 0.1937699317932129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__start_end_dates", "compiled": true, "compiled_code": "\n\nselect encounter_id \n, min(start_date) as encounter_start_date\n, max(end_date) as encounter_end_date\nfrom dev_coco.claims_preprocessing.acute_inpatient__generate_encounter_id\ngroup by encounter_id", "relation_name": "dev_coco.claims_preprocessing.acute_inpatient__start_end_dates"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:43.913105Z", "completed_at": "2024-10-11T23:52:44.075781Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.079926Z", "completed_at": "2024-10-11T23:52:44.079930Z"}], "thread_id": "Thread-8", "execution_time": 0.19453096389770508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.urgent_care__anchor_events", "compiled": true, "compiled_code": "\n\n  select distinct\n      claim_id\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim\n  where\n    service_category_2 in ('urgent care') --both inst and prof anchor", "relation_name": "dev_coco.claims_preprocessing.urgent_care__anchor_events"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.062412Z", "completed_at": "2024-10-11T23:52:44.076703Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.080723Z", "completed_at": "2024-10-11T23:52:44.080728Z"}], "thread_id": "Thread-10", "execution_time": 0.19427824020385742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ambulance__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith anchor as \n(\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.ambulance__anchor_events u on m.claim_id = u.claim_id\n)\n\nselect patient_data_source_id\n,start_date\n,claim_id\n,dense_rank() over (order by patient_data_source_id, start_date) as old_encounter_id\nfrom anchor", "relation_name": "dev_coco.claims_preprocessing.ambulance__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.066937Z", "completed_at": "2024-10-11T23:52:44.077288Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.081552Z", "completed_at": "2024-10-11T23:52:44.081557Z"}], "thread_id": "Thread-5", "execution_time": 0.18925189971923828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.dialysis__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith anchor as \n(\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.dialysis__anchor_events u on m.claim_id = u.claim_id\n)\n\nselect patient_data_source_id\n,start_date\n,claim_id\n,dense_rank() over (order by patient_data_source_id, start_date) as old_encounter_id\nfrom anchor", "relation_name": "dev_coco.claims_preprocessing.dialysis__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.088556Z", "completed_at": "2024-10-11T23:52:44.108971Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.128377Z", "completed_at": "2024-10-11T23:52:44.128386Z"}], "thread_id": "Thread-2", "execution_time": 0.04725313186645508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.asc__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith base_data as (\n    select distinct\n        m.patient_data_source_id\n      , m.start_date\n      , m.end_date\n      , m.claim_id\n    from dev_coco.claims_preprocessing.encounters__stg_medical_claim as m\n    inner join dev_coco.claims_preprocessing.asc__anchor_events as u\n      on m.claim_id = u.claim_id\n)\n\n-- Determine Previous Maximum End Date\n, grouped_data as (\n    select\n        bd.*\n      , max(end_date) over (\n            partition by patient_data_source_id \n            order by start_date, claim_id \n            rows between unbounded preceding and 1 preceding\n        ) as previous_max_end_date\n    from base_data as bd\n)\n\n-- Flag New Encounter Groups\n, flagged_data as (\n    select\n        gd.*\n      , case \n            when start_date > coalesce(previous_max_end_date, '1900-01-01') then 1 \n            else 0 \n        end as new_group_flag\n    from grouped_data as gd\n)\n\n-- Assign Encounter Groups per Patient\n, numbered_data as (\n    select\n        fd.*\n      , sum(new_group_flag) over (\n            partition by patient_data_source_id \n            order by start_date, claim_id \n            rows unbounded preceding\n        ) as encounter_group\n    from flagged_data as fd\n)\n\n-- Identify Unique Encounters\n, unique_encounters as (\n    select\n        patient_data_source_id\n      , encounter_group\n      , min(start_date) as encounter_start_date\n    from numbered_data\n    group by\n        patient_data_source_id\n      , encounter_group\n)\n\n-- Assign asc encounter_id\n, numbered_encounters as (\n    select\n        patient_data_source_id\n      , encounter_group\n      , row_number() over (\n            order by patient_data_source_id, encounter_start_date\n        ) as encounter_id\n    from unique_encounters\n)\n\n-- Merge Encounters with Claims\nselect\n    nd.patient_data_source_id\n  , nd.start_date\n  , nd.end_date\n  , nd.claim_id\n  , ne.encounter_id as old_encounter_id\nfrom numbered_data as nd\ninner join numbered_encounters as ne\n  on nd.patient_data_source_id = ne.patient_data_source_id\n  and nd.encounter_group = ne.encounter_group", "relation_name": "dev_coco.claims_preprocessing.asc__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.095415Z", "completed_at": "2024-10-11T23:52:44.128059Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.130643Z", "completed_at": "2024-10-11T23:52:44.130650Z"}], "thread_id": "Thread-7", "execution_time": 0.04619407653808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.dme__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith anchor as \n(\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.dme__anchor_events u on m.claim_id = u.claim_id\n)\n\nselect patient_data_source_id\n,start_date\n,claim_id\n,dense_rank() over (order by patient_data_source_id, start_date) as old_encounter_id\nfrom anchor", "relation_name": "dev_coco.claims_preprocessing.dme__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.101267Z", "completed_at": "2024-10-11T23:52:44.129174Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.132340Z", "completed_at": "2024-10-11T23:52:44.132345Z"}], "thread_id": "Thread-9", "execution_time": 0.046541690826416016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.emergency_department__start_end_dates", "compiled": true, "compiled_code": "\n\nselect encounter_id \n, min(start_date) as encounter_start_date\n, max(end_date) as encounter_end_date\nfrom dev_coco.claims_preprocessing.emergency_department__generate_encounter_id\ngroup by encounter_id", "relation_name": "dev_coco.claims_preprocessing.emergency_department__start_end_dates"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.104822Z", "completed_at": "2024-10-11T23:52:44.129472Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.132880Z", "completed_at": "2024-10-11T23:52:44.132886Z"}], "thread_id": "Thread-3", "execution_time": 0.04667997360229492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.home_health__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith anchor as \n(\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.home_health__anchor_events u on m.claim_id = u.claim_id\n)\n\nselect patient_data_source_id\n,start_date\n,claim_id\n,dense_rank() over (order by patient_data_source_id, start_date) as old_encounter_id\nfrom anchor", "relation_name": "dev_coco.claims_preprocessing.home_health__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.109280Z", "completed_at": "2024-10-11T23:52:44.130026Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.133379Z", "completed_at": "2024-10-11T23:52:44.133384Z"}], "thread_id": "Thread-6", "execution_time": 0.04671978950500488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_psych__start_end_dates", "compiled": true, "compiled_code": "\n\nselect encounter_id \n, min(start_date) as encounter_start_date\n, max(end_date) as encounter_end_date\nfrom dev_coco.claims_preprocessing.inpatient_psych__generate_encounter_id\ngroup by encounter_id", "relation_name": "dev_coco.claims_preprocessing.inpatient_psych__start_end_dates"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.112843Z", "completed_at": "2024-10-11T23:52:44.130305Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.133851Z", "completed_at": "2024-10-11T23:52:44.133855Z"}], "thread_id": "Thread-4", "execution_time": 0.046723127365112305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_hospice__start_end_dates", "compiled": true, "compiled_code": "\n\nselect encounter_id \n, min(start_date) as encounter_start_date\n, max(end_date) as encounter_end_date\nfrom dev_coco.claims_preprocessing.inpatient_hospice__generate_encounter_id\ngroup by encounter_id", "relation_name": "dev_coco.claims_preprocessing.inpatient_hospice__start_end_dates"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.116202Z", "completed_at": "2024-10-11T23:52:44.131175Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.134671Z", "completed_at": "2024-10-11T23:52:44.134675Z"}], "thread_id": "Thread-8", "execution_time": 0.04714083671569824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_rehab__start_end_dates", "compiled": true, "compiled_code": "\n\nselect encounter_id \n, min(start_date) as encounter_start_date\n, max(end_date) as encounter_end_date\nfrom dev_coco.claims_preprocessing.inpatient_rehab__generate_encounter_id\ngroup by encounter_id", "relation_name": "dev_coco.claims_preprocessing.inpatient_rehab__start_end_dates"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.119587Z", "completed_at": "2024-10-11T23:52:44.131762Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.135495Z", "completed_at": "2024-10-11T23:52:44.135500Z"}], "thread_id": "Thread-10", "execution_time": 0.0473170280456543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_snf__start_end_dates", "compiled": true, "compiled_code": "\n\nselect encounter_id \n, min(start_date) as encounter_start_date\n, max(end_date) as encounter_end_date\nfrom dev_coco.claims_preprocessing.inpatient_snf__generate_encounter_id\ngroup by encounter_id", "relation_name": "dev_coco.claims_preprocessing.inpatient_snf__start_end_dates"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.124094Z", "completed_at": "2024-10-11T23:52:44.132071Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.136016Z", "completed_at": "2024-10-11T23:52:44.136021Z"}], "thread_id": "Thread-5", "execution_time": 0.04233217239379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_substance_use__start_end_dates", "compiled": true, "compiled_code": "\n\nselect encounter_id \n, min(start_date) as encounter_start_date\n, max(end_date) as encounter_end_date\nfrom dev_coco.claims_preprocessing.inpatient_substance_use__generate_encounter_id\ngroup by encounter_id", "relation_name": "dev_coco.claims_preprocessing.inpatient_substance_use__start_end_dates"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.143288Z", "completed_at": "2024-10-11T23:52:44.159323Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.184955Z", "completed_at": "2024-10-11T23:52:44.184964Z"}], "thread_id": "Thread-2", "execution_time": 0.04988217353820801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.lab__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith anchor as \n(\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.lab__anchor_events u on m.claim_id = u.claim_id\n)\n\nselect patient_data_source_id\n,start_date\n,claim_id\n,dense_rank() over (order by patient_data_source_id, start_date) as old_encounter_id\nfrom anchor", "relation_name": "dev_coco.claims_preprocessing.lab__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.149344Z", "completed_at": "2024-10-11T23:52:44.184645Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.187554Z", "completed_at": "2024-10-11T23:52:44.187560Z"}], "thread_id": "Thread-7", "execution_time": 0.0497281551361084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.office_visits__int_office_visits_em", "compiled": true, "compiled_code": "\n\nselect distinct\n    ov.patient_data_source_id\n    ,ov.start_date\n    ,ov.claim_id\n    ,ov.claim_line_number\n    ,ov.old_encounter_id\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits ov\nwhere service_category_2 = 'office-based visit'", "relation_name": "dev_coco.claims_preprocessing.office_visits__int_office_visits_em"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.154488Z", "completed_at": "2024-10-11T23:52:44.185552Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.189009Z", "completed_at": "2024-10-11T23:52:44.189014Z"}], "thread_id": "Thread-9", "execution_time": 0.049463748931884766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.office_visits__int_office_visits_injections", "compiled": true, "compiled_code": "\n\nselect distinct\n    ov.patient_data_source_id\n    ,ov.start_date\n    ,ov.claim_id\n    ,ov.claim_line_number\n    ,ov.old_encounter_id\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits ov\ninner join dev_coco.claims_preprocessing.encounters__stg_medical_claim mc on mc.claim_id = ov.claim_id\n    and mc.claim_line_number = ov.claim_line_number\nwhere substring(hcpcs_code,1,1) = 'J'", "relation_name": "dev_coco.claims_preprocessing.office_visits__int_office_visits_injections"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.159652Z", "completed_at": "2024-10-11T23:52:44.185985Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.189556Z", "completed_at": "2024-10-11T23:52:44.189562Z"}], "thread_id": "Thread-3", "execution_time": 0.04963994026184082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.office_visits__int_office_visits_ptotst", "compiled": true, "compiled_code": "\n\nselect distinct\n    ov.patient_data_source_id\n    ,ov.start_date\n    ,ov.claim_id\n    ,ov.claim_line_number\n    ,ov.old_encounter_id\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits ov\nwhere service_category_2 = 'office-based pt/ot/st'", "relation_name": "dev_coco.claims_preprocessing.office_visits__int_office_visits_ptotst"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.163691Z", "completed_at": "2024-10-11T23:52:44.186504Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.190042Z", "completed_at": "2024-10-11T23:52:44.190047Z"}], "thread_id": "Thread-6", "execution_time": 0.04980611801147461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.office_visits__int_office_visits_radiology", "compiled": true, "compiled_code": "\n\nwith max_encounter as (\n    select max(old_encounter_id) as max_encounter_id\n    from dev_coco.claims_preprocessing.office_visits__int_office_visits\n)\n\nselect distinct\n    ov.patient_data_source_id\n    ,ov.start_date\n    ,ov.claim_id\n    ,ov.claim_line_number\n    ,mc.hcpcs_code\n    ,dense_rank() over (order by ov.patient_data_source_id, ov.start_date, mc.hcpcs_code) + mx.max_encounter_id as old_encounter_id\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits ov\ncross join max_encounter mx\ninner join dev_coco.claims_preprocessing.encounters__stg_medical_claim mc on mc.claim_id = ov.claim_id\n    and mc.claim_line_number = ov.claim_line_number\ninner join dev_coco.claims_preprocessing.service_category__office_based_radiology scrad on mc.claim_id = scrad.claim_id\n    and mc.claim_line_number = scrad.claim_line_number", "relation_name": "dev_coco.claims_preprocessing.office_visits__int_office_visits_radiology"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.169167Z", "completed_at": "2024-10-11T23:52:44.186964Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.190514Z", "completed_at": "2024-10-11T23:52:44.190518Z"}], "thread_id": "Thread-4", "execution_time": 0.04899930953979492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.office_visits__int_office_visits_surgery", "compiled": true, "compiled_code": "\n\nselect distinct\n    ov.patient_data_source_id\n    ,ov.start_date\n    ,ov.claim_id\n    ,ov.claim_line_number\n    ,ov.old_encounter_id\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits ov\nwhere service_category_2 = 'office-based surgery'", "relation_name": "dev_coco.claims_preprocessing.office_visits__int_office_visits_surgery"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.180630Z", "completed_at": "2024-10-11T23:52:44.187251Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.190978Z", "completed_at": "2024-10-11T23:52:44.190982Z"}], "thread_id": "Thread-5", "execution_time": 0.04308199882507324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_hospital_or_clinic__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith anchor as \n(\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_hospital_or_clinic__anchor_events u on m.claim_id = u.claim_id\n)\n\nselect patient_data_source_id\n,start_date\n,claim_id\n,dense_rank() over (order by patient_data_source_id, start_date) as old_encounter_id\nfrom anchor", "relation_name": "dev_coco.claims_preprocessing.outpatient_hospital_or_clinic__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.172813Z", "completed_at": "2024-10-11T23:52:44.188431Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.192095Z", "completed_at": "2024-10-11T23:52:44.192099Z"}], "thread_id": "Thread-8", "execution_time": 0.049225807189941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.office_visits__int_office_visits_telehealth", "compiled": true, "compiled_code": "\n\nselect distinct\n    ov.patient_data_source_id\n    ,ov.start_date\n    ,ov.claim_id\n    ,ov.claim_line_number\n    ,ov.old_encounter_id\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits ov\nwhere service_category_2 = 'telehealth visit'", "relation_name": "dev_coco.claims_preprocessing.office_visits__int_office_visits_telehealth"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.176716Z", "completed_at": "2024-10-11T23:52:44.188686Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.192558Z", "completed_at": "2024-10-11T23:52:44.192562Z"}], "thread_id": "Thread-10", "execution_time": 0.04502987861633301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_hospice__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith anchor as \n(\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_hospice__anchor_events u on m.claim_id = u.claim_id\n)\n\nselect patient_data_source_id\n,start_date\n,claim_id\n,dense_rank() over (order by patient_data_source_id, start_date) as old_encounter_id\nfrom anchor", "relation_name": "dev_coco.claims_preprocessing.outpatient_hospice__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.198647Z", "completed_at": "2024-10-11T23:52:44.218468Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.239089Z", "completed_at": "2024-10-11T23:52:44.239098Z"}], "thread_id": "Thread-2", "execution_time": 0.04743218421936035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_injections__generate_encounter_id", "compiled": true, "compiled_code": "\n\nselect patient_data_source_id\n,start_date\n,dense_rank() over (order by patient_data_source_id, start_date) as old_encounter_id\nfrom dev_coco.claims_preprocessing.outpatient_injections__anchor_events", "relation_name": "dev_coco.claims_preprocessing.outpatient_injections__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.204267Z", "completed_at": "2024-10-11T23:52:44.238717Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.243045Z", "completed_at": "2024-10-11T23:52:44.243054Z"}], "thread_id": "Thread-7", "execution_time": 0.048538923263549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_psych__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith anchor as \n(\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_psych__anchor_events u on m.claim_id = u.claim_id\n)\n\nselect patient_data_source_id\n,start_date\n,claim_id\n,dense_rank() over (order by patient_data_source_id, start_date) as old_encounter_id\nfrom anchor", "relation_name": "dev_coco.claims_preprocessing.outpatient_psych__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.215024Z", "completed_at": "2024-10-11T23:52:44.239744Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.244854Z", "completed_at": "2024-10-11T23:52:44.244859Z"}], "thread_id": "Thread-3", "execution_time": 0.04867386817932129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_radiology__generate_encounter_id", "compiled": true, "compiled_code": "\n\nselect patient_data_source_id\n,start_date\n,hcpcs_code\n,dense_rank() over (order by patient_data_source_id, start_date, hcpcs_code) as old_encounter_id\nfrom dev_coco.claims_preprocessing.outpatient_radiology__anchor_events", "relation_name": "dev_coco.claims_preprocessing.outpatient_radiology__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.211252Z", "completed_at": "2024-10-11T23:52:44.240082Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.245783Z", "completed_at": "2024-10-11T23:52:44.245789Z"}], "thread_id": "Thread-9", "execution_time": 0.04995298385620117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_ptotst__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith anchor as \n(\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_ptotst__anchor_events u on m.claim_id = u.claim_id\n)\n\nselect patient_data_source_id\n,start_date\n,claim_id\n,dense_rank() over (order by patient_data_source_id, start_date) as old_encounter_id\nfrom anchor", "relation_name": "dev_coco.claims_preprocessing.outpatient_ptotst__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.222353Z", "completed_at": "2024-10-11T23:52:44.241892Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.246521Z", "completed_at": "2024-10-11T23:52:44.246527Z"}], "thread_id": "Thread-4", "execution_time": 0.04975414276123047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_rehab__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith anchor as \n(\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_rehab__anchor_events u on m.claim_id = u.claim_id\n)\n\nselect patient_data_source_id\n,start_date\n,claim_id\n,dense_rank() over (order by patient_data_source_id, start_date) as old_encounter_id\nfrom anchor", "relation_name": "dev_coco.claims_preprocessing.outpatient_rehab__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.218751Z", "completed_at": "2024-10-11T23:52:44.242500Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.247097Z", "completed_at": "2024-10-11T23:52:44.247102Z"}], "thread_id": "Thread-6", "execution_time": 0.050620079040527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_substance_use__generate_encounter_id", "compiled": true, "compiled_code": "\nwith anchor as \n(\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_substance_use__anchor_events u on m.claim_id = u.claim_id\n)\n\nselect patient_data_source_id\n,start_date\n,claim_id\n,dense_rank() over (order by patient_data_source_id, start_date) as old_encounter_id\nfrom anchor", "relation_name": "dev_coco.claims_preprocessing.outpatient_substance_use__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.225890Z", "completed_at": "2024-10-11T23:52:44.242787Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.247608Z", "completed_at": "2024-10-11T23:52:44.247613Z"}], "thread_id": "Thread-5", "execution_time": 0.05055499076843262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_surgery__generate_encounter_id", "compiled": true, "compiled_code": "\nwith anchor as \n(\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_surgery__anchor_events u on m.claim_id = u.claim_id\n)\n\nselect patient_data_source_id\n,start_date\n,claim_id\n,dense_rank() over (order by patient_data_source_id, start_date) as old_encounter_id\nfrom anchor", "relation_name": "dev_coco.claims_preprocessing.outpatient_surgery__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.229828Z", "completed_at": "2024-10-11T23:52:44.243733Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.248471Z", "completed_at": "2024-10-11T23:52:44.248476Z"}], "thread_id": "Thread-8", "execution_time": 0.046247005462646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__prof_claims", "compiled": true, "compiled_code": "\n\nwith first_claim as (\n    select *\n    from dev_coco.claims_preprocessing.acute_inpatient__generate_encounter_id\n    where encounter_claim_number = 1\n)\n\n,join_first_claim_dates as (\n    select f.*\n    ,dat.encounter_end_date\n    ,dat.encounter_start_date\n    from first_claim f \n    inner join dev_coco.claims_preprocessing.acute_inpatient__start_end_dates dat on f.encounter_id = dat.encounter_id\n)\n\n-- ensuring each prof claim is only attributed to one institutional claim with claim_attribution_number\nselect dat.encounter_id\n,dat.encounter_start_date\n,dat.encounter_end_date\n,prof.claim_id\n,prof.claim_line_number\n,row_number () over (partition by prof.claim_line_id order by dat.encounter_id) as claim_attribution_number\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim med\ninner join dev_coco.claims_preprocessing.encounters__stg_professional prof on med.claim_line_id = prof.claim_line_id\ninner join join_first_claim_dates dat on med.patient_data_source_id = dat.patient_data_source_id\nand med.start_date between dat.encounter_start_date and dat.encounter_end_date", "relation_name": "dev_coco.claims_preprocessing.acute_inpatient__prof_claims"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.235023Z", "completed_at": "2024-10-11T23:52:44.244498Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.249325Z", "completed_at": "2024-10-11T23:52:44.249330Z"}], "thread_id": "Thread-10", "execution_time": 0.04674410820007324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.urgent_care__generate_encounter_id", "compiled": true, "compiled_code": "\n\nwith anchor as \n(\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.urgent_care__anchor_events u on m.claim_id = u.claim_id\n)\n\nselect patient_data_source_id\n,start_date\n,claim_id\n,dense_rank() over (order by patient_data_source_id, start_date) as old_encounter_id\nfrom anchor", "relation_name": "dev_coco.claims_preprocessing.urgent_care__generate_encounter_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.254848Z", "completed_at": "2024-10-11T23:52:44.276805Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.293094Z", "completed_at": "2024-10-11T23:52:44.293103Z"}], "thread_id": "Thread-2", "execution_time": 0.044200897216796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ambulance__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\n , m.claim_line_number\n , u.old_encounter_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.ambulance__generate_encounter_id u on m.patient_data_source_id = u.patient_data_source_id\nand\nm.start_date = u.start_date\nwhere m.service_category_2 = 'ambulance'", "relation_name": "dev_coco.claims_preprocessing.ambulance__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.260434Z", "completed_at": "2024-10-11T23:52:44.292321Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.294901Z", "completed_at": "2024-10-11T23:52:44.294907Z"}], "thread_id": "Thread-7", "execution_time": 0.043408870697021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.dialysis__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\n , m.claim_line_number\n , u.old_encounter_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.dialysis__generate_encounter_id u on m.patient_data_source_id = u.patient_data_source_id\nand\nm.start_date = u.start_date", "relation_name": "dev_coco.claims_preprocessing.dialysis__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.264723Z", "completed_at": "2024-10-11T23:52:44.292833Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.295970Z", "completed_at": "2024-10-11T23:52:44.295975Z"}], "thread_id": "Thread-3", "execution_time": 0.04319190979003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.asc__start_end_dates", "compiled": true, "compiled_code": "\n\nselect\n    patient_data_source_id\n  , old_encounter_id\n  , min(start_date) as encounter_start_date\n  , max(end_date) as encounter_end_date\nfrom dev_coco.claims_preprocessing.asc__generate_encounter_id\ngroup by\n    patient_data_source_id\n  , old_encounter_id", "relation_name": "dev_coco.claims_preprocessing.asc__start_end_dates"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.268059Z", "completed_at": "2024-10-11T23:52:44.293864Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.297068Z", "completed_at": "2024-10-11T23:52:44.297073Z"}], "thread_id": "Thread-9", "execution_time": 0.043976783752441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.dme__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\n , m.claim_line_number\n , u.old_encounter_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.dme__generate_encounter_id u on m.patient_data_source_id = u.patient_data_source_id\nand\nm.start_date = u.start_date\nwhere m.service_category_2 = 'durable medical equipment'", "relation_name": "dev_coco.claims_preprocessing.dme__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.280567Z", "completed_at": "2024-10-11T23:52:44.294291Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.297568Z", "completed_at": "2024-10-11T23:52:44.297575Z"}], "thread_id": "Thread-5", "execution_time": 0.043627023696899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_psych__prof_claims", "compiled": true, "compiled_code": "\n\nwith first_claim as (\n    select *\n    from dev_coco.claims_preprocessing.inpatient_psych__generate_encounter_id\n    where encounter_claim_number = 1\n)\n\n,join_first_claim_dates as (\n    select f.*\n    ,dat.encounter_end_date\n    ,dat.encounter_start_date\n    from first_claim f \n    inner join dev_coco.claims_preprocessing.inpatient_psych__start_end_dates dat on f.encounter_id = dat.encounter_id\n)\n\n-- ensuring each prof claim is only attributed to one institutional claim with claim_attribution_number\nselect dat.encounter_id\n,dat.encounter_start_date\n,dat.encounter_end_date\n,prof.claim_id\n,prof.claim_line_number\n,row_number () over (partition by prof.claim_line_id order by dat.encounter_id) as claim_attribution_number\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim med\ninner join dev_coco.claims_preprocessing.encounters__stg_professional prof on med.claim_line_id = prof.claim_line_id\ninner join join_first_claim_dates dat on med.patient_data_source_id = dat.patient_data_source_id\nand med.start_date between dat.encounter_start_date and dat.encounter_end_date", "relation_name": "dev_coco.claims_preprocessing.inpatient_psych__prof_claims"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.272550Z", "completed_at": "2024-10-11T23:52:44.294557Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.298114Z", "completed_at": "2024-10-11T23:52:44.298119Z"}], "thread_id": "Thread-4", "execution_time": 0.04472708702087402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.emergency_department__prof_claims", "compiled": true, "compiled_code": "\n\nwith first_claim as (\n    select *\n    from dev_coco.claims_preprocessing.emergency_department__generate_encounter_id\n    where encounter_claim_number = 1\n)\n\n,join_first_claim_dates as (\n    select f.*\n    ,dat.encounter_end_date\n    ,dat.encounter_start_date\n    from first_claim f \n    inner join dev_coco.claims_preprocessing.emergency_department__start_end_dates dat on f.encounter_id = dat.encounter_id\n)\n\n\n-- ensuring each claim is only attributed to one encounter with claim_attribution_number\n,inst_and_prof as (\nselect dat.encounter_id\n,dat.encounter_start_date\n,dat.encounter_end_date\n,prof.claim_id\n,prof.claim_line_number\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim med\ninner join dev_coco.claims_preprocessing.encounters__stg_professional prof on med.claim_line_id = prof.claim_line_id\ninner join join_first_claim_dates dat on med.patient_data_source_id = dat.patient_data_source_id\nand med.start_date between dat.encounter_start_date and dat.encounter_end_date\n\nunion all \n\nselect dat.encounter_id\n,dat.encounter_start_date\n,dat.encounter_end_date\n,med.claim_id\n,med.claim_line_number\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim med\ninner join dev_coco.claims_preprocessing.encounters__stg_outpatient_institutional inst on med.claim_id = inst.claim_id\ninner join join_first_claim_dates dat on med.patient_data_source_id = dat.patient_data_source_id\nand med.start_date between dat.encounter_start_date and dat.encounter_end_date \nwhere dat.claim_id <> med.claim_id\n)\n\nselect distinct encounter_id\n,encounter_start_date\n,encounter_end_date\n,claim_id\n,claim_line_number\n,row_number () over (partition by claim_id ,claim_line_number order by encounter_id) as claim_attribution_number\nfrom inst_and_prof", "relation_name": "dev_coco.claims_preprocessing.emergency_department__prof_claims"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.284553Z", "completed_at": "2024-10-11T23:52:44.295421Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.298950Z", "completed_at": "2024-10-11T23:52:44.298954Z"}], "thread_id": "Thread-8", "execution_time": 0.044449806213378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_hospice__prof_claims", "compiled": true, "compiled_code": "\n\nwith first_claim as (\n    select *\n    from dev_coco.claims_preprocessing.inpatient_hospice__generate_encounter_id\n    where encounter_claim_number = 1\n)\n\n, join_first_claim_dates as (\n    select f.*\n    ,dat.encounter_end_date\n    ,dat.encounter_start_date\n    from first_claim f \n    inner join dev_coco.claims_preprocessing.inpatient_hospice__start_end_dates dat on f.encounter_id = dat.encounter_id\n)\n\n-- ensuring each prof claim is only attributed to one institutional claim with claim_attribution_number\nselect dat.encounter_id\n,dat.encounter_start_date\n,dat.encounter_end_date\n,prof.claim_id\n,prof.claim_line_number\n,row_number () over (partition by prof.claim_line_id order by dat.encounter_id) as claim_attribution_number\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim med\ninner join dev_coco.claims_preprocessing.encounters__stg_professional prof on med.claim_line_id = prof.claim_line_id\ninner join join_first_claim_dates dat on med.patient_data_source_id = dat.patient_data_source_id\nand med.start_date between dat.encounter_start_date and dat.encounter_end_date", "relation_name": "dev_coco.claims_preprocessing.inpatient_hospice__prof_claims"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.277081Z", "completed_at": "2024-10-11T23:52:44.295711Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.299427Z", "completed_at": "2024-10-11T23:52:44.299432Z"}], "thread_id": "Thread-6", "execution_time": 0.04587125778198242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.home_health__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\n , m.claim_line_number\n , u.old_encounter_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.home_health__generate_encounter_id u on m.patient_data_source_id = u.patient_data_source_id\nand\nm.start_date = u.start_date", "relation_name": "dev_coco.claims_preprocessing.home_health__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.288461Z", "completed_at": "2024-10-11T23:52:44.296441Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.300397Z", "completed_at": "2024-10-11T23:52:44.300401Z"}], "thread_id": "Thread-10", "execution_time": 0.041639089584350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_rehab__prof_claims", "compiled": true, "compiled_code": "\n\nwith first_claim as (\n    select *\n    from dev_coco.claims_preprocessing.inpatient_rehab__generate_encounter_id\n    where encounter_claim_number = 1\n)\n\n,join_first_claim_dates as (\n    select f.*\n    ,dat.encounter_end_date\n    ,dat.encounter_start_date\n    from first_claim f \n    inner join dev_coco.claims_preprocessing.inpatient_rehab__start_end_dates dat on f.encounter_id = dat.encounter_id\n)\n\n-- ensuring each prof claim is only attributed to one institutional claim with claim_attribution_number\nselect dat.encounter_id\n,dat.encounter_start_date\n,dat.encounter_end_date\n,prof.claim_id\n,prof.claim_line_number\n,row_number () over (partition by prof.claim_line_id order by dat.encounter_id) as claim_attribution_number\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim med\ninner join dev_coco.claims_preprocessing.encounters__stg_professional prof on med.claim_line_id = prof.claim_line_id\ninner join join_first_claim_dates dat on med.patient_data_source_id = dat.patient_data_source_id\nand med.start_date between dat.encounter_start_date and dat.encounter_end_date", "relation_name": "dev_coco.claims_preprocessing.inpatient_rehab__prof_claims"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.306522Z", "completed_at": "2024-10-11T23:52:44.336793Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.351175Z", "completed_at": "2024-10-11T23:52:44.351185Z"}], "thread_id": "Thread-2", "execution_time": 0.050375938415527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_snf__prof_claims", "compiled": true, "compiled_code": "\n\nwith first_claim as (\n    select *\n    from dev_coco.claims_preprocessing.inpatient_snf__generate_encounter_id\n    where encounter_claim_number = 1\n)\n\n,join_first_claim_dates as (\n    select f.*\n    ,dat.encounter_end_date\n    ,dat.encounter_start_date\n    from first_claim f \n    inner join dev_coco.claims_preprocessing.inpatient_snf__start_end_dates dat on f.encounter_id = dat.encounter_id\n)\n\n-- ensuring each prof claim is only attributed to one institutional claim with claim_attribution_number\nselect dat.encounter_id\n,dat.encounter_start_date\n,dat.encounter_end_date\n,prof.claim_id\n,prof.claim_line_number\n,row_number () over (partition by prof.claim_line_id order by dat.encounter_id) as claim_attribution_number\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim med\ninner join dev_coco.claims_preprocessing.encounters__stg_professional prof on med.claim_line_id = prof.claim_line_id\ninner join join_first_claim_dates dat on med.patient_data_source_id = dat.patient_data_source_id\nand med.start_date between dat.encounter_start_date and dat.encounter_end_date", "relation_name": "dev_coco.claims_preprocessing.inpatient_snf__prof_claims"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.312759Z", "completed_at": "2024-10-11T23:52:44.345393Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.352602Z", "completed_at": "2024-10-11T23:52:44.352607Z"}], "thread_id": "Thread-7", "execution_time": 0.05039405822753906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_substance_use__prof_claims", "compiled": true, "compiled_code": "\n\nwith first_claim as (\n    select *\n    from dev_coco.claims_preprocessing.inpatient_substance_use__generate_encounter_id\n    where encounter_claim_number = 1\n)\n\n,join_first_claim_dates as (\n    select f.*\n    ,dat.encounter_end_date\n    ,dat.encounter_start_date\n    from first_claim f \n    inner join dev_coco.claims_preprocessing.inpatient_substance_use__start_end_dates dat on f.encounter_id = dat.encounter_id\n)\n\n-- ensuring each prof claim is only attributed to one institutional claim with claim_attribution_number\nselect dat.encounter_id\n,dat.encounter_start_date\n,dat.encounter_end_date\n,prof.claim_id\n,prof.claim_line_number\n-- ,med.start_date\n-- ,med.end_date\n-- ,med.place_of_service_code\n-- ,med.place_of_service_description\n,row_number () over (partition by prof.claim_line_id order by dat.encounter_id) as claim_attribution_number\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim med\ninner join dev_coco.claims_preprocessing.encounters__stg_professional prof on med.claim_line_id = prof.claim_line_id\ninner join join_first_claim_dates dat on med.patient_data_source_id = dat.patient_data_source_id\nand med.start_date between dat.encounter_start_date and dat.encounter_end_date", "relation_name": "dev_coco.claims_preprocessing.inpatient_substance_use__prof_claims"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.317662Z", "completed_at": "2024-10-11T23:52:44.350419Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.355021Z", "completed_at": "2024-10-11T23:52:44.355026Z"}], "thread_id": "Thread-3", "execution_time": 0.0518190860748291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.lab__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\n , m.claim_line_number\n , u.old_encounter_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.lab__generate_encounter_id u on m.patient_data_source_id = u.patient_data_source_id\nand\nm.start_date = u.start_date\nwhere m.service_category_2 = 'lab'", "relation_name": "dev_coco.claims_preprocessing.lab__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.322121Z", "completed_at": "2024-10-11T23:52:44.350780Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.355519Z", "completed_at": "2024-10-11T23:52:44.355525Z"}], "thread_id": "Thread-9", "execution_time": 0.05140399932861328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_hospital_or_clinic__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\n , m.claim_line_number\n , u.old_encounter_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_hospital_or_clinic__generate_encounter_id u on m.patient_data_source_id = u.patient_data_source_id\nand\nm.start_date = u.start_date", "relation_name": "dev_coco.claims_preprocessing.outpatient_hospital_or_clinic__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.326241Z", "completed_at": "2024-10-11T23:52:44.351748Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.356693Z", "completed_at": "2024-10-11T23:52:44.356698Z"}], "thread_id": "Thread-5", "execution_time": 0.05227231979370117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.office_visits__int_office_visits_union", "compiled": true, "compiled_code": "\n\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'office visit radiology' as encounter_type\n,0 as priority_number\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits_radiology\n\n\nunion distinct\n\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'office visit surgery' as encounter_type\n,1 as priority_number\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits_surgery\n\n\nunion distinct\n\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'office visit injections' as encounter_type\n,2 as priority_number\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits_injections\n\n\nunion distinct\n\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'office visit pt/ot/st' as encounter_type\n,3 as priority_number\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits_ptotst\n\n\nunion distinct\n\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'office visit' as encounter_type\n,4 as priority_number\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits_em\n\n\nunion distinct\n\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'telehealth' as encounter_type\n,5 as priority_number\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits_telehealth\n\n\nunion distinct\n\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'office visit - other' as encounter_type\n,9999 as priority_number\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits", "relation_name": "dev_coco.claims_preprocessing.office_visits__int_office_visits_union"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.332980Z", "completed_at": "2024-10-11T23:52:44.352265Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.357187Z", "completed_at": "2024-10-11T23:52:44.357192Z"}], "thread_id": "Thread-4", "execution_time": 0.05246305465698242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_hospice__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\n , m.claim_line_number\n , u.old_encounter_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_hospice__generate_encounter_id u on m.patient_data_source_id = u.patient_data_source_id\nand\nm.start_date = u.start_date", "relation_name": "dev_coco.claims_preprocessing.outpatient_hospice__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.337123Z", "completed_at": "2024-10-11T23:52:44.353077Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.358021Z", "completed_at": "2024-10-11T23:52:44.358027Z"}], "thread_id": "Thread-8", "execution_time": 0.052742958068847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_injections__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\n , m.claim_line_number\n , u.old_encounter_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_injections__generate_encounter_id u on m.patient_data_source_id = u.patient_data_source_id\nand\nm.start_date = u.start_date", "relation_name": "dev_coco.claims_preprocessing.outpatient_injections__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.341877Z", "completed_at": "2024-10-11T23:52:44.354692Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.358849Z", "completed_at": "2024-10-11T23:52:44.358853Z"}], "thread_id": "Thread-6", "execution_time": 0.0532689094543457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_psych__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\n , m.claim_line_number\n , u.old_encounter_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_psych__generate_encounter_id u on m.patient_data_source_id = u.patient_data_source_id\nand\nm.start_date = u.start_date", "relation_name": "dev_coco.claims_preprocessing.outpatient_psych__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.345758Z", "completed_at": "2024-10-11T23:52:44.356036Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.359998Z", "completed_at": "2024-10-11T23:52:44.360003Z"}], "thread_id": "Thread-10", "execution_time": 0.053861141204833984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_radiology__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\n , m.claim_line_number\n , m.hcpcs_code\n , u.old_encounter_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_radiology__generate_encounter_id u on m.patient_data_source_id = u.patient_data_source_id\nand\nm.start_date = u.start_date\nand\nm.hcpcs_code = u.hcpcs_code", "relation_name": "dev_coco.claims_preprocessing.outpatient_radiology__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.366528Z", "completed_at": "2024-10-11T23:52:44.395256Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.396824Z", "completed_at": "2024-10-11T23:52:44.396835Z"}], "thread_id": "Thread-2", "execution_time": 0.036448001861572266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_ptotst__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\n , m.claim_line_number\n , u.old_encounter_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_ptotst__generate_encounter_id u on m.patient_data_source_id = u.patient_data_source_id\nand\nm.start_date = u.start_date", "relation_name": "dev_coco.claims_preprocessing.outpatient_ptotst__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.371187Z", "completed_at": "2024-10-11T23:52:44.395714Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.397681Z", "completed_at": "2024-10-11T23:52:44.397686Z"}], "thread_id": "Thread-7", "execution_time": 0.03622889518737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_rehab__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\n , m.claim_line_number\n , u.old_encounter_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_rehab__generate_encounter_id u on m.patient_data_source_id = u.patient_data_source_id\nand\nm.start_date = u.start_date", "relation_name": "dev_coco.claims_preprocessing.outpatient_rehab__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.380249Z", "completed_at": "2024-10-11T23:52:44.396137Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.398172Z", "completed_at": "2024-10-11T23:52:44.398177Z"}], "thread_id": "Thread-9", "execution_time": 0.035057783126831055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_surgery__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\n , m.claim_line_number\n , u.old_encounter_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_surgery__generate_encounter_id u on m.patient_data_source_id = u.patient_data_source_id\nand\nm.start_date = u.start_date", "relation_name": "dev_coco.claims_preprocessing.outpatient_surgery__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.375370Z", "completed_at": "2024-10-11T23:52:44.396428Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.398907Z", "completed_at": "2024-10-11T23:52:44.398913Z"}], "thread_id": "Thread-3", "execution_time": 0.03644108772277832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_substance_use__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\n , m.claim_line_number\n , u.old_encounter_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.outpatient_substance_use__generate_encounter_id u on m.patient_data_source_id = u.patient_data_source_id\nand\nm.start_date = u.start_date", "relation_name": "dev_coco.claims_preprocessing.outpatient_substance_use__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.387846Z", "completed_at": "2024-10-11T23:52:44.397402Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.399736Z", "completed_at": "2024-10-11T23:52:44.399740Z"}], "thread_id": "Thread-4", "execution_time": 0.03551626205444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.asc__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect\n    dat.old_encounter_id\n  , dat.encounter_start_date\n  , dat.encounter_end_date\n  , med.claim_id\n  , med.claim_line_number\n  , row_number() over (\n        partition by med.claim_id, med.claim_line_number\n        order by dat.old_encounter_id\n    ) as claim_attribution_number\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim as med\ninner join dev_coco.claims_preprocessing.asc__start_end_dates as dat\n  on med.patient_data_source_id = dat.patient_data_source_id\n  and med.start_date between dat.encounter_start_date and dat.encounter_end_date", "relation_name": "dev_coco.claims_preprocessing.asc__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.384062Z", "completed_at": "2024-10-11T23:52:44.398644Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.400337Z", "completed_at": "2024-10-11T23:52:44.400341Z"}], "thread_id": "Thread-5", "execution_time": 0.03644275665283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.urgent_care__match_claims_to_anchor", "compiled": true, "compiled_code": "\n\nselect distinct m.patient_data_source_id\n , m.start_date\n , m.claim_id\n , m.claim_line_number\n , u.old_encounter_id\nfrom dev_coco.claims_preprocessing.encounters__stg_medical_claim m\ninner join dev_coco.claims_preprocessing.urgent_care__generate_encounter_id u on m.patient_data_source_id = u.patient_data_source_id\nand\nm.start_date = u.start_date", "relation_name": "dev_coco.claims_preprocessing.urgent_care__match_claims_to_anchor"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.391748Z", "completed_at": "2024-10-11T23:52:44.399378Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.400887Z", "completed_at": "2024-10-11T23:52:44.400892Z"}], "thread_id": "Thread-8", "execution_time": 0.03598594665527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.office_visits__int_office_visits_encounter_ranking", "compiled": true, "compiled_code": "\n\nwith rank_cte as (\nselect *\nfrom  dev_coco.claims_preprocessing.office_visits__int_office_visits_union\n)\n\n,dist_encounter as (\nselect distinct old_encounter_id\n,encounter_type\n,priority_number\nfrom rank_cte\n)\n\nselect \nold_encounter_id\n,encounter_type\n,priority_number\n,row_number() over (partition by old_encounter_id order by priority_number) as relative_rank\nfrom dist_encounter", "relation_name": "dev_coco.claims_preprocessing.office_visits__int_office_visits_encounter_ranking"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.402403Z", "completed_at": "2024-10-11T23:52:44.406171Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.406438Z", "completed_at": "2024-10-11T23:52:44.406444Z"}], "thread_id": "Thread-6", "execution_time": 0.004647016525268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.office_visits__int_office_visits_claim_line", "compiled": true, "compiled_code": "\n\nwith rank_cte as (\nselect *\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits_union\n)\n\n,crosswalk_cte as (\nselect old_encounter_id\n,encounter_type\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits_encounter_ranking\nwhere relative_rank = 1\n)\n\nselect r.claim_id\n, r.claim_line_number\n, r.old_encounter_id\n, x.encounter_type\nfrom rank_cte r\ninner join crosswalk_cte x on r.old_encounter_id = x.old_encounter_id", "relation_name": "dev_coco.claims_preprocessing.office_visits__int_office_visits_claim_line"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.407797Z", "completed_at": "2024-10-11T23:52:44.419142Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.419414Z", "completed_at": "2024-10-11T23:52:44.419421Z"}], "thread_id": "Thread-2", "execution_time": 0.012230157852172852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.encounters__combined_claim_line_crosswalk", "compiled": true, "compiled_code": "\n\nwith cte as \n(\nselect claim_id\n ,claim_line_number\n ,encounter_id\n ,'acute inpatient' as encounter_type\n ,'inpatient' as encounter_group\n ,0 as priority_number\nfrom dev_coco.claims_preprocessing.acute_inpatient__prof_claims\nwhere claim_attribution_number = 1\n\nunion all\n\nselect enc.claim_id\n,med.claim_line_number\n,enc.encounter_id\n,'acute inpatient' as encounter_type\n,'inpatient' as encounter_group\n,0 as priority_number\nfrom dev_coco.claims_preprocessing.acute_inpatient__generate_encounter_id enc\ninner join dev_coco.claims_preprocessing.encounters__stg_medical_claim med on enc.claim_id = med.claim_id\n\nunion all\n\nselect claim_id\n ,claim_line_number\n ,encounter_id\n ,'emergency department' as encounter_type\n ,'outpatient' as encounter_group\n ,1 as priority_number\nfrom dev_coco.claims_preprocessing.acute_inpatient__prof_claims\nwhere claim_attribution_number = 1\n\nunion all\n\nselect enc.claim_id\n,med.claim_line_number\n,enc.encounter_id\n,'emergency department' as encounter_type\n,'outpatient' as encounter_group\n,1 as priority_number\nfrom dev_coco.claims_preprocessing.emergency_department__generate_encounter_id enc\ninner join dev_coco.claims_preprocessing.encounters__stg_medical_claim med on enc.claim_id = med.claim_id\n\nunion all\n\nselect claim_id\n ,claim_line_number\n ,encounter_id\n ,'emergency department' as encounter_type\n ,'outpatient' as encounter_group\n ,1 as priority_number\nfrom dev_coco.claims_preprocessing.emergency_department__prof_claims\nwhere claim_attribution_number = 1\n\nunion all\n\nselect enc.claim_id\n,med.claim_line_number\n,enc.encounter_id\n,'inpatient hospice' as encounter_type\n,'inpatient' as encounter_group\n,1 as priority_number\nfrom dev_coco.claims_preprocessing.inpatient_hospice__generate_encounter_id enc\ninner join dev_coco.claims_preprocessing.encounters__stg_medical_claim med on enc.claim_id = med.claim_id\n\nunion all\n\nselect claim_id\n,claim_line_number\n,encounter_id\n,'inpatient psych' as encounter_type\n,'inpatient' as encounter_group\n,2 as priority_number\nfrom dev_coco.claims_preprocessing.inpatient_psych__prof_claims\nwhere claim_attribution_number = 1\n\nunion all\n\nselect enc.claim_id\n,med.claim_line_number\n,enc.encounter_id\n,'inpatient psych' as encounter_type\n,'inpatient' as encounter_group\n,2 as priority_number\nfrom dev_coco.claims_preprocessing.inpatient_psych__generate_encounter_id enc\ninner join dev_coco.claims_preprocessing.encounters__stg_medical_claim med on enc.claim_id = med.claim_id\n\nunion all\n\nselect claim_id\n,claim_line_number\n,encounter_id\n,'inpatient rehabilitation' as encounter_type\n,'inpatient' as encounter_group\n,3 as priority_number\nfrom dev_coco.claims_preprocessing.inpatient_rehab__prof_claims\nwhere claim_attribution_number = 1\n\nunion all \n\nselect enc.claim_id\n,med.claim_line_number\n,enc.encounter_id\n,'inpatient rehabilitation' as encounter_type\n,'inpatient' as encounter_group\n,3 as priority_number\nfrom dev_coco.claims_preprocessing.inpatient_rehab__generate_encounter_id enc\ninner join dev_coco.claims_preprocessing.encounters__stg_medical_claim med on enc.claim_id = med.claim_id\n\nunion all\n\nselect claim_id\n,claim_line_number\n,encounter_id\n,'inpatient skilled nursing' as encounter_type\n,'inpatient' as encounter_group\n,4 as priority_number\nfrom dev_coco.claims_preprocessing.inpatient_snf__prof_claims\nwhere claim_attribution_number = 1\n\nunion all \n\nselect enc.claim_id\n,med.claim_line_number\n,enc.encounter_id\n,'inpatient skilled nursing' as encounter_type\n,'inpatient' as encounter_group\n,4 as priority_number\nfrom dev_coco.claims_preprocessing.inpatient_snf__generate_encounter_id enc\ninner join dev_coco.claims_preprocessing.encounters__stg_medical_claim med on enc.claim_id = med.claim_id\n\nunion all\n\nselect claim_id\n,claim_line_number\n,encounter_id\n,'inpatient substance use' as encounter_type\n,'inpatient' as encounter_group\n,5 as priority_number\nfrom dev_coco.claims_preprocessing.inpatient_substance_use__prof_claims\nwhere claim_attribution_number = 1\n\nunion all \n\nselect enc.claim_id\n,med.claim_line_number\n,enc.encounter_id\n,'inpatient substance use' as encounter_type\n,'inpatient' as encounter_group\n,5 as priority_number\nfrom dev_coco.claims_preprocessing.inpatient_substance_use__generate_encounter_id enc\ninner join dev_coco.claims_preprocessing.encounters__stg_medical_claim med on enc.claim_id = med.claim_id\n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,encounter_type\n,'office based' as encounter_group\n,9 as priority_number --priority set in combined office visit encounter ranking model\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits_claim_line\nwhere encounter_type = 'office visit radiology'\n\n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,encounter_type\n,'office based' as encounter_group\n,10 as priority_number --priority set in combined office visit encounter ranking model\nfrom dev_coco.claims_preprocessing.office_visits__int_office_visits_claim_line\nwhere encounter_type <> 'office visit radiology'\n\n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'urgent care' as encounter_type\n,'outpatient' as encounter_group\n,11 as priority_number --urgent care needs to be lower than ed and inpatient\nfrom dev_coco.claims_preprocessing.urgent_care__match_claims_to_anchor\n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'outpatient psych' as encounter_type\n,'outpatient' as encounter_group\n,12 as priority_number \nfrom dev_coco.claims_preprocessing.outpatient_psych__match_claims_to_anchor\n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'outpatient rehabilitation' as encounter_type\n,'outpatient' as encounter_group\n,13 as priority_number \nfrom dev_coco.claims_preprocessing.outpatient_rehab__match_claims_to_anchor\n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'ambulatory surgery center' as encounter_type\n,'outpatient' as encounter_group\n,14 as priority_number \nfrom dev_coco.claims_preprocessing.asc__match_claims_to_anchor\n\nunion all\n\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'outpatient hospital or clinic' as encounter_type\n,'outpatient' as encounter_group\n,999 as priority_number \nfrom dev_coco.claims_preprocessing.outpatient_hospital_or_clinic__match_claims_to_anchor --lowest outpatient priority, roll up to more specific encounter type when available\n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'outpatient surgery' as encounter_type\n,'outpatient' as encounter_group\n,18 as priority_number \nfrom dev_coco.claims_preprocessing.outpatient_surgery__match_claims_to_anchor \n\n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'dialysis' as encounter_type\n,'outpatient' as encounter_group\n,15 as priority_number \nfrom dev_coco.claims_preprocessing.dialysis__match_claims_to_anchor \n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'outpatient hospice' as encounter_type\n,'outpatient' as encounter_group\n,16 as priority_number \nfrom dev_coco.claims_preprocessing.outpatient_hospice__match_claims_to_anchor \n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'home health' as encounter_type\n,'outpatient' as encounter_group\n,17 as priority_number \nfrom dev_coco.claims_preprocessing.home_health__match_claims_to_anchor \n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'outpatient injections' as encounter_type\n,'outpatient' as encounter_group\n,19 as priority_number \nfrom dev_coco.claims_preprocessing.outpatient_injections__match_claims_to_anchor\n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'outpatient pt/ot/st' as encounter_type\n,'outpatient' as encounter_group\n,20 as priority_number \nfrom dev_coco.claims_preprocessing.outpatient_ptotst__match_claims_to_anchor \n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'outpatient substance use' as encounter_type\n,'outpatient' as encounter_group\n,21 as priority_number \nfrom dev_coco.claims_preprocessing.outpatient_substance_use__match_claims_to_anchor \n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'outpatient radiology' as encounter_type\n,'outpatient' as encounter_group\n,22 as priority_number \nfrom dev_coco.claims_preprocessing.outpatient_radiology__match_claims_to_anchor \n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'lab - orphaned' as encounter_type\n,'other' as encounter_group\n,1000000 as priority_number \nfrom dev_coco.claims_preprocessing.lab__match_claims_to_anchor \n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'dme - orphaned' as encounter_type\n,'other' as encounter_group\n,1000001 as priority_number \nfrom dev_coco.claims_preprocessing.dme__match_claims_to_anchor \n\nunion all\n\nselect claim_id\n,claim_line_number\n,old_encounter_id\n,'ambulance - orphaned' as encounter_type\n,'other' as encounter_group\n,1000002 as priority_number \nfrom dev_coco.claims_preprocessing.ambulance__match_claims_to_anchor \n\n)\n\n\nselect \n  claim_id\n, claim_line_number\n, encounter_id as old_encounter_id\n, dense_rank() over (order by encounter_type, encounter_id) as encounter_id\n, encounter_type\n, encounter_group\n, priority_number\n, row_number() over (partition by claim_id , claim_line_number order by priority_number) as claim_line_attribution_number\nfrom cte", "relation_name": "dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.424758Z", "completed_at": "2024-10-11T23:52:44.452957Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.508299Z", "completed_at": "2024-10-11T23:52:44.508309Z"}], "thread_id": "Thread-9", "execution_time": 0.08748435974121094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__encounter_grain", "compiled": true, "compiled_code": "\n\nwith detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n    ,ed.encounter_start_date\n    ,ed.encounter_end_date\n      ,cli.encounter_type\n    ,cli.encounter_group\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  --replace this ref with the deduped version when complete\n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'acute inpatient'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join dev_coco.claims_preprocessing.acute_inpatient__start_end_dates ed on cli.old_encounter_id = ed.encounter_id\n)\n\n,encounter_cross_walk as (\n  select distinct encounter_id\n  ,old_encounter_id\n  from detail_values\n)\n\n,first_last_inst_inst_values as (\nselect *\n,row_number() over (partition by encounter_id order by start_date, claim_id) as first_num\n,row_number() over (partition by encounter_id order by end_date desc, claim_id) as last_num\nfrom detail_values\nwhere claim_type = 'institutional'\n)\n\n, institutional_claim_details as (\n    select distinct\n        d.encounter_id\n        , f.diagnosis_code_1\n        , f.diagnosis_code_type\n        , f.facility_id as facility_id\n        , f.ms_drg_code as ms_drg_code\n        , f.apr_drg_code as apr_drg_code\n        , f.admit_source_code as admit_source_code\n        , f.admit_type_code as admit_type_code\n        , l.discharge_disposition_code as discharge_disposition_code\n        , d.patient_data_source_id\n        , d.data_source\n    from detail_values d\n    inner join first_last_inst_inst_values f on d.encounter_id = f.encounter_id\n    and\n    f.first_num =1 \n    inner join first_last_inst_inst_values l on d.encounter_id = l.encounter_id\n    and\n    l.last_num = 1 \n)\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when d.service_category_3 in ( 'l/d - cesarean delivery', 'l/d - vaginal delivery') then 1 else 0 end ) as delivery_flag\n       ,max(case when d.service_category_3 ='l/d - cesarean delivery' then 1 else 0 end ) as cesarean_delivery\n       ,max(case when d.service_category_3 ='l/d - vaginal delivery' then 1 else 0 end ) as vaginal_delivery\n       ,max(case when d.service_category_3 in ('l/d - newborn','l/d - newborn nicu') then 1 else 0 end ) as newborn_flag\n       ,max(case when d.service_category_3 ='l/d - newborn nicu' then 1 else 0 end ) as nicu_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'emergency department' then 1 else 0 end) as ed_flag\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type -- not changing grain, but bringing into final\n,encounter_group\n)\n\n\n\nselect\n  x.encounter_id\n, a.encounter_start_date\n, a.encounter_end_date\n, c.patient_data_source_id\n, tot.encounter_type\n, tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        encounter_end_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, c.diagnosis_code_type as primary_diagnosis_code_type\n, c.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, c.facility_id as facility_id\n, sc.observation_flag\n, sc.ed_flag\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.delivery_flag\n, case when sc.cesarean_delivery = 1 then 'cesarean'\n       when sc.vaginal_delivery = 1 then 'vaginal'\n       else null end as delivery_type\n, sc.newborn_flag\n, sc.nicu_flag\n, c.ms_drg_code\n, j.ms_drg_description\n, j.medical_surgical\n, c.apr_drg_code\n, k.apr_drg_description\n, c.admit_source_code\n, h.admit_source_description\n, c.admit_type_code\n, i.admit_type_description\n, c.discharge_disposition_code\n, g.discharge_disposition_description\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, datediff(\n        day,\n        a.encounter_start_date,\n        a.encounter_end_date\n        ) as length_of_stay\n, case\n    when c.discharge_disposition_code = '20' then 1\n    else 0\n  end mortality_flag\n, c.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing.acute_inpatient__start_end_dates a\ninner join encounter_cross_walk x on a.encounter_id = x.old_encounter_id\ninner join total_amounts tot on x.encounter_id = tot.encounter_id\ninner join service_category_flags sc on x.encounter_id = sc.encounter_id\nleft join institutional_claim_details c\n  on x.encounter_id = c.encounter_id\nleft join patient e\n  on c.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on c.facility_id = b.npi\nleft join dev_coco.terminology.discharge_disposition g\n  on c.discharge_disposition_code = g.discharge_disposition_code\nleft join dev_coco.terminology.admit_source h\n  on c.admit_source_code = h.admit_source_code\nleft join dev_coco.terminology.admit_type i\n  on c.admit_type_code = i.admit_type_code\nleft join dev_coco.terminology.ms_drg j\n  on c.ms_drg_code = j.ms_drg_code\nleft join dev_coco.terminology.apr_drg k\n  on c.apr_drg_code = k.apr_drg_code\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on c.diagnosis_code_1 = icd10cm.icd_10_cm\n  and c.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on c.diagnosis_code_1 = icd9cm.icd_9_cm\n  and c.diagnosis_code_type = 'icd-9-cm'", "relation_name": "dev_coco.claims_preprocessing.acute_inpatient__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.433606Z", "completed_at": "2024-10-11T23:52:44.485205Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.510405Z", "completed_at": "2024-10-11T23:52:44.510411Z"}], "thread_id": "Thread-3", "execution_time": 0.08878302574157715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ambulance__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  from dev_coco.claims_preprocessing.ambulance__generate_encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'ambulance - orphaned'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n, encounter_type -- not changing grain, but bringing into final\n, encounter_group\n\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n,highest_paid_pos as \n(\n  select encounter_id\n  , place_of_service_code\n  , place_of_service_description\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where place_of_service_code is not null\n  group by \n   encounter_id\n  , place_of_service_code\n  , place_of_service_description\n)\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'outpatient pharmacy' then 1 \n                when scr.service_category_2 = 'office-based pharmacy' then 1 else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag, pos.place_of_service_code\n, pos.place_of_service_description\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join highest_paid_pos pos on d.encounter_id = pos.encounter_id\nand\npos.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.ambulance__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.440544Z", "completed_at": "2024-10-11T23:52:44.510108Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.513574Z", "completed_at": "2024-10-11T23:52:44.513579Z"}], "thread_id": "Thread-4", "execution_time": 0.09045600891113281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.asc__encounter_grain", "compiled": true, "compiled_code": "\n\n\n\nwith detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,ed.encounter_start_date \n    ,ed.encounter_end_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'ambulatory surgery center'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join dev_coco.claims_preprocessing.asc__start_end_dates ed on cli.old_encounter_id = ed.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n,highest_paid_hcpc as \n(\n  select encounter_id\n  , hcpcs_code\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where hcpcs_code is not null\n  group by \n   encounter_id\n  , hcpcs_code\n)\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'outpatient pharmacy' then 1 \n                when scr.service_category_2 = 'office-based pharmacy' then 1 else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.encounter_end_date\n, d.patient_data_source_id\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, datediff(\n        day,\n        d.encounter_start_date,\n        d.encounter_end_date\n        ) as length_of_stay\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, hcpc.hcpcs_code\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join highest_paid_hcpc hcpc on d.encounter_id = hcpc.encounter_id\nand\nhcpc.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.asc__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.463235Z", "completed_at": "2024-10-11T23:52:44.511256Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.514336Z", "completed_at": "2024-10-11T23:52:44.514341Z"}], "thread_id": "Thread-8", "execution_time": 0.09019303321838379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_procedure", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the procedure table in core.\n-- *************************************************\n\nwith unpivot_cte as (\n\nselect\n    claim_id as claim_id\n  , claim_line_number as procedure_sequence_id\n  , patient_id as patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as procedure_date\n  , 'hcpcs' as source_code_type\n  , hcpcs_code as source_code\n  , rendering_id as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere hcpcs_code is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 1 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_1 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_1 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_1 is not null\n    \n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 2 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_2 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_2 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_2 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 3 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_3 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_3 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_3 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 4 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_4 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_4 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_4 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 5 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_5 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_5 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_5 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 6 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_6 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_6 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_6 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 7 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_7 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_7 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_7 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 8 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_8 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_8 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_8 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 9 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_9 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_9 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_9 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 10 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_10 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_10 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_10 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 11 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_11 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_11 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_11 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 12 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_12 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_12 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_12 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 13 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_13 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_13 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_13 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 14 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_14 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_14 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_14 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 15 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_15 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_15 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_15 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 16 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_16 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_16 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_16 is not null\n    \n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 17 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_17 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_17 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_17 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 18 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_18 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_18 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_18 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 19 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_19 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_19 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_19 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 20 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_20 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_20 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_20 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 21 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_21 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_21 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_21 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 22 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_22 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_22 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_22 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 23 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_23 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_23 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_23 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 24 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_24 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_24 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_24 is not null\n\n\nunion distinct\n\n\nselect\n    claim_id as claim_id\n  , 25 as procedure_sequence_id\n  , patient_id as patient_id\n  , procedure_date_25 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_25 as source_code\n  , rendering_id as practitioner_npi\n  , null as modifier_1\n  , null as modifier_2\n  , null as modifier_3\n  , null as modifier_4\n  , null as modifier_5\n  , data_source as data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_25 is not null\n\n)\n\nselect distinct\n\n    \n        try_cast(unpivot_cte.data_source || '_' || unpivot_cte.claim_id || '_' || unpivot_cte.procedure_sequence_id || '_' || unpivot_cte.source_code || case when unpivot_cte.modifier_1 is not null then CONCAT('_', unpivot_cte.modifier_1) else '' end || case when unpivot_cte.modifier_2 is not null then CONCAT('_', unpivot_cte.modifier_2) else '' end || case when unpivot_cte.modifier_3 is not null then CONCAT('_', unpivot_cte.modifier_3) else '' end || case when unpivot_cte.modifier_4 is not null then CONCAT('_', unpivot_cte.modifier_4) else '' end || case when unpivot_cte.modifier_5 is not null then CONCAT('_', unpivot_cte.modifier_5) else '' end || case when unpivot_cte.practitioner_npi is not null then CONCAT('_', unpivot_cte.practitioner_npi) else '' end as TEXT)\n     as procedure_id\n    , cast(unpivot_cte.patient_id as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_id --one claim can be on multiple encounters, so nulling out for now\n    , cast(unpivot_cte.claim_id as TEXT ) as claim_id\n    , try_cast( unpivot_cte.procedure_date as date ) as procedure_date\n    , cast(unpivot_cte.source_code_type as TEXT ) as source_code_type\n    , cast(unpivot_cte.source_code as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(\n        case\n        when icd.icd_10_pcs is not null then 'icd-10-pcs'\n        when hcpcs.hcpcs is not null then 'hcpcs'\n        end\n      as TEXT ) as normalized_code_type\n    , cast (\n        coalesce (\n            icd.icd_10_pcs\n          , hcpcs.hcpcs\n        )\n      as TEXT ) as normalized_code\n    , cast (\n        coalesce (\n            icd.description\n          , hcpcs.short_description\n        )\n      as TEXT ) as normalized_description\n    , cast(unpivot_cte.modifier_1 as TEXT ) as modifier_1\n    , cast(unpivot_cte.modifier_2 as TEXT ) as modifier_2\n    , cast(unpivot_cte.modifier_3 as TEXT ) as modifier_3\n    , cast(unpivot_cte.modifier_4 as TEXT ) as modifier_4\n    , cast(unpivot_cte.modifier_5 as TEXT ) as modifier_5\n    , cast(unpivot_cte.practitioner_npi as TEXT ) as practitioner_id\n    , cast(unpivot_cte.data_source as TEXT ) as data_source\n    , cast('2024-10-11 23:52:28.343846+00:00' as timestamp ) as tuva_last_run\nfrom unpivot_cte\n--inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk x on unpivot_cte.claim_id = x.claim_id\n--and\n--unpivot_cte.claim_line_number = x.claim_line_number\n--and\n--x.claim_line_attribution_number = 1\nleft join dev_coco.terminology.icd_10_pcs as icd\n    on unpivot_cte.source_code = icd.icd_10_pcs\nleft join dev_coco.terminology.hcpcs_level_2 as hcpcs\n    on unpivot_cte.source_code = hcpcs.hcpcs", "relation_name": "dev_coco.core._stg_claims_procedure"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.446978Z", "completed_at": "2024-10-11T23:52:44.511512Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.514795Z", "completed_at": "2024-10-11T23:52:44.514799Z"}], "thread_id": "Thread-5", "execution_time": 0.09115123748779297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_condition", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the condition table in core.\n-- *************************************************\n\nwith unpivot_cte as (\n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_1 as source_code\n  , 1 as diagnosis_rank\n  , diagnosis_poa_1 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim \nwhere diagnosis_code_1 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n\t       , discharge_date\n\t       , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_2 as source_code\n  , 2 as diagnosis_rank\n  , diagnosis_poa_2 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_2 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_3 as source_code\n  , 3 as diagnosis_rank\n  , diagnosis_poa_3 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_3 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_4 as source_code\n  , 4 as diagnosis_rank\n  , diagnosis_poa_4 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_4 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_5 as source_code\n  , 5 as diagnosis_rank\n  , diagnosis_poa_5 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_5 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_6 as source_code\n  , 6 as diagnosis_rank\n  , diagnosis_poa_6 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_6 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_7 as source_code\n  , 7 as diagnosis_rank\n  , diagnosis_poa_7 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_7 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_8 as source_code\n  , 8 as diagnosis_rank\n  , diagnosis_poa_8 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_8 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_9 as source_code\n  , 9 as diagnosis_rank\n  , diagnosis_poa_9 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_9 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_10 as source_code\n  , 10 as diagnosis_rank\n  , diagnosis_poa_10 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_10 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_11 as source_code\n  , 11 as diagnosis_rank\n  , diagnosis_poa_11 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_11 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_12 as source_code\n  , 12 as diagnosis_rank\n  , diagnosis_poa_12 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_12 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_13 as source_code\n  , 13 as diagnosis_rank\n  , diagnosis_poa_13 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_13 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_14 as source_code\n  , 14 as diagnosis_rank\n  , diagnosis_poa_14 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_14 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_15 as source_code\n  , 15 as diagnosis_rank\n  , diagnosis_poa_15 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_15 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_16 as source_code\n  , 16 as diagnosis_rank\n  , diagnosis_poa_16 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_16 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_17 as source_code\n  , 17 as diagnosis_rank\n  , diagnosis_poa_17 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_17 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_18 as source_code\n  , 18 as diagnosis_rank\n  , diagnosis_poa_18 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_18 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_19 as source_code\n  , 19 as diagnosis_rank\n  , diagnosis_poa_19 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_19 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_20 as source_code\n  , 20 as diagnosis_rank\n  , diagnosis_poa_20 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_20 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_21 as source_code\n  , 21 as diagnosis_rank\n  , diagnosis_poa_21 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_21 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_22 as source_code\n  , 22 as diagnosis_rank\n  , diagnosis_poa_22 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_22 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_23 as source_code\n  , 23 as diagnosis_rank\n  , diagnosis_poa_23 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_23 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_24 as source_code\n  , 24 as diagnosis_rank\n  , diagnosis_poa_24 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_24 is not null\n\nunion all \n\nselect\n    claim_id\n  , claim_line_number\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , discharge_date\n           , claim_end_date\n    ) as recorded_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_25 as source_code\n  , 25 as diagnosis_rank\n  , diagnosis_poa_25 as present_on_admit_code\n  , data_source\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_25 is not null\n\n)\n\nselect distinct\n\n    \n        try_cast(CAST(unpivot_cte.data_source AS TEXT) || '_' || CAST(unpivot_cte.claim_id AS TEXT) || '_' || CAST(unpivot_cte.diagnosis_rank AS TEXT) || '_' || CAST(unpivot_cte.source_code AS TEXT) as TEXT)\n     as condition_id\n\n    , cast(unpivot_cte.patient_id as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_id --one claim can be on multiple encounters, so nulling out for now\n    , cast(unpivot_cte.claim_id as TEXT ) as claim_id\n    , try_cast( unpivot_cte.recorded_date as date ) as recorded_date\n    , try_cast( null as date ) as onset_date\n    , try_cast( null as date ) as resolved_date\n    , cast('active' as TEXT ) as status\n    , cast(unpivot_cte.condition_type as TEXT ) as condition_type\n    , cast(unpivot_cte.source_code_type as TEXT ) as source_code_type\n    , cast(unpivot_cte.source_code as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(\n        case\n        when icd.icd_10_cm is not null then 'icd-10-cm'\n        end as TEXT\n      ) as normalized_code_type\n    , cast(icd.icd_10_cm as TEXT ) as normalized_code\n    , cast(icd.long_description as TEXT ) as normalized_description\n    , cast(unpivot_cte.diagnosis_rank as integer ) as condition_rank\n    , cast(unpivot_cte.present_on_admit_code as TEXT ) as present_on_admit_code\n    , cast(poa.present_on_admit_description as TEXT ) as present_on_admit_description\n    , cast(unpivot_cte.data_source as TEXT ) as data_source\n    , cast('2024-10-11 23:52:28.343846+00:00' as timestamp ) as tuva_last_run\nfrom unpivot_cte\n--inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk x on unpivot_cte.claim_id = x.claim_id\n--and\n--unpivot_cte.claim_line_number = x.claim_line_number\n--and\n--x.claim_line_attribution_number = 1\nleft join dev_coco.terminology.icd_10_cm icd\n    on unpivot_cte.source_code = icd.icd_10_cm\nleft join dev_coco.terminology.present_on_admission as poa\n    on unpivot_cte.present_on_admit_code = poa.present_on_admit_code", "relation_name": "dev_coco.core._stg_claims_condition"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.485491Z", "completed_at": "2024-10-11T23:52:44.511949Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.515232Z", "completed_at": "2024-10-11T23:52:44.515236Z"}], "thread_id": "Thread-10", "execution_time": 0.09081506729125977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.dialysis__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  from dev_coco.claims_preprocessing.dialysis__generate_encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'dialysis'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'outpatient pharmacy' then 1 \n                when scr.service_category_2 = 'office-based pharmacy' then 1 else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.dialysis__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.491386Z", "completed_at": "2024-10-11T23:52:44.512204Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.515677Z", "completed_at": "2024-10-11T23:52:44.515681Z"}], "thread_id": "Thread-6", "execution_time": 0.08572793006896973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.dme__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  from dev_coco.claims_preprocessing.dme__generate_encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'dme - orphaned'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n,highest_paid_pos as \n(\n  select encounter_id\n  , place_of_service_code\n  , place_of_service_description\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where place_of_service_code is not null\n  group by \n   encounter_id\n  , place_of_service_code\n  , place_of_service_description\n)\n\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'outpatient pharmacy' then 1 \n                when scr.service_category_2 = 'office-based pharmacy' then 1 else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, pos.place_of_service_code\n, pos.place_of_service_description\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join highest_paid_pos pos on d.encounter_id = pos.encounter_id\nand\npos.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.dme__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.497074Z", "completed_at": "2024-10-11T23:52:44.512719Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.516388Z", "completed_at": "2024-10-11T23:52:44.516393Z"}], "thread_id": "Thread-7", "execution_time": 0.08389616012573242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.emergency_department__encounter_grain", "compiled": true, "compiled_code": "\n\nwith detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n    ,ed.encounter_start_date\n    ,ed.encounter_end_date\n      ,cli.encounter_type\n    ,cli.encounter_group\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  --replace this ref with the deduped version when complete\n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'emergency department'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join dev_coco.claims_preprocessing.emergency_department__start_end_dates ed on cli.old_encounter_id = ed.encounter_id\n)\n\n,encounter_cross_walk as (\n  select distinct encounter_id\n  ,old_encounter_id\n  from detail_values\n)\n\n,first_last_inst_inst_values as (\nselect *\n,row_number() over (partition by encounter_id order by start_date, claim_id) as first_num\n,row_number() over (partition by encounter_id order by end_date desc, claim_id) as last_num\nfrom detail_values\nwhere claim_type = 'institutional'\n)\n\n,encounter_header_values as (\n  select distinct patient_data_source_id\n  ,data_source\n  ,encounter_id\n  from detail_values\n)\n\n, institutional_claim_details as (\n    select distinct\n        d.encounter_id\n        , f.diagnosis_code_1\n        , f.diagnosis_code_type\n        , f.facility_id as facility_id\n        , f.ms_drg_code as ms_drg_code\n        , f.apr_drg_code as apr_drg_code\n        , f.admit_source_code as admit_source_code\n        , f.admit_type_code as admit_type_code\n        , l.discharge_disposition_code as discharge_disposition_code\n        , d.patient_data_source_id\n        , d.data_source\n    from detail_values d\n    inner join first_last_inst_inst_values f on d.encounter_id = f.encounter_id\n    and\n    f.first_num =1 \n    inner join first_last_inst_inst_values l on d.encounter_id = l.encounter_id\n    and\n    l.last_num = 1 \n\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    ,encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type -- not changing grain, but bringing into final\n, encounter_group\n)\n\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\nselect\n  x.encounter_id\n, a.encounter_start_date\n, a.encounter_end_date\n, ehv.patient_data_source_id\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        a.encounter_end_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, c.diagnosis_code_type as primary_diagnosis_code_type\n, c.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, sc.observation_flag\n, c.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, c.ms_drg_code\n, j.ms_drg_description\n, j.medical_surgical\n, c.apr_drg_code\n, k.apr_drg_description\n, c.admit_source_code\n, h.admit_source_description\n, c.admit_type_code\n, i.admit_type_description\n, c.discharge_disposition_code\n, g.discharge_disposition_description\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, datediff(\n        day,\n        a.encounter_start_date,\n        a.encounter_end_date\n        ) as length_of_stay\n, case\n    when c.discharge_disposition_code = '20' then 1\n    else 0\n  end mortality_flag\n, ehv.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing.emergency_department__start_end_dates a\ninner join encounter_cross_walk x on a.encounter_id = x.old_encounter_id\ninner join total_amounts tot on x.encounter_id = tot.encounter_id\ninner join service_category_flags sc on x.encounter_id = sc.encounter_id\ninner join encounter_header_values ehv on x.encounter_id = ehv.encounter_id\nleft join institutional_claim_details c\n  on x.encounter_id = c.encounter_id\nleft join patient e\n  on c.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on c.facility_id = b.npi\nleft join dev_coco.terminology.discharge_disposition g\n  on c.discharge_disposition_code = g.discharge_disposition_code\nleft join dev_coco.terminology.admit_source h\n  on c.admit_source_code = h.admit_source_code\nleft join dev_coco.terminology.admit_type i\n  on c.admit_type_code = i.admit_type_code\nleft join dev_coco.terminology.ms_drg j\n  on c.ms_drg_code = j.ms_drg_code\nleft join dev_coco.terminology.apr_drg k\n  on c.apr_drg_code = k.apr_drg_code\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on c.diagnosis_code_1 = icd10cm.icd_10_cm\n  and c.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on c.diagnosis_code_1 = icd9cm.icd_9_cm\n  and c.diagnosis_code_type = 'icd-9-cm'", "relation_name": "dev_coco.claims_preprocessing.emergency_department__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.504818Z", "completed_at": "2024-10-11T23:52:44.513343Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.516903Z", "completed_at": "2024-10-11T23:52:44.516908Z"}], "thread_id": "Thread-2", "execution_time": 0.08387398719787598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.encounters__orphaned_claims", "compiled": true, "compiled_code": "\n\nwith cte as (\n  select stg.claim_id\n  ,stg.claim_line_number\n  ,stg.service_category_1\n  ,stg.service_category_2\n  ,stg.service_category_3\n  ,stg.claim_type\n  ,stg.claim_start_date\n  ,stg.claim_end_date\n  ,stg.start_date\n  ,stg.end_date\n  ,stg.patient_data_source_id\n  from dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n  left join  dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk enc on stg.claim_id = enc.claim_id\n  and\n  stg.claim_line_number = enc.claim_line_number\n  where enc.claim_id is null -- missing from encounter mapping table\n)\n\n,max_encounter as (\n  select max(encounter_id) max_encounter_id\n  from dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk\n)\n\nselect \n  claim_id\n, claim_line_number\n, dense_rank() over (order by patient_data_source_id, claim_id) + max_encounter.max_encounter_id as encounter_id\n, 'orphaned claim' as encounter_type\n, 'other' as encounter_group\nfrom cte\ncross join max_encounter", "relation_name": "dev_coco.claims_preprocessing.encounters__orphaned_claims"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.523013Z", "completed_at": "2024-10-11T23:52:44.545393Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.588725Z", "completed_at": "2024-10-11T23:52:44.588734Z"}], "thread_id": "Thread-9", "execution_time": 0.07271814346313477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.home_health__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  from dev_coco.claims_preprocessing.home_health__generate_encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'home health'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'outpatient pharmacy' then 1 \n                when scr.service_category_2 = 'office-based pharmacy' then 1 else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.home_health__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.530234Z", "completed_at": "2024-10-11T23:52:44.567428Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.589574Z", "completed_at": "2024-10-11T23:52:44.589580Z"}], "thread_id": "Thread-3", "execution_time": 0.07149195671081543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_hospice__encounter_grain", "compiled": true, "compiled_code": "\n\nwith detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n    ,ed.encounter_start_date\n    ,ed.encounter_end_date\n      ,cli.encounter_type\n    ,cli.encounter_group\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  --replace this ref with the deduped version when complete\n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'inpatient hospice'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join dev_coco.claims_preprocessing.inpatient_hospice__start_end_dates ed on cli.old_encounter_id = ed.encounter_id\n)\n\n,encounter_cross_walk as (\n  select distinct encounter_id\n  ,old_encounter_id\n  from detail_values\n)\n\n,first_last_inst_inst_values as (\nselect *\n,row_number() over (partition by encounter_id order by start_date, claim_id) as first_num\n,row_number() over (partition by encounter_id order by end_date desc, claim_id) as last_num\nfrom detail_values\nwhere claim_type = 'institutional'\n)\n\n, institutional_claim_details as (\n    select distinct\n        d.encounter_id\n        , f.diagnosis_code_1\n        , f.diagnosis_code_type\n        , f.facility_id as facility_id\n        , f.ms_drg_code as ms_drg_code\n        , f.apr_drg_code as apr_drg_code\n        , f.admit_source_code as admit_source_code\n        , f.admit_type_code as admit_type_code\n        , l.discharge_disposition_code as discharge_disposition_code\n        , d.patient_data_source_id\n        , d.data_source\n    from detail_values d\n    inner join first_last_inst_inst_values f on d.encounter_id = f.encounter_id\n    and\n    f.first_num =1 \n    inner join first_last_inst_inst_values l on d.encounter_id = l.encounter_id\n    and\n    l.last_num = 1 \n\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    ,encounter_type\n    ,encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n, encounter_group\n\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'emergency department' then 1 else 0 end) as ed_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\nselect\n  x.encounter_id\n, a.encounter_start_date\n, a.encounter_end_date\n, c.patient_data_source_id\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        encounter_end_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, c.diagnosis_code_type as primary_diagnosis_code_type\n, c.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, c.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, sc.observation_flag\n, sc.ed_flag\n, c.ms_drg_code\n, j.ms_drg_description\n, j.medical_surgical\n, c.apr_drg_code\n, k.apr_drg_description\n, c.admit_source_code\n, h.admit_source_description\n, c.admit_type_code\n, i.admit_type_description\n, c.discharge_disposition_code\n, g.discharge_disposition_description\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, datediff(\n        day,\n        a.encounter_start_date,\n        a.encounter_end_date\n        ) as length_of_stay\n, case\n    when c.discharge_disposition_code = '20' then 1\n    else 0\n  end mortality_flag\n, c.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing.inpatient_hospice__start_end_dates a\ninner join encounter_cross_walk x on a.encounter_id = x.old_encounter_id\ninner join total_amounts tot on x.encounter_id = tot.encounter_id\ninner join service_category_flags sc on x.encounter_id = sc.encounter_id\nleft join institutional_claim_details c\n  on x.encounter_id = c.encounter_id\nleft join patient e\n  on c.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on c.facility_id = b.npi\nleft join dev_coco.terminology.discharge_disposition g\n  on c.discharge_disposition_code = g.discharge_disposition_code\nleft join dev_coco.terminology.admit_source h\n  on c.admit_source_code = h.admit_source_code\nleft join dev_coco.terminology.admit_type i\n  on c.admit_type_code = i.admit_type_code\nleft join dev_coco.terminology.ms_drg j\n  on c.ms_drg_code = j.ms_drg_code\nleft join dev_coco.terminology.apr_drg k\n  on c.apr_drg_code = k.apr_drg_code\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on c.diagnosis_code_1 = icd10cm.icd_10_cm\n  and c.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on c.diagnosis_code_1 = icd9cm.icd_9_cm\n  and c.diagnosis_code_type = 'icd-9-cm'", "relation_name": "dev_coco.claims_preprocessing.inpatient_hospice__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.546525Z", "completed_at": "2024-10-11T23:52:44.590198Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.592826Z", "completed_at": "2024-10-11T23:52:44.592831Z"}], "thread_id": "Thread-8", "execution_time": 0.07105803489685059, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_rehab__encounter_grain", "compiled": true, "compiled_code": "\n\nwith detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n    ,ed.encounter_start_date\n    ,ed.encounter_end_date\n      ,cli.encounter_type\n    ,cli.encounter_group\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  --replace this ref with the deduped version when complete\n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'inpatient rehabilitation'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join dev_coco.claims_preprocessing.inpatient_rehab__start_end_dates ed on cli.old_encounter_id = ed.encounter_id\n)\n\n,encounter_cross_walk as (\n  select distinct encounter_id\n  ,old_encounter_id\n  from detail_values\n)\n\n,first_last_inst_inst_values as (\nselect *\n,row_number() over (partition by encounter_id order by start_date, claim_id) as first_num\n,row_number() over (partition by encounter_id order by end_date desc, claim_id) as last_num\nfrom detail_values\nwhere claim_type = 'institutional'\n)\n\n, institutional_claim_details as (\n    select distinct\n        d.encounter_id\n        , f.diagnosis_code_1\n        , f.diagnosis_code_type\n        , f.facility_id as facility_id\n        , f.ms_drg_code as ms_drg_code\n        , f.apr_drg_code as apr_drg_code\n        , f.admit_source_code as admit_source_code\n        , f.admit_type_code as admit_type_code\n        , l.discharge_disposition_code as discharge_disposition_code\n        , d.patient_data_source_id\n        , d.data_source\n    from detail_values d\n    inner join first_last_inst_inst_values f on d.encounter_id = f.encounter_id\n    and\n    f.first_num =1 \n    inner join first_last_inst_inst_values l on d.encounter_id = l.encounter_id\n    and\n    l.last_num = 1 \n\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n, encounter_group\n    ,encounter_type\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type\n, encounter_group\n\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'emergency department' then 1 else 0 end) as ed_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\nselect\n  x.encounter_id\n, a.encounter_start_date\n, a.encounter_end_date\n, c.patient_data_source_id\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        encounter_end_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, c.diagnosis_code_type as primary_diagnosis_code_type\n, c.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, c.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, sc.observation_flag\n, sc.ed_flag\n, c.ms_drg_code\n, j.ms_drg_description\n, j.medical_surgical\n, c.apr_drg_code\n, k.apr_drg_description\n, c.admit_source_code\n, h.admit_source_description\n, c.admit_type_code\n, i.admit_type_description\n, c.discharge_disposition_code\n, g.discharge_disposition_description\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, datediff(\n        day,\n        a.encounter_start_date,\n        a.encounter_end_date\n        ) as length_of_stay\n, case\n    when c.discharge_disposition_code = '20' then 1\n    else 0\n  end mortality_flag\n, c.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing.inpatient_rehab__start_end_dates a\ninner join encounter_cross_walk x on a.encounter_id = x.old_encounter_id\ninner join total_amounts tot on x.encounter_id = tot.encounter_id\ninner join service_category_flags sc on x.encounter_id = sc.encounter_id\nleft join institutional_claim_details c\n  on x.encounter_id = c.encounter_id\nleft join patient e\n  on c.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on c.facility_id = b.npi\nleft join dev_coco.terminology.discharge_disposition g\n  on c.discharge_disposition_code = g.discharge_disposition_code\nleft join dev_coco.terminology.admit_source h\n  on c.admit_source_code = h.admit_source_code\nleft join dev_coco.terminology.admit_type i\n  on c.admit_type_code = i.admit_type_code\nleft join dev_coco.terminology.ms_drg j\n  on c.ms_drg_code = j.ms_drg_code\nleft join dev_coco.terminology.apr_drg k\n  on c.apr_drg_code = k.apr_drg_code\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on c.diagnosis_code_1 = icd10cm.icd_10_cm\n  and c.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on c.diagnosis_code_1 = icd9cm.icd_9_cm\n  and c.diagnosis_code_type = 'icd-9-cm'", "relation_name": "dev_coco.claims_preprocessing.inpatient_rehab__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.539101Z", "completed_at": "2024-10-11T23:52:44.590489Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.593319Z", "completed_at": "2024-10-11T23:52:44.593323Z"}], "thread_id": "Thread-4", "execution_time": 0.07243204116821289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_psych__encounter_grain", "compiled": true, "compiled_code": "\n\nwith detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n    ,ed.encounter_start_date\n    ,ed.encounter_end_date\n      ,cli.encounter_type\n    ,cli.encounter_group\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  --replace this ref with the deduped version when complete\n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'inpatient psych'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join dev_coco.claims_preprocessing.inpatient_psych__start_end_dates ed on cli.old_encounter_id = ed.encounter_id\n)\n\n,encounter_cross_walk as (\n  select distinct encounter_id\n  ,old_encounter_id\n  from detail_values\n)\n\n,first_last_inst_inst_values as (\nselect *\n,row_number() over (partition by encounter_id order by start_date, claim_id) as first_num\n,row_number() over (partition by encounter_id order by end_date desc, claim_id) as last_num\nfrom detail_values\nwhere claim_type = 'institutional'\n)\n\n, institutional_claim_details as (\n    select distinct\n        d.encounter_id\n        , f.diagnosis_code_1\n        , f.diagnosis_code_type\n        , f.facility_id as facility_id\n        , f.ms_drg_code as ms_drg_code\n        , f.apr_drg_code as apr_drg_code\n        , f.admit_source_code as admit_source_code\n        , f.admit_type_code as admit_type_code\n        , l.discharge_disposition_code as discharge_disposition_code\n        , d.patient_data_source_id\n        , d.data_source\n    from detail_values d\n    inner join first_last_inst_inst_values f on d.encounter_id = f.encounter_id\n    and\n    f.first_num =1 \n    inner join first_last_inst_inst_values l on d.encounter_id = l.encounter_id\n    and\n    l.last_num = 1 \n\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    ,encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type\n, encounter_group\n\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'emergency department' then 1 else 0 end) as ed_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\nselect\n  x.encounter_id\n, a.encounter_start_date\n, a.encounter_end_date\n, c.patient_data_source_id\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        encounter_end_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, c.diagnosis_code_type as primary_diagnosis_code_type\n, c.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, c.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, sc.observation_flag\n, sc.ed_flag\n, c.ms_drg_code\n, j.ms_drg_description\n, j.medical_surgical\n, c.apr_drg_code\n, k.apr_drg_description\n, c.admit_source_code\n, h.admit_source_description\n, c.admit_type_code\n, i.admit_type_description\n, c.discharge_disposition_code\n, g.discharge_disposition_description\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, datediff(\n        day,\n        a.encounter_start_date,\n        a.encounter_end_date\n        ) as length_of_stay\n, case\n    when c.discharge_disposition_code = '20' then 1\n    else 0\n  end mortality_flag\n, c.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing.inpatient_psych__start_end_dates a\ninner join encounter_cross_walk x on a.encounter_id = x.old_encounter_id\ninner join total_amounts tot on x.encounter_id = tot.encounter_id\ninner join service_category_flags sc on x.encounter_id = sc.encounter_id\nleft join institutional_claim_details c\n  on x.encounter_id = c.encounter_id\nleft join patient e\n  on c.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on c.facility_id = b.npi\nleft join dev_coco.terminology.discharge_disposition g\n  on c.discharge_disposition_code = g.discharge_disposition_code\nleft join dev_coco.terminology.admit_source h\n  on c.admit_source_code = h.admit_source_code\nleft join dev_coco.terminology.admit_type i\n  on c.admit_type_code = i.admit_type_code\nleft join dev_coco.terminology.ms_drg j\n  on c.ms_drg_code = j.ms_drg_code\nleft join dev_coco.terminology.apr_drg k\n  on c.apr_drg_code = k.apr_drg_code\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on c.diagnosis_code_1 = icd10cm.icd_10_cm\n  and c.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on c.diagnosis_code_1 = icd9cm.icd_9_cm\n  and c.diagnosis_code_type = 'icd-9-cm'", "relation_name": "dev_coco.claims_preprocessing.inpatient_psych__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.554906Z", "completed_at": "2024-10-11T23:52:44.590762Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.593771Z", "completed_at": "2024-10-11T23:52:44.593775Z"}], "thread_id": "Thread-5", "execution_time": 0.07167911529541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_snf__encounter_grain", "compiled": true, "compiled_code": "\n\nwith detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n    ,ed.encounter_start_date\n    ,ed.encounter_end_date\n      ,cli.encounter_type\n    ,cli.encounter_group\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  --replace this ref with the deduped version when complete\n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'inpatient skilled nursing'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join dev_coco.claims_preprocessing.inpatient_snf__start_end_dates ed on cli.old_encounter_id = ed.encounter_id\n)\n\n,encounter_cross_walk as (\n  select distinct encounter_id\n  ,old_encounter_id\n  from detail_values\n)\n\n,first_last_inst_inst_values as (\nselect *\n,row_number() over (partition by encounter_id order by start_date, claim_id) as first_num\n,row_number() over (partition by encounter_id order by end_date desc, claim_id) as last_num\nfrom detail_values\nwhere claim_type = 'institutional'\n)\n\n, institutional_claim_details as (\n    select distinct\n        d.encounter_id\n        , f.diagnosis_code_1\n        , f.diagnosis_code_type\n        , f.facility_id as facility_id\n        , f.ms_drg_code as ms_drg_code\n        , f.apr_drg_code as apr_drg_code\n        , f.admit_source_code as admit_source_code\n        , f.admit_type_code as admit_type_code\n        , l.discharge_disposition_code as discharge_disposition_code\n        , d.patient_data_source_id\n        , d.data_source\n    from detail_values d\n    inner join first_last_inst_inst_values f on d.encounter_id = f.encounter_id\n    and\n    f.first_num =1 \n    inner join first_last_inst_inst_values l on d.encounter_id = l.encounter_id\n    and\n    l.last_num = 1 \n\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    ,encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n, encounter_type\n, encounter_group\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'emergency department' then 1 else 0 end) as ed_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\nselect\n  x.encounter_id\n, a.encounter_start_date\n, a.encounter_end_date\n, c.patient_data_source_id\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        encounter_end_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, c.diagnosis_code_type as primary_diagnosis_code_type\n, c.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, c.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, sc.observation_flag\n, sc.ed_flag\n, c.ms_drg_code\n, j.ms_drg_description\n, j.medical_surgical\n, c.apr_drg_code\n, k.apr_drg_description\n, c.admit_source_code\n, h.admit_source_description\n, c.admit_type_code\n, i.admit_type_description\n, c.discharge_disposition_code\n, g.discharge_disposition_description\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, datediff(\n        day,\n        a.encounter_start_date,\n        a.encounter_end_date\n        ) as length_of_stay\n, case\n    when c.discharge_disposition_code = '20' then 1\n    else 0\n  end mortality_flag\n, c.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing.inpatient_snf__start_end_dates a\ninner join encounter_cross_walk x on a.encounter_id = x.old_encounter_id\ninner join total_amounts tot on x.encounter_id = tot.encounter_id\ninner join service_category_flags sc on x.encounter_id = sc.encounter_id\nleft join institutional_claim_details c\n  on x.encounter_id = c.encounter_id\nleft join patient e\n  on c.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on c.facility_id = b.npi\nleft join dev_coco.terminology.discharge_disposition g\n  on c.discharge_disposition_code = g.discharge_disposition_code\nleft join dev_coco.terminology.admit_source h\n  on c.admit_source_code = h.admit_source_code\nleft join dev_coco.terminology.admit_type i\n  on c.admit_type_code = i.admit_type_code\nleft join dev_coco.terminology.ms_drg j\n  on c.ms_drg_code = j.ms_drg_code\nleft join dev_coco.terminology.apr_drg k\n  on c.apr_drg_code = k.apr_drg_code\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on c.diagnosis_code_1 = icd10cm.icd_10_cm\n  and c.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on c.diagnosis_code_1 = icd9cm.icd_9_cm\n  and c.diagnosis_code_type = 'icd-9-cm'", "relation_name": "dev_coco.claims_preprocessing.inpatient_snf__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.561962Z", "completed_at": "2024-10-11T23:52:44.591017Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.594209Z", "completed_at": "2024-10-11T23:52:44.594212Z"}], "thread_id": "Thread-10", "execution_time": 0.07180118560791016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.inpatient_substance_use__encounter_grain", "compiled": true, "compiled_code": "\n\nwith detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n    ,ed.encounter_start_date\n    ,ed.encounter_end_date\n      ,cli.encounter_type\n    ,cli.encounter_group\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  --replace this ref with the deduped version when complete\n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'inpatient substance use'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join dev_coco.claims_preprocessing.inpatient_substance_use__start_end_dates ed on cli.old_encounter_id = ed.encounter_id\n)\n\n,encounter_cross_walk as (\n  select distinct encounter_id\n  ,old_encounter_id\n  from detail_values\n)\n\n,first_last_inst_inst_values as (\nselect *\n,row_number() over (partition by encounter_id order by start_date, claim_id) as first_num\n,row_number() over (partition by encounter_id order by end_date desc, claim_id) as last_num\nfrom detail_values\nwhere claim_type = 'institutional'\n)\n\n, institutional_claim_details as (\n    select distinct\n        d.encounter_id\n        , f.diagnosis_code_1\n        , f.diagnosis_code_type\n        , f.facility_id as facility_id\n        , f.ms_drg_code as ms_drg_code\n        , f.apr_drg_code as apr_drg_code\n        , f.admit_source_code as admit_source_code\n        , f.admit_type_code as admit_type_code\n        , l.discharge_disposition_code as discharge_disposition_code\n        , d.patient_data_source_id\n        , d.data_source\n    from detail_values d\n    inner join first_last_inst_inst_values f on d.encounter_id = f.encounter_id\n    and\n    f.first_num =1 \n    inner join first_last_inst_inst_values l on d.encounter_id = l.encounter_id\n    and\n    l.last_num = 1 \n\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n, encounter_type\n, encounter_group\n\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'emergency department' then 1 else 0 end) as ed_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\nselect\n  x.encounter_id\n, a.encounter_start_date\n, a.encounter_end_date\n, c.patient_data_source_id\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        encounter_end_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, c.diagnosis_code_type as primary_diagnosis_code_type\n, c.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, c.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, sc.observation_flag\n, sc.ed_flag\n, c.ms_drg_code\n, j.ms_drg_description\n, j.medical_surgical\n, c.apr_drg_code\n, k.apr_drg_description\n, c.admit_source_code\n, h.admit_source_description\n, c.admit_type_code\n, i.admit_type_description\n, c.discharge_disposition_code\n, g.discharge_disposition_description\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, datediff(\n        day,\n        a.encounter_start_date,\n        a.encounter_end_date\n        ) as length_of_stay\n, case\n    when c.discharge_disposition_code = '20' then 1\n    else 0\n  end mortality_flag\n, c.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.claims_preprocessing.inpatient_substance_use__start_end_dates a\ninner join encounter_cross_walk x on a.encounter_id = x.old_encounter_id\ninner join total_amounts tot on x.encounter_id = tot.encounter_id\ninner join service_category_flags sc on x.encounter_id = sc.encounter_id\nleft join institutional_claim_details c\n  on x.encounter_id = c.encounter_id\nleft join patient e\n  on c.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on c.facility_id = b.npi\nleft join dev_coco.terminology.discharge_disposition g\n  on c.discharge_disposition_code = g.discharge_disposition_code\nleft join dev_coco.terminology.admit_source h\n  on c.admit_source_code = h.admit_source_code\nleft join dev_coco.terminology.admit_type i\n  on c.admit_type_code = i.admit_type_code\nleft join dev_coco.terminology.ms_drg j\n  on c.ms_drg_code = j.ms_drg_code\nleft join dev_coco.terminology.apr_drg k\n  on c.apr_drg_code = k.apr_drg_code\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on c.diagnosis_code_1 = icd10cm.icd_10_cm\n  and c.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on c.diagnosis_code_1 = icd9cm.icd_9_cm\n  and c.diagnosis_code_type = 'icd-9-cm'", "relation_name": "dev_coco.claims_preprocessing.inpatient_substance_use__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.569280Z", "completed_at": "2024-10-11T23:52:44.591686Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.594929Z", "completed_at": "2024-10-11T23:52:44.594934Z"}], "thread_id": "Thread-6", "execution_time": 0.0722658634185791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.lab__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  from dev_coco.claims_preprocessing.lab__generate_encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'lab - orphaned'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n,highest_paid_pos as \n(\n  select encounter_id\n  , place_of_service_code\n  , place_of_service_description\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where place_of_service_code is not null\n  group by \n   encounter_id\n  , place_of_service_code\n  , place_of_service_description\n)\n\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'outpatient pharmacy' then 1 \n                when scr.service_category_2 = 'office-based pharmacy' then 1 else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, pos.place_of_service_code\n, pos.place_of_service_description\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join highest_paid_pos pos on d.encounter_id = pos.encounter_id\nand\npos.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.lab__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.583088Z", "completed_at": "2024-10-11T23:52:44.592352Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.595653Z", "completed_at": "2024-10-11T23:52:44.595657Z"}], "thread_id": "Thread-2", "execution_time": 0.06603002548217773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_hospice__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  from dev_coco.claims_preprocessing.outpatient_hospice__generate_encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'outpatient hospice'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n, tot.encounter_type\n, tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, sc.observation_flag\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.outpatient_hospice__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.575002Z", "completed_at": "2024-10-11T23:52:44.592604Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.596093Z", "completed_at": "2024-10-11T23:52:44.596096Z"}], "thread_id": "Thread-7", "execution_time": 0.06727480888366699, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.office_visit__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  ,'office visit surgery' as encounter_type\n  from dev_coco.claims_preprocessing.office_visits__int_office_visits_surgery\n\n  union all\n\nselect distinct old_encounter_id\n  ,start_date as encounter_start_date\n  ,'office visit injections' as encounter_type\n  from dev_coco.claims_preprocessing.office_visits__int_office_visits_injections\n\n  union all \n\nselect distinct old_encounter_id\n  ,start_date as encounter_start_date\n  ,'office visit radiology' as encounter_type\n  from dev_coco.claims_preprocessing.office_visits__int_office_visits_radiology\n\n  union all\n\nselect distinct old_encounter_id\n  ,start_date as encounter_start_date\n  ,'office visit - other' as encounter_type\n  from dev_coco.claims_preprocessing.office_visits__int_office_visits\n\n  union all \n\nselect distinct old_encounter_id\n  ,start_date as encounter_start_date\n  ,'office visit' as encounter_type\n  from dev_coco.claims_preprocessing.office_visits__int_office_visits_em\n\n  union all \n\nselect distinct old_encounter_id\n  ,start_date as encounter_start_date\n  ,'telehealth' as encounter_type\n  from dev_coco.claims_preprocessing.office_visits__int_office_visits_telehealth\n\n  union all \n\nselect distinct old_encounter_id\n  ,start_date as encounter_start_date\n  ,'office visit pt/ot/st' as encounter_type\n  from dev_coco.claims_preprocessing.office_visits__int_office_visits\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_group = 'office based'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n    and\n    d.encounter_type = cli.encounter_type\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n,highest_paid_physician as \n(\n  select encounter_id\n  , billing_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where billing_id is not null\n  group by \n   encounter_id\n  , billing_id\n)\n\n,highest_paid_hcpc as \n(\n  select encounter_id\n  , hcpcs_code\n  , ccs_category\n  , ccs_category_description\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where hcpcs_code is not null\n  group by \n   encounter_id\n  , hcpcs_code\n  , ccs_category\n  , ccs_category_description\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, phy.billing_id\n, b2.provider_first_name || ' ' || b2.provider_last_name as provider_name\n, b2.primary_specialty_description as provider_specialty\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, hcpc.hcpcs_code\n, hcpc.ccs_category\n, hcpc.ccs_category_description\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join highest_paid_physician phy on d.encounter_id = phy.encounter_id\nand\nphy.paid_order = 1\nleft join highest_paid_hcpc hcpc on d.encounter_id = hcpc.encounter_id\nand\nhcpc.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.provider b2\n  on phy.billing_id = b2.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.office_visit__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.606530Z", "completed_at": "2024-10-11T23:52:44.614797Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.657764Z", "completed_at": "2024-10-11T23:52:44.657774Z"}], "thread_id": "Thread-3", "execution_time": 0.0624849796295166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_injections__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  from dev_coco.claims_preprocessing.outpatient_injections__generate_encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'outpatient injections'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n,highest_paid_hcpc as \n(\n  select encounter_id\n  , hcpcs_code\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where substring(hcpcs_code,1,1)='J'\n\n  group by \n   encounter_id\n  , hcpcs_code\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag, sc.observation_flag\n, hcpc.hcpcs_code\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join highest_paid_hcpc hcpc on d.encounter_id = hcpc.encounter_id\nand\nhcpc.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.outpatient_injections__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.600201Z", "completed_at": "2024-10-11T23:52:44.620865Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.658527Z", "completed_at": "2024-10-11T23:52:44.658533Z"}], "thread_id": "Thread-9", "execution_time": 0.06396007537841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_hospital_or_clinic__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  from dev_coco.claims_preprocessing.outpatient_hospital_or_clinic__generate_encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'outpatient hospital or clinic'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag, sc.observation_flag\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.outpatient_hospital_or_clinic__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.615039Z", "completed_at": "2024-10-11T23:52:44.659379Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.662985Z", "completed_at": "2024-10-11T23:52:44.662990Z"}], "thread_id": "Thread-8", "execution_time": 0.0639350414276123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_psych__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  from dev_coco.claims_preprocessing.outpatient_psych__generate_encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'outpatient psych'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag, sc.observation_flag\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.outpatient_psych__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.627417Z", "completed_at": "2024-10-11T23:52:44.661125Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.664220Z", "completed_at": "2024-10-11T23:52:44.664225Z"}], "thread_id": "Thread-5", "execution_time": 0.06461811065673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_radiology__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  from dev_coco.claims_preprocessing.outpatient_radiology__generate_encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'outpatient radiology'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n,hcpcs_code as \n(\n  select distinct hcpcs_code\n  ,encounter_id\n  from detail_values\n\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag, sc.observation_flag\n, hcpc.hcpcs_code\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join hcpcs_code hcpc on d.encounter_id = hcpc.encounter_id\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.outpatient_radiology__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.621120Z", "completed_at": "2024-10-11T23:52:44.661476Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.664686Z", "completed_at": "2024-10-11T23:52:44.664690Z"}], "thread_id": "Thread-4", "execution_time": 0.06534671783447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_ptotst__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  from dev_coco.claims_preprocessing.outpatient_ptotst__generate_encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'outpatient pt/ot/st'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag, sc.observation_flag\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.outpatient_ptotst__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.639465Z", "completed_at": "2024-10-11T23:52:44.661773Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.665273Z", "completed_at": "2024-10-11T23:52:44.665277Z"}], "thread_id": "Thread-6", "execution_time": 0.05909991264343262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_substance_use__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  from dev_coco.claims_preprocessing.outpatient_substance_use__generate_encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'outpatient substance use'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag, sc.observation_flag\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.outpatient_substance_use__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.633456Z", "completed_at": "2024-10-11T23:52:44.662315Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.666002Z", "completed_at": "2024-10-11T23:52:44.666007Z"}], "thread_id": "Thread-10", "execution_time": 0.0661320686340332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_rehab__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  from dev_coco.claims_preprocessing.outpatient_rehab__generate_encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'outpatient rehabilitation'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag, sc.observation_flag\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.outpatient_rehab__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.645774Z", "completed_at": "2024-10-11T23:52:44.663439Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.667041Z", "completed_at": "2024-10-11T23:52:44.667045Z"}], "thread_id": "Thread-2", "execution_time": 0.05483603477478027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.outpatient_surgery__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  from dev_coco.claims_preprocessing.outpatient_surgery__generate_encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'outpatient surgery'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag, sc.observation_flag\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.outpatient_surgery__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.651458Z", "completed_at": "2024-10-11T23:52:44.663997Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.667693Z", "completed_at": "2024-10-11T23:52:44.667698Z"}], "thread_id": "Thread-7", "execution_time": 0.05519700050354004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.urgent_care__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n  select distinct old_encounter_id\n  ,start_date as encounter_start_date\n  from dev_coco.claims_preprocessing.urgent_care__generate_encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.old_encounter_id\n      ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    and\n    cli.encounter_type = 'urgent care'\n    and\n    cli.claim_line_attribution_number = 1\n    inner join encounter_date d on cli.old_encounter_id = d.old_encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.patient_data_source_id\n\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, sc.observation_flag\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.urgent_care__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.677846Z", "completed_at": "2024-10-11T23:52:44.708493Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.709535Z", "completed_at": "2024-10-11T23:52:44.709544Z"}], "thread_id": "Thread-9", "execution_time": 0.04318499565124512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__condition", "compiled": true, "compiled_code": "\n\n\nwith all_conditions as (\n   select *\nfrom dev_coco.core._stg_claims_condition\nunion all\nselect *\nfrom dev_coco.core._stg_clinical_condition\n\n\n)\n\n\n\n\nselect\n    all_conditions.condition_id\n  , all_conditions.patient_id\n  , all_conditions.encounter_id\n  , all_conditions.claim_id\n  , all_conditions.recorded_date\n  , all_conditions.onset_date\n  , all_conditions.resolved_date\n  , all_conditions.status\n  , all_conditions.condition_type\n  , all_conditions.source_code_type\n  , all_conditions.source_code\n  , all_conditions.source_description\n  , case\n        when all_conditions.normalized_code_type is not null then all_conditions.normalized_code_type\n        when icd10.icd_10_cm is not null then 'icd-10-cm'\n        when icd9.icd_9_cm is not null then 'icd-9-cm'\n        when snomed_ct.snomed_ct is not null then 'snomed-ct'\n        else null end as normalized_code_type\n  , coalesce(\n        all_conditions.normalized_code\n      , icd10.icd_10_cm\n      , icd9.icd_9_cm\n      , snomed_ct.snomed_ct) as normalized_code\n  , coalesce(\n        all_conditions.normalized_description\n      , icd10.short_description\n      , icd9.short_description\n      , snomed_ct.description) as normalized_description\n  , case when coalesce(all_conditions.normalized_code, all_conditions.normalized_description) is not null then 'manual'\n         when coalesce(icd10.icd_10_cm,icd9.icd_9_cm, snomed_ct.snomed_ct) is not null then 'automatic'\n         end as mapping_method\n  , all_conditions.condition_rank\n  , all_conditions.present_on_admit_code\n  , all_conditions.present_on_admit_description\n  , all_conditions.data_source\n  , all_conditions.tuva_last_run\nfrom\nall_conditions\nleft join dev_coco.terminology.icd_10_cm icd10\n    on all_conditions.source_code_type = 'icd-10-cm'\n        and replace(all_conditions.source_code,'.','') = icd10.icd_10_cm\nleft join dev_coco.terminology.icd_9_cm icd9\n    on all_conditions.source_code_type = 'icd-9-cm'\n        and replace(all_conditions.source_code,'.','') = icd9.icd_9_cm\nleft join dev_coco.terminology.snomed_ct snomed_ct\n    on all_conditions.source_code_type = 'snomed-ct'\n        and all_conditions.source_code = snomed_ct.snomed_ct\n\n\n\n\n", "relation_name": "dev_coco.core.condition"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.670292Z", "completed_at": "2024-10-11T23:52:44.709225Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.710128Z", "completed_at": "2024-10-11T23:52:44.710133Z"}], "thread_id": "Thread-3", "execution_time": 0.04448509216308594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__procedure", "compiled": true, "compiled_code": "\n\n\nwith all_procedures as (\nselect * from dev_coco.core._stg_claims_procedure\nunion all\nselect * from dev_coco.core._stg_clinical_procedure\n\n\n)\n\n\n\nselect\n    all_procedures.procedure_id\n  , all_procedures.patient_id\n  , all_procedures.encounter_id\n  , all_procedures.claim_id\n  , all_procedures.procedure_date\n  , all_procedures.source_code_type\n  , all_procedures.source_code\n  , all_procedures.source_description\n  , case when all_procedures.normalized_code_type is not null then  all_procedures.normalized_code_type\n      when icd10.icd_10_pcs is not null then 'icd-10-pcs'\n      when icd9.icd_9_pcs is not null then 'icd-9-pcs'\n      when hcpcs.hcpcs is not null then 'hcpcs'\n      when snomed_ct.snomed_ct is not null then 'snomed-ct'\n      end as normalized_code_type\n  , coalesce(all_procedures.normalized_code\n      , icd10.icd_10_pcs\n      , icd9.icd_9_pcs\n      , hcpcs.hcpcs\n      ,snomed_ct.snomed_ct ) as normalized_code\n  ,  coalesce(all_procedures.normalized_description\n      , icd10.description\n      , icd9.short_description\n      , hcpcs.short_description\n      , snomed_ct.description) normalized_description\n  , case when coalesce(all_procedures.normalized_code, all_procedures.normalized_description) is not null then 'manual'\n         when coalesce(icd10.icd_10_pcs,icd9.icd_9_pcs, hcpcs.hcpcs, snomed_ct.snomed_ct) is not null then 'automatic'\n         end as mapping_method\n  , all_procedures.modifier_1\n  , all_procedures.modifier_2\n  , all_procedures.modifier_3\n  , all_procedures.modifier_4\n  , all_procedures.modifier_5\n  , all_procedures.practitioner_id\n  , all_procedures.data_source\n  , all_procedures.tuva_last_run\nfrom all_procedures\nleft join dev_coco.terminology.icd_10_pcs icd10\n    on all_procedures.source_code_type = 'icd-10-pcs'\n        and all_procedures.source_code = icd10.icd_10_pcs\nleft join dev_coco.terminology.icd_9_pcs icd9\n    on all_procedures.source_code_type = 'icd-9-pcs'\n        and all_procedures.source_code = icd9.icd_9_pcs\nleft join dev_coco.terminology.hcpcs_level_2 hcpcs\n    on all_procedures.source_code_type = 'hcpcs'\n        and all_procedures.source_code = hcpcs.hcpcs\nleft join dev_coco.terminology.snomed_ct snomed_ct\n    on all_procedures.source_code_type = 'snomed-ct'\n        and all_procedures.source_code = snomed_ct.snomed_ct\n\n\n", "relation_name": "dev_coco.core.procedure"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.686163Z", "completed_at": "2024-10-11T23:52:44.710599Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.712219Z", "completed_at": "2024-10-11T23:52:44.712224Z"}], "thread_id": "Thread-8", "execution_time": 0.042719125747680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_medical_claim", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the medical_claim table\n-- in core. It adds these 4 fields to the input layer\n-- medical claim table:\n--      encounter_id\n--      service_category_1\n--      service_category_2\n-- *************************************************\n\nwith all_encounters as (\n    select   claim_id\n, claim_line_number\n, encounter_id\n, encounter_type\n, encounter_group\n    from dev_coco.claims_preprocessing.encounters__combined_claim_line_crosswalk\n    where claim_line_attribution_number = 1\n    \n    union all \n\n    select  \n  claim_id\n, claim_line_number\n, encounter_id\n, encounter_type\n, encounter_group\n    from dev_coco.claims_preprocessing.encounters__orphaned_claims\n)\n\n\nselect\n    med.claim_id || '-' || med.claim_line_number as medical_claim_id\n    , cast(med.claim_id as TEXT ) as claim_id\n    , cast(med.claim_line_number as integer ) as claim_line_number\n    , cast(x.encounter_id as int ) as encounter_id\n    , cast(x.encounter_type as TEXT ) as encounter_type\n    , cast(x.encounter_group as TEXT ) as encounter_group\n    , cast(med.claim_type as TEXT ) as claim_type\n    , cast(med.patient_id as TEXT ) as patient_id\n    , cast(med.member_id as TEXT ) as member_id\n    , cast(med.payer as TEXT ) as payer\n    , med.plan\n    , try_cast( med.claim_start_date as date ) as claim_start_date\n    , try_cast( med.claim_end_date as date ) as claim_end_date\n    , try_cast( med.claim_line_start_date as date ) as claim_line_start_date\n    , try_cast( med.claim_line_end_date as date ) as claim_line_end_date\n    , try_cast( med.admission_date as date ) as admission_date\n    , try_cast( med.discharge_date as date ) as discharge_date\n    , cast(srv_group.service_category_1 as TEXT ) as service_category_1\n    , cast(srv_group.service_category_2 as TEXT ) as service_category_2\n    , cast(srv_group.service_category_3 as TEXT ) as service_category_3\n    , cast(med.admit_source_code as TEXT ) as admit_source_code\n    , cast(med.admit_source_description as TEXT ) as admit_source_description\n    , cast(med.admit_type_code as TEXT ) as admit_type_code\n    , cast(med.admit_type_description as TEXT ) as admit_type_description\n    , cast(med.discharge_disposition_code as TEXT ) as discharge_disposition_code\n    , cast(med.discharge_disposition_description as TEXT ) as discharge_disposition_description\n    , cast(med.place_of_service_code as TEXT ) as place_of_service_code\n    , cast(med.place_of_service_description as TEXT ) as place_of_service_description\n    , cast(med.bill_type_code as TEXT ) as bill_type_code\n    , cast(med.bill_type_description as TEXT ) as bill_type_description\n    , cast(med.ms_drg_code as TEXT ) as ms_drg_code\n    , cast(med.ms_drg_description as TEXT ) as ms_drg_description\n    , cast(med.apr_drg_code as TEXT ) as apr_drg_code\n    , cast(med.apr_drg_description as TEXT ) as apr_drg_description\n    , cast(med.revenue_center_code as TEXT ) as revenue_center_code\n    , cast(med.revenue_center_description as TEXT ) as revenue_center_description\n    , cast(med.service_unit_quantity as numeric(28,6) ) as service_unit_quantity\n    , cast(med.hcpcs_code as TEXT ) as hcpcs_code\n    , cast(med.hcpcs_modifier_1 as TEXT ) as hcpcs_modifier_1\n    , cast(med.hcpcs_modifier_2 as TEXT ) as hcpcs_modifier_2\n    , cast(med.hcpcs_modifier_3 as TEXT ) as hcpcs_modifier_3\n    , cast(med.hcpcs_modifier_4 as TEXT ) as hcpcs_modifier_4\n    , cast(med.hcpcs_modifier_5 as TEXT ) as hcpcs_modifier_5\n    , cast(med.rendering_id as TEXT ) as rendering_id\n    , cast(med.rendering_tin as TEXT ) as rendering_tin\n    , cast(med.rendering_name as TEXT ) as rendering_name\n    , cast(med.billing_id as TEXT ) as billing_id\n    , cast(med.billing_tin as TEXT ) as billing_tin\n    , cast(med.billing_name as TEXT ) as billing_name\n    , cast(med.facility_id as TEXT ) as facility_id\n    , cast(med.facility_name as TEXT ) as facility_name\n    , try_cast( med.paid_date as date ) as paid_date\n    , cast(med.paid_amount as numeric(28,6) ) as paid_amount\n    , cast(med.allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(med.charge_amount as numeric(28,6) ) as charge_amount\n    , cast(med.coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n    , cast(med.copayment_amount as numeric(28,6) ) as copayment_amount\n    , cast(med.deductible_amount as numeric(28,6) ) as deductible_amount\n    , cast(med.total_cost_amount as numeric(28,6) ) as total_cost_amount\n    , cast(med.in_network_flag as int ) as in_network_flag\n    , cast(\n    case\n        when enroll.claim_id is not null then 1\n            else 0\n    end as int) as enrollment_flag\n    , cast(med.data_source as TEXT ) as data_source\n    , cast('2024-10-11 23:52:28.343846+00:00' as timestamp ) as tuva_last_run\nfrom dev_coco.claims_preprocessing.normalized_input_medical_claim as med\ninner join dev_coco.claims_preprocessing.service_category_grouper as srv_group\n  on med.claim_id = srv_group.claim_id\n  and med.claim_line_number = srv_group.claim_line_number\n  and srv_group.duplicate_row_number = 1\ninner join all_encounters as x\n  on med.claim_id = x.claim_id\n  and med.claim_line_number = x.claim_line_number\nleft join dev_coco.claims_preprocessing.flag_claims_with_enrollment as enroll\n  on med.claim_id = enroll.claim_id\n  and med.claim_line_number = enroll.claim_line_number", "relation_name": "dev_coco.core._stg_claims_medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.702222Z", "completed_at": "2024-10-11T23:52:44.711990Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.714604Z", "completed_at": "2024-10-11T23:52:44.714609Z"}], "thread_id": "Thread-5", "execution_time": 0.04466724395751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.orphaned_claim__encounter_grain", "compiled": true, "compiled_code": "\n\nwith encounter_date as (\n    select\n        cli.encounter_id\n      , min(stg.start_date) as encounter_start_date\n      , max(stg.start_date) as encounter_end_date\n    from dev_coco.claims_preprocessing.encounters__stg_medical_claim as stg\n    inner join dev_coco.claims_preprocessing.encounters__orphaned_claims as cli\n      on stg.claim_id = cli.claim_id\n      and stg.claim_line_number = cli.claim_line_number\n    group by\n        cli.encounter_id\n)\n\n,detail_values as (\n    select stg.*\n    ,cli.encounter_id\n    ,cli.encounter_type\n    ,cli.encounter_group\n    ,d.encounter_start_date \n    ,d.encounter_end_date\n    , row_number() over (partition by cli.encounter_id order by stg.claim_type, stg.start_date) as encounter_row_number --institutional then professional\n    from  dev_coco.claims_preprocessing.encounters__stg_medical_claim stg\n    inner join dev_coco.claims_preprocessing.encounters__orphaned_claims cli on stg.claim_id = cli.claim_id  \n    and\n    stg.claim_line_number = cli.claim_line_number\n    inner join encounter_date d on cli.encounter_id = d.encounter_id\n)\n\n, patient as (\n    select \n        patient_data_source_id\n        , birth_date\n        , gender\n        , race\n    from dev_coco.claims_preprocessing.encounters__stg_eligibility\n    where patient_row_num = 1\n    )\n\n, total_amounts as (\n    select \n    encounter_id\n    , encounter_type\n    , encounter_group\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\n    , count(distinct claim_id) as claim_count\n    , count(distinct(case when claim_type = 'institutional' then claim_id else null end))  as inst_claim_count\n    , count(distinct(case when claim_type = 'professional' then claim_id else null end))  as prof_claim_count\nfrom detail_values\ngroup by encounter_id\n,encounter_type \n,encounter_group\n)\n\n\n,highest_paid_diagnosis as \n(\n  select encounter_id\n  , diagnosis_code_1\n  , diagnosis_code_type\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where diagnosis_code_1 is not null\n  group by diagnosis_code_1\n  , encounter_id\n  , diagnosis_code_type\n)\n\n,highest_paid_facility as \n(\n  select encounter_id\n  , facility_id\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where facility_id is not null\n  group by \n   encounter_id\n  , facility_id\n)\n\n,highest_paid_pos as \n(\n  select encounter_id\n  , place_of_service_code\n  , place_of_service_description\n  , row_number() over (partition by encounter_id order by sum(paid_amount) desc ) as paid_order\n  , sum(paid_amount) as paid_amount\n  from detail_values\n  where place_of_service_code is not null\n  group by \n   encounter_id\n  , place_of_service_code\n  , place_of_service_description\n)\n\n\n\n, service_category_flags as (\n    select distinct\n        d.encounter_id\n       ,max(case when scr.service_category_2 = 'lab' then 1 else 0 end) as lab_flag\n       ,max(case when scr.service_category_2 = 'ambulance' then 1 else 0 end) as ambulance_flag\n       ,max(case when scr.service_category_2 = 'durable medical equipment' then 1 else 0 end) as dme_flag\n       ,max(case when scr.service_category_2 = 'observation' then 1 else 0 end) as observation_flag\n       ,max(case when scr.service_category_2 = 'pharmacy' then 1 \n              else 0 end) as pharmacy_flag\n    from detail_values d\n    left join dev_coco.claims_preprocessing.service_category_grouper scr on d.claim_id = scr.claim_id \n    and\n    scr.claim_line_number = d.claim_line_number\n    group by d.encounter_id\n)\n\nselect   d.encounter_id\n, d.encounter_start_date\n, d.encounter_end_date\n, d.patient_data_source_id\n,tot.encounter_type\n,tot.encounter_group\n, datediff(\n        day,\n        birth_date,\n        d.encounter_start_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, hp.diagnosis_code_type as primary_diagnosis_code_type\n, hp.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.long_description, icd9cm.long_description) as primary_diagnosis_description\n, hf.facility_id as facility_id\n, b.provider_organization_name as facility_name\n, b.primary_specialty_description as facility_type\n, sc.lab_flag\n, sc.dme_flag\n, sc.ambulance_flag\n, sc.pharmacy_flag\n, pos.place_of_service_code\n, pos.place_of_service_description\n, tot.total_paid_amount\n, tot.total_allowed_amount\n, tot.total_charge_amount\n, tot.claim_count\n, tot.inst_claim_count\n, tot.prof_claim_count\n, d.data_source\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom detail_values d\ninner join total_amounts tot on d.encounter_id = tot.encounter_id\ninner join service_category_flags sc on d.encounter_id = sc.encounter_id\nleft join highest_paid_diagnosis hp on d.encounter_id = hp.encounter_id\nand\nhp.paid_order = 1\nleft join highest_paid_facility hf on d.encounter_id = hf.encounter_id\nand\nhf.paid_order = 1\nleft join highest_paid_pos pos on d.encounter_id = pos.encounter_id\nand\npos.paid_order = 1\nleft join patient e\n  on d.patient_data_source_id = e.patient_data_source_id\nleft join dev_coco.terminology.provider b\n  on hf.facility_id = b.npi\nleft join dev_coco.terminology.icd_10_cm icd10cm\n  on hp.diagnosis_code_1 = icd10cm.icd_10_cm\n  and hp.diagnosis_code_type = 'icd-10-cm'\nleft join dev_coco.terminology.icd_9_cm icd9cm\n  on hp.diagnosis_code_1 = icd9cm.icd_9_cm\n  and hp.diagnosis_code_type = 'icd-9-cm'\nwhere d.encounter_row_number = 1", "relation_name": "dev_coco.claims_preprocessing.orphaned_claim__encounter_grain"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.747065Z", "completed_at": "2024-10-11T23:52:44.757560Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.760429Z", "completed_at": "2024-10-11T23:52:44.760434Z"}], "thread_id": "Thread-8", "execution_time": 0.042807817459106445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__condition_condition_id.ef1067e2f0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    condition_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.core.condition\nwhere condition_id is not null\ngroup by condition_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.781717Z", "completed_at": "2024-10-11T23:52:44.801667Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.828408Z", "completed_at": "2024-10-11T23:52:44.828416Z"}], "thread_id": "Thread-2", "execution_time": 0.0676119327545166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__procedure_procedure_id.feb1b6b4d5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    procedure_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.core.procedure\nwhere procedure_id is not null\ngroup by procedure_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.785017Z", "completed_at": "2024-10-11T23:52:44.801985Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.828910Z", "completed_at": "2024-10-11T23:52:44.828914Z"}], "thread_id": "Thread-7", "execution_time": 0.06783008575439453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__medical_claim", "compiled": true, "compiled_code": "\n\n\nselect * from dev_coco.core._stg_claims_medical_claim", "relation_name": "dev_coco.core.medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.788427Z", "completed_at": "2024-10-11T23:52:44.811180Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.830141Z", "completed_at": "2024-10-11T23:52:44.830146Z"}], "thread_id": "Thread-9", "execution_time": 0.06877303123474121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_location", "compiled": true, "compiled_code": "\n\nwith all_providers_in_claims_dataset as (\nselect distinct facility_id as npi, data_source\nfrom dev_coco.core._stg_claims_medical_claim\n\n\nunion distinct\n\n\nselect distinct rendering_id as npi, data_source\nfrom dev_coco.core._stg_claims_medical_claim\n\n\nunion distinct\n\n\nselect distinct billing_id as npi, data_source\nfrom dev_coco.core._stg_claims_medical_claim\n\n\nunion distinct\n\n\nselect distinct prescribing_provider_id as npi, data_source\nfrom dev_coco.core._stg_claims_pharmacy_claim\n\n\nunion distinct\n\n\nselect distinct dispensing_provider_id as npi, data_source\nfrom dev_coco.core._stg_claims_pharmacy_claim\n),\n\n\nprovider as (\nselect aa.*, bb.data_source\nfrom dev_coco.terminology.provider aa\ninner join all_providers_in_claims_dataset bb\non aa.npi = bb.npi\nwhere lower(aa.entity_type_description) = 'organization'\n)\n\n\n\nselect \n    cast(npi as TEXT ) as location_id\n    , cast(npi as TEXT ) as npi\n    , cast(provider_organization_name as TEXT ) as name\n    , cast(null as TEXT ) as facility_type\n    , cast(parent_organization_name as TEXT ) as parent_organization\n    , cast(practice_address_line_1 as TEXT ) as address\n    , cast(practice_city as TEXT ) as city\n    , cast(practice_state as TEXT ) as state\n    , cast(practice_zip_code as TEXT ) as zip_code\n    , cast(null as float ) as latitude\n    , cast(null as float ) as longitude\n    , cast(data_source as TEXT ) as data_source\n    , cast( '2024-10-11 23:52:28.343846+00:00' as timestamp ) as tuva_last_run\nfrom provider", "relation_name": "dev_coco.core._stg_claims_location"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.802235Z", "completed_at": "2024-10-11T23:52:44.830572Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.834902Z", "completed_at": "2024-10-11T23:52:44.834910Z"}], "thread_id": "Thread-5", "execution_time": 0.05855727195739746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_practitioner", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the provider table \n-- in core. It includes data about all providers\n-- present in the raw claims dataset.\n-- *************************************************\n\n\nwith all_providers_in_claims_dataset as (\nselect distinct facility_id as npi, data_source\nfrom dev_coco.core._stg_claims_medical_claim\n\n\nunion distinct\n\n\nselect distinct rendering_id as npi, data_source\nfrom dev_coco.core._stg_claims_medical_claim\n\n\nunion distinct\n\n\nselect distinct billing_id as npi, data_source\nfrom dev_coco.core._stg_claims_medical_claim\n\n\nunion distinct\n\n\nselect distinct prescribing_provider_id as npi, data_source\nfrom dev_coco.core._stg_claims_pharmacy_claim\n\n\nunion distinct\n\n\nselect distinct dispensing_provider_id as npi, data_source\nfrom dev_coco.core._stg_claims_pharmacy_claim\n),\n\n\nprovider as (\nselect aa.*, bb.data_source\nfrom dev_coco.terminology.provider aa\ninner join all_providers_in_claims_dataset bb\non aa.npi = bb.npi\nwhere lower(aa.entity_type_description) = 'individual'\n)\n\n\n\nselect \n    cast(npi as TEXT ) as practitioner_id\n    , cast(npi as TEXT ) as npi\n    , cast(provider_first_name as TEXT ) as provider_first_name\n    , cast(provider_last_name as TEXT ) as provider_last_name\n    , cast(parent_organization_name as TEXT ) as practice_affiliation\n    , cast(primary_specialty_description as TEXT ) as specialty\n    , cast(null as TEXT ) as sub_specialty\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-10-11 23:52:28.343846+00:00' as timestamp ) as tuva_last_run\nfrom provider", "relation_name": "dev_coco.core._stg_claims_practitioner"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.836158Z", "completed_at": "2024-10-11T23:52:44.892313Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.935355Z", "completed_at": "2024-10-11T23:52:44.935365Z"}], "thread_id": "Thread-3", "execution_time": 0.10754895210266113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ccsr__long_condition_category", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__ccsr__stg_core__condition as (\n\n\nselect\n    encounter_id\n    , claim_id\n    , patient_id\n    , normalized_code\n    , condition_rank\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\nwhere normalized_code_type = 'icd-10-cm'\n), ccsr__dx_vertical_pivot as (\n    \n    select * from dev_coco.ccsr.dx_vertical_pivot \n\n), condition as (\n    \n    select * from __dbt__cte__ccsr__stg_core__condition\n\n), dxccsr_body_systems as (\n\n    select * from dev_coco.ccsr._value_set_dxccsr_v2023_1_body_systems\n\n)\n\nselect \n    condition.encounter_id,\n    condition.claim_id,\n    condition.patient_id,\n    condition.normalized_code,\n    ccsr__dx_vertical_pivot.code_description,\n    condition.condition_rank,\n    ccsr__dx_vertical_pivot.ccsr_parent_category,\n    dxccsr_body_systems.body_system,\n    dxccsr_body_systems.parent_category_description,\n    ccsr__dx_vertical_pivot.ccsr_category,\n    ccsr__dx_vertical_pivot.ccsr_category_description,\n    ccsr__dx_vertical_pivot.ccsr_category_rank,\n    ccsr__dx_vertical_pivot.is_ip_default_category,\n    ccsr__dx_vertical_pivot.is_op_default_category,\n    '2023.1' as dxccsr_version,\n    '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom condition\nleft join ccsr__dx_vertical_pivot\n    on condition.normalized_code = ccsr__dx_vertical_pivot.code\nleft join dxccsr_body_systems on ccsr__dx_vertical_pivot.ccsr_parent_category = dxccsr_body_systems.ccsr_parent_category", "relation_name": "dev_coco.ccsr.long_condition_category"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.848127Z", "completed_at": "2024-10-11T23:52:44.893267Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.942043Z", "completed_at": "2024-10-11T23:52:44.942048Z"}], "thread_id": "Thread-4", "execution_time": 0.11263203620910645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_prep_conditions", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__hcc_suspecting__stg_core__condition as (\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , condition_type\n    , lower(normalized_code_type) as code_type\n    , normalized_code as code\n    , data_source\nfrom dev_coco.core.condition\n), conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n        , data_source\n    from __dbt__cte__hcc_suspecting__stg_core__condition\n\n)\n\n/*\n    Default mapping guidance: Most map groups terminate with an unconditional\n    rule \u2013 a rule whose predicate is \u201cTRUE\u201d or, equivalently, \u201cOTHERWISE TRUE\u201d.\n    This rule is considered a \u201cdefault\u201d because it should be applied if\n    nothing further is known about the patient\u2019s condition.\n*/\n, seed_snomed_icd_10_map as (\n\n    select\n          referenced_component_id as snomed_code\n        , map_target as icd_10_code\n    from dev_coco.terminology.snomed_icd_10_map\n    where lower(map_rule) in ('true', 'otherwise true')\n    and map_group = '1'\n\n)\n\n, snomed_conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , 'icd-10-cm' as code_type\n        , icd_10_code as code\n        , data_source\n    from conditions\n         inner join seed_snomed_icd_10_map\n         on conditions.code = seed_snomed_icd_10_map.snomed_code\n    where conditions.code_type = 'snomed-ct'\n\n)\n\n, other_conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n        , data_source\n    from conditions\n    where conditions.code_type <> 'snomed-ct'\n\n)\n\n, union_conditions as (\n\n    select * from snomed_conditions\n    union all\n    select * from other_conditions\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(recorded_date as date) as recorded_date\n        , cast(condition_type as TEXT) as condition_type\n        , cast(code_type as TEXT) as code_type\n        , cast(code as TEXT) as code\n        , cast(data_source as TEXT) as data_source\n    from union_conditions\n\n)\n\nselect\n      patient_id\n    , recorded_date\n    , condition_type\n    , code_type\n    , code\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.hcc_suspecting._int_prep_conditions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.860757Z", "completed_at": "2024-10-11T23:52:44.893533Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.942720Z", "completed_at": "2024-10-11T23:52:44.942726Z"}], "thread_id": "Thread-6", "execution_time": 0.11295795440673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438_denominator_criteria3", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n), diabetes_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n              'diabetes'\n        )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , encounter_id\n        , recorded_date\n        , source_code\n        , source_code_type\n        , normalized_code\n        , normalized_code_type\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, diabetes_conditions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date as evidence_date\n    from conditions\n    inner join diabetes_codes\n        on coalesce(conditions.normalized_code_type, conditions.source_code_type) = diabetes_codes.code_system\n            and coalesce(conditions.normalized_code, conditions.source_code) = diabetes_codes.code\n\n)\n\n, patients_with_diabetes as (\n\n    select\n        distinct\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version \n    from diabetes_conditions\n    inner join dev_coco.quality_measures._int_cqm438__performance_period pp\n    on evidence_date <= pp.performance_period_end\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from patients_with_diabetes\n\n)\n\nselect \n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm438_denominator_criteria3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.886073Z", "completed_at": "2024-10-11T23:52:44.941726Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.957678Z", "completed_at": "2024-10-11T23:52:44.957693Z"}], "thread_id": "Thread-10", "execution_time": 0.12663006782531738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__condition_patient_id.1f1222e348", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__condition\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.893810Z", "completed_at": "2024-10-11T23:52:44.943815Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.986725Z", "completed_at": "2024-10-11T23:52:44.986731Z"}], "thread_id": "Thread-2", "execution_time": 0.1393289566040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__tuva_chronic_conditions__stg_core__condition as (\n\n\nselect \n      patient_id\n    , normalized_code\n    , recorded_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n), all_conditions as (\nselect \n  patient_id,\n  normalized_code,\n  recorded_date\n    from __dbt__cte__tuva_chronic_conditions__stg_core__condition\n),\n\n\nconditions_with_first_and_last_diagnosis_date as (\nselect \n  patient_id,\n  normalized_code as icd_10_cm,\n  min(recorded_date) as first_diagnosis_date,\n  max(recorded_date) as last_diagnosis_date\nfrom all_conditions\ngroup by patient_id, normalized_code\n\n)\n\n\nselect\n  aa.patient_id,\n  bb.concept_name as condition,\n  min(first_diagnosis_date) as first_diagnosis_date,\n  max(last_diagnosis_date) as last_diagnosis_date,\n  '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom conditions_with_first_and_last_diagnosis_date aa\ninner join dev_coco.clinical_concept_library.value_set_member_relevant_fields bb\non aa.icd_10_cm = bb.code\ngroup by aa.patient_id, bb.concept_name", "relation_name": "dev_coco.chronic_conditions.tuva_chronic_conditions_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.904641Z", "completed_at": "2024-10-11T23:52:44.944161Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.987213Z", "completed_at": "2024-10-11T23:52:44.987217Z"}], "thread_id": "Thread-7", "execution_time": 0.13944697380065918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ccsr__long_procedure_category", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__ccsr__stg_core__procedure as (\n\n\nselect \n      encounter_id\n    , claim_id\n    , patient_id\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n), procedures as (\n\n    select * from __dbt__cte__ccsr__stg_core__procedure\n\n)\n\n, ccsr__procedure_category_map as (\n\n    select * from dev_coco.ccsr.procedure_category_map\n\n)\n\nselect distinct\n      procedures.encounter_id\n    , procedures.claim_id\n    , procedures.patient_id\n    , procedures.normalized_code\n    , ccsr__procedure_category_map.code_description\n    , ccsr__procedure_category_map.ccsr_parent_category\n    , ccsr__procedure_category_map.ccsr_category\n    , ccsr__procedure_category_map.ccsr_category_description\n    , ccsr__procedure_category_map.clinical_domain\n    , '2023.1' as prccsr_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom procedures\nleft join ccsr__procedure_category_map\n    on procedures.normalized_code = ccsr__procedure_category_map.code", "relation_name": "dev_coco.ccsr.long_procedure_category"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.910297Z", "completed_at": "2024-10-11T23:52:44.970902Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.987949Z", "completed_at": "2024-10-11T23:52:44.987953Z"}], "thread_id": "Thread-9", "execution_time": 0.11470603942871094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438_denominator_criteria1", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n), ascvd_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n              'atherosclerosis and peripheral arterial disease'\n            , 'myocardial infarction'\n            , 'pci'\n            , 'stable and unstable angina'\n            , 'cabg or pci procedure'\n            , 'cabg surgeries'\n            , 'cerebrovascular disease stroke or tia'\n            , 'ischemic heart disease or related diagnoses'\n            , 'carotid intervention'\n        )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , encounter_id\n        , recorded_date\n        , source_code\n        , source_code_type\n        , normalized_code\n        , normalized_code_type\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, ascvd_conditions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date as evidence_date\n    from conditions\n    inner join ascvd_codes\n        on coalesce(conditions.normalized_code_type, conditions.source_code_type) = ascvd_codes.code_system\n            and coalesce(conditions.normalized_code, conditions.source_code) = ascvd_codes.code\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, ascvd_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date as evidence_date\n    from procedures\n         inner join ascvd_codes\n             on procedures.code = ascvd_codes.code\n             and procedures.code_type = ascvd_codes.code_system\n\n)\n\n, historical_ascvd as (\n\n    select\n          ascvd_conditions.patient_id\n        , ascvd_conditions.evidence_date\n    from ascvd_conditions\n\n    union all\n\n    select\n          ascvd_procedures.patient_id\n        , ascvd_procedures.evidence_date\n    from ascvd_procedures\n\n)\n\n, patients_with_ascvd as (\n\n    select\n        distinct\n          historical_ascvd.patient_id\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n    from historical_ascvd\n    inner join dev_coco.quality_measures._int_cqm438__performance_period pp\n    on evidence_date <= pp.performance_period_end\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from patients_with_ascvd\n\n)\n\nselect \n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm438_denominator_criteria1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.944416Z", "completed_at": "2024-10-11T23:52:44.991684Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:44.998747Z", "completed_at": "2024-10-11T23:52:44.998756Z"}], "thread_id": "Thread-5", "execution_time": 0.10613298416137695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438_denominator_criteria2", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_core__lab_result as (\n\n\nselect\n      patient_id\n    , result\n    , result_date\n    , collection_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.lab_result\n\n\n), cholesterol_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n              'ldl cholesterol'\n            , 'familial hypercholesterolemia'\n        )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , encounter_id\n        , recorded_date\n        , source_code\n        , source_code_type\n        , normalized_code\n        , normalized_code_type\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, cholesterol_conditions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date as evidence_date\n    from conditions\n    inner join cholesterol_codes\n        on coalesce(conditions.normalized_code_type, conditions.source_code_type) = cholesterol_codes.code_system\n            and coalesce(conditions.normalized_code, conditions.source_code) = cholesterol_codes.code\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, cholesterol_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date as evidence_date\n    from procedures\n         inner join cholesterol_codes\n             on procedures.code = cholesterol_codes.code\n             and procedures.code_type = cholesterol_codes.code_system\n\n)\n\n, labs as (\n\n    select\n          patient_id\n        , result\n        , result_date\n        , collection_date\n        , source_code_type\n        , source_code\n        , normalized_code_type\n        , normalized_code\n    from __dbt__cte__quality_measures__stg_core__lab_result\n\n)\n\n, cholesterol_tests_with_result as (\n\n    select\n      labs.patient_id\n    , labs.result as evidence_value\n    , coalesce(collection_date, result_date) as evidence_date\n    , cholesterol_codes.concept_name\n    , row_number() over(partition by labs.patient_id order by\n                          labs.result desc\n                        , result_date desc) as rn\n    from labs\n    inner join cholesterol_codes\n      on coalesce(labs.normalized_code, labs.source_code) = cholesterol_codes.code\n        and coalesce(labs.normalized_code_type, labs.source_code_type) = cholesterol_codes.code_system\n   \n        where regexp_like(result, '^[+-]?([0-9]*[.])?[0-9]+$')\n    \n\n)\n\n, cholesterol_labs as (\n\n    select\n          patient_id\n        , evidence_date\n    from cholesterol_tests_with_result\n    where rn= 1\n        and cast(evidence_value as numeric(28,6)) >= 190\n\n)\n\n, all_patients_with_cholesterol as (\n\n    select\n          cholesterol_conditions.patient_id\n        , cholesterol_conditions.evidence_date\n    from cholesterol_conditions\n\n    union all\n\n    select\n          cholesterol_procedures.patient_id\n        , cholesterol_procedures.evidence_date\n    from cholesterol_procedures\n\n    union all\n\n    select\n          cholesterol_labs.patient_id\n        , cholesterol_labs.evidence_date\n    from cholesterol_labs\n\n)\n\n, patients_with_cholesterol as (\n\n    select\n        distinct\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from all_patients_with_cholesterol\n    inner join dev_coco.quality_measures._int_cqm438__performance_period pp\n    on evidence_date <= pp.performance_period_end\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from patients_with_cholesterol\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm438_denominator_criteria2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.993167Z", "completed_at": "2024-10-11T23:52:45.013148Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.031999Z", "completed_at": "2024-10-11T23:52:45.032005Z"}], "thread_id": "Thread-3", "execution_time": 0.046256303787231445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__procedure_patient_id.0b52ff75d9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__procedure\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.999877Z", "completed_at": "2024-10-11T23:52:45.025957Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.041210Z", "completed_at": "2024-10-11T23:52:45.041219Z"}], "thread_id": "Thread-4", "execution_time": 0.05286693572998047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__procedure_ccs", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__readmissions__stg_core__procedure as (\n\n\nselect\n  encounter_id\n, normalized_code\n, normalized_code_type\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n) -- Here we map every procedure code to its corresponding\n-- CCS procedure category.\n-- This model may list more than one CCS procedure category\n-- per encounter_id because different procedures associated with the\n-- encounter (different rows on the stg_procedure model) may have\n-- different associated CCS procedure categories.\n\n\n\nselect\n    aa.encounter_id,\n    aa.normalized_code as procedure_code,\n    case\n        when bb.icd_10_pcs is null then 0\n\telse 1\n    end as valid_icd_10_pcs_flag,\n    cc.ccs_procedure_category,\n    '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom\n    __dbt__cte__readmissions__stg_core__procedure aa\n    left join dev_coco.terminology.icd_10_pcs bb\n    on aa.normalized_code = bb.icd_10_pcs\n    left join dev_coco.readmissions._value_set_icd_10_pcs_to_ccs cc\n    on aa.normalized_code = cc.icd_10_pcs\nwhere aa.normalized_code_type = 'icd-10-pcs'", "relation_name": "dev_coco.readmissions._int_procedure_ccs"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.019535Z", "completed_at": "2024-10-11T23:52:45.043219Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.045933Z", "completed_at": "2024-10-11T23:52:45.045939Z"}], "thread_id": "Thread-2", "execution_time": 0.04790616035461426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__data_loss", "compiled": true, "compiled_code": "\n\nwith input_medical as (\n  select\n      cast('medical_claim' as TEXT) as table_name\n    , count(distinct patient_id) as patient_count\n    , count(distinct claim_id) as claim_count\n    , count(*) as record_count\n    , sum(paid_amount) as paid_amount\n    , sum(allowed_amount) as allowed_amount\n  from tuva.input_layer.medical_claim\n)\n\n, input_pharmacy as (\n  select\n      cast('pharmacy_claim' as TEXT) as table_name\n    , count(distinct patient_id) as patient_count\n    , count(distinct claim_id) as claim_count\n    , count(*) as record_count\n    , sum(paid_amount) as paid_amount\n    , sum(allowed_amount) as allowed_amount\n  from tuva.input_layer.pharmacy_claim\n)\n\n,input_eligibility as (\nselect\n    cast('eligibility' as TEXT) as table_name\n  , count(distinct patient_id) as patient_count\n  , count(distinct member_id || '-' || enrollment_start_date || '-' || enrollment_end_date || '-' || payer || '-' || plan) as span_count\nfrom tuva.input_layer.eligibility\n)\n\n  , input_member_months as (\n  select\n      cast('eligibility' as TEXT) as table_name\n    , count(*) as member_month_count\n  from dev_coco.data_quality.data_quality__eligibility_dq_stage e\n)\n\n-- Core layer CTEs\n, core_medical as (\n  select\n     cast( 'medical_claim' as TEXT) as table_name\n    , count(distinct patient_id) as patient_count\n    , count(distinct claim_id) as claim_count\n    , count(*) as record_count\n    , sum(paid_amount) as paid_amount\n    , sum(allowed_amount) as allowed_amount\n  from dev_coco.core.medical_claim\n)\n\n, core_pharmacy as (\n  select\n     cast( 'pharmacy_claim' as TEXT) as table_name\n    , count(distinct patient_id) as patient_count\n    , count(distinct claim_id) as claim_count\n    , count(*) as record_count\n    , sum(paid_amount) as paid_amount\n    , sum(allowed_amount) as allowed_amount\n  from dev_coco.core.pharmacy_claim\n)\n\n, core_eligibility as (\n  select\n    cast('eligibility'  as TEXT)as table_name\n    , count(distinct patient_id) as patient_count\n    , count(*) as span_count\n  from dev_coco.core.eligibility\n)\n\n, core_member_months as (\n  select\n    cast('member_months' as TEXT) as table_name\n    , count(*) as member_month_count\n  from dev_coco.core.member_months\n)\n\n,final as (\n-- Combining both input and core layers\nselect\n    input.table_name\n  , cast('Total Unique Patients' as TEXT) as metric\n  , input.patient_count as input_layer_value\n  , core.patient_count as core_value\nfrom input_medical as input\ninner join core_medical as core\n  on input.table_name = core.table_name\n\nunion all\n\nselect\n    input.table_name\n  , cast('Total Unique Claims' as TEXT) as metric\n  , input.claim_count as input_layer_value\n  , core.claim_count as core_value\nfrom input_medical as input\ninner join core_medical as core\n  on input.table_name = core.table_name\n\nunion all\n\nselect\n    input.table_name\n  , cast('Total Records' as TEXT) as metric\n  , input.record_count as input_layer_value\n  , core.record_count as core_value\nfrom input_medical as input\ninner join core_medical as core\n  on input.table_name = core.table_name\n\nunion all\n\nselect\n    input.table_name\n  , cast('Total Paid Amount' as TEXT) as metric\n  , input.paid_amount as input_layer_value\n  , core.paid_amount as core_value\nfrom input_medical as input\ninner join core_medical as core\n  on input.table_name = core.table_name\n\nunion all\n\nselect\n    input.table_name\n  , cast('Total Allowed Amount' as TEXT) as metric\n  , input.allowed_amount as input_layer_value\n  , core.allowed_amount as core_value\nfrom input_medical as input\ninner join core_medical as core\n  on input.table_name = core.table_name\n\n-- Pharmacy layer\nunion all\n\nselect\n    input.table_name\n  , cast('Total Unique Patients' as TEXT) as metric\n  , input.patient_count as input_layer_value\n  , core.patient_count as core_value\nfrom input_pharmacy as input\ninner join core_pharmacy as core\n  on input.table_name = core.table_name\n\nunion all\n\nselect\n    input.table_name\n  , cast('Total Unique Claims' as TEXT) as metric\n  , input.claim_count as input_layer_value\n  , core.claim_count as core_value\nfrom input_pharmacy as input\ninner join core_pharmacy as core\n  on input.table_name = core.table_name\n\nunion all\n\nselect\n    input.table_name\n  , cast('Total Records' as TEXT) as metric\n  , input.record_count as input_layer_value\n  , core.record_count as core_value\nfrom input_pharmacy as input\ninner join core_pharmacy as core\n  on input.table_name = core.table_name\n\nunion all\n\nselect\n    input.table_name\n  , cast('Total Paid Amount' as TEXT) as metric\n  , input.paid_amount as input_layer_value\n  , core.paid_amount as core_value\nfrom input_pharmacy as input\ninner join core_pharmacy as core\n  on input.table_name = core.table_name\n\nunion all\n\nselect\n    input.table_name\n  , cast('Total Allowed Amount' as TEXT) as metric\n  , input.allowed_amount as input_layer_value\n  , core.allowed_amount as core_value\nfrom input_pharmacy as input\ninner join core_pharmacy as core\n  on input.table_name = core.table_name\n\n-- Eligibility layer\nunion all\n\nselect\n    input.table_name\n  , cast('Total Unique Patients' as TEXT) as metric\n  , input.patient_count as input_layer_value\n  , core.patient_count as core_value\nfrom input_eligibility as input\ninner join core_eligibility as core\n  on input.table_name = core.table_name\n\n\nunion all\n\nselect\n    input.table_name\n  , cast('Total Unique Eligibility Spans' as TEXT) as metric\n  , input.span_count as input_layer_value\n  , core.span_count as core_value\nfrom input_eligibility as input\ninner join core_eligibility as core\n  on input.table_name = core.table_name\n\nunion all\n\nselect\n    input.table_name\n  , cast('Total Member Months' as TEXT) as metric\n  , input.member_month_count as input_layer_value\n  , core.member_month_count as core_value\nfrom input_member_months as input\ninner join core_member_months as core\n  on input.table_name = core.table_name\n\n)\n\nselect *\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom final", "relation_name": "dev_coco.data_quality.data_loss"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.037049Z", "completed_at": "2024-10-11T23:52:45.044999Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.051339Z", "completed_at": "2024-10-11T23:52:45.051348Z"}], "thread_id": "Thread-9", "execution_time": 0.05185103416442871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__data_source", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM dev_coco.core.medical_claim", "relation_name": "dev_coco.data_quality.mart_review__data_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.046559Z", "completed_at": "2024-10-11T23:52:45.053647Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.080831Z", "completed_at": "2024-10-11T23:52:45.080840Z"}], "thread_id": "Thread-5", "execution_time": 0.04426693916320801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__stg_medical_claim", "compiled": true, "compiled_code": "\n\nselect mc.*,\ncast(c.year_month_int as TEXT) as year_month\nFROM dev_coco.core.medical_claim  mc\nleft join dev_coco.reference_data.calendar c on coalesce(mc.claim_line_start_date,mc.claim_start_date) = c.full_date", "relation_name": "dev_coco.data_quality.mart_review__stg_medical_claim"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.066254Z", "completed_at": "2024-10-11T23:52:45.086914Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.094899Z", "completed_at": "2024-10-11T23:52:45.094907Z"}], "thread_id": "Thread-3", "execution_time": 0.04937100410461426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__medical_claim_medical_claim_id.74a5d63708", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    medical_claim_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.core.medical_claim\nwhere medical_claim_id is not null\ngroup by medical_claim_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.070526Z", "completed_at": "2024-10-11T23:52:45.087840Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.095952Z", "completed_at": "2024-10-11T23:52:45.095958Z"}], "thread_id": "Thread-4", "execution_time": 0.04536604881286621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__location", "compiled": true, "compiled_code": "\n\nselect * from dev_coco.core._stg_claims_location\nunion all\nselect * from dev_coco.core._stg_clinical_location\n\n", "relation_name": "dev_coco.core.location"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.075754Z", "completed_at": "2024-10-11T23:52:45.088330Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.110822Z", "completed_at": "2024-10-11T23:52:45.110832Z"}], "thread_id": "Thread-10", "execution_time": 0.0598909854888916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__practitioner", "compiled": true, "compiled_code": "\n\nselect * from dev_coco.core._stg_claims_practitioner\nunion all\nselect * from dev_coco.core._stg_clinical_practitioner\n\n", "relation_name": "dev_coco.core.practitioner"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.082134Z", "completed_at": "2024-10-11T23:52:45.096426Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.113099Z", "completed_at": "2024-10-11T23:52:45.113106Z"}], "thread_id": "Thread-7", "execution_time": 0.06037092208862305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ccsr__singular_condition_category", "compiled": true, "compiled_code": "\n\nselect \n    encounter_id,\n    claim_id,\n    patient_id,\n    ccsr_category,\n    ccsr_category_description,\n    ccsr_parent_category,\n    parent_category_description,\n    body_system,\n    '2023.1' as dxccsr_version,\n    '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ccsr.long_condition_category\nwhere\n        is_ip_default_category = 1\n        and condition_rank = 1", "relation_name": "dev_coco.ccsr.singular_condition_category"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.088669Z", "completed_at": "2024-10-11T23:52:45.112757Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.119975Z", "completed_at": "2024-10-11T23:52:45.119982Z"}], "thread_id": "Thread-2", "execution_time": 0.05012392997741699, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_all_conditions", "compiled": true, "compiled_code": "\n\nwith conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n        , data_source\n    from dev_coco.hcc_suspecting._int_prep_conditions\n\n)\n\n, seed_hcc_mapping as (\n\n    select\n          diagnosis_code\n        , cms_hcc_v28 as hcc_code\n    from dev_coco.hcc_suspecting._value_set_icd_10_cm_mappings\n    where cms_hcc_v28 is not null\n\n)\n\n, seed_hcc_descriptions as (\n\n    select distinct\n          hcc_code\n        , hcc_description\n    from dev_coco.hcc_suspecting._value_set_hcc_descriptions\n\n)\n\n, joined as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , conditions.condition_type\n        , conditions.code\n        , conditions.data_source\n        , seed_hcc_mapping.hcc_code\n        , seed_hcc_descriptions.hcc_description\n    from conditions\n         left join seed_hcc_mapping\n         on conditions.code = seed_hcc_mapping.diagnosis_code\n         left join seed_hcc_descriptions\n         on seed_hcc_mapping.hcc_code = seed_hcc_descriptions.hcc_code\n    where conditions.code_type = 'icd-10-cm'\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(recorded_date as date) as recorded_date\n        , cast(condition_type as TEXT) as condition_type\n        , cast(code as TEXT) as icd_10_cm_code\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        , cast(data_source as TEXT) as data_source\n    from joined\n\n)\n\nselect\n      patient_id\n    , recorded_date\n    , condition_type\n    , icd_10_cm_code\n    , hcc_code\n    , hcc_description\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.hcc_suspecting._int_all_conditions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.096687Z", "completed_at": "2024-10-11T23:52:45.114629Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.126958Z", "completed_at": "2024-10-11T23:52:45.126965Z"}], "thread_id": "Thread-9", "execution_time": 0.04570293426513672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide", "compiled": true, "compiled_code": "\n\nwith patients as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\n),\n\nobesity as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Obesity'\n),\n\n\nosteoarthritis as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Osteoarthritis'\n),\n\ncopd as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Chronic Obstructive Pulmonary Disease'\n),\n\nanxiety_disorders as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Anxiety Disorders'\n),\n\nckd as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Chronic Kidney Disease'\n),\n\nt2d as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Type 2 Diabetes Mellitus'\n),\n\ncll as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Chronic Lymphocytic Leukemia'\n),\n\ndysplipidemias as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Dyslipidemias'\n),\n\nhypertension as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Hypertension'\n),\n\natherosclerosis as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Atherosclerosis'\n),\n\ndementia as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Dementia'\n),\n\nrheumatoid_arthritis as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Rheumatoid Arthritis'\n),\n\nceliac as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Celiac Disease'\n),\n\nhip_fracture as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Hip Fracture'\n),\n\nimmunodeficiencies_and_white_blood_cell_disorders as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Specified Immunodeficiencies and White Blood Cell Disorders  (HCC v28 concept #115)'\n),\n\nasthma as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Asthma'\n),\n\nt1d as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Type 1 Diabetes Mellitus'\n),\n\nulcerative_colitis as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Ulcerative colitis'\n),\n\nchrohns as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Crohns Disease'\n),\n\nholicobacter as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Helicobacter pylori Infection'\n),\n\nbipolar as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Bipolar Affective Disorder'\n),\n\nheart_failure as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Heart Failure'\n),\n\ntabacco as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Tobacco Use'\n),\n\nlyme as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Lyme Disease'\n),\n\nbreast_cancer as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Breast Cancer'\n),\n\nosteoporosis as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Osteoporosis'\n),\n\npulmonary_embolism as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Pulmonary Embolism, Thrombotic or Unspecified'\n),\n\nschizophrenia as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Schizophrenia'\n),\n\natrial_fibrillation as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Atrial Fibrillation'\n),\n\ncolorectal_cancer as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Colorectal Cancer'\n),\n\ndepression as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Major Depressive Disorder'\n),\n\ndeep_vein_thrombosis as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Deep Vein Thrombosis of Extremities or Central Veins'\n),\n\nalzheimer as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Alzheimer Disease'\n),\n\nstroke as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Stroke'\n),\n\nmyocardial_infraction as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Myocardial Infarction'\n),\n\nopiod_use_disorder as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Opioid Use Disorder'\n),\n\nlung_cancer as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Lung cancer, primary or unspecified'\n),\n\nherpes as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Herpes Simplex Infection'\n),\n\nrickettsiosis as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Rickettsiosis'\n),\n\nms as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Multiple Sclerosis'\n),\n\nalchohol as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Alcohol Use Disorder'\n),\n\nadhd as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Attention Deficit-Hyperactivity Disorder'\n),\n\nhiv as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'HIV/AIDS  (HCC v28 concept #1)'\n),\n\nptsd as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Post-Traumatic Stress Disorder'\n),\n\nlupus as (\nselect distinct patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_long\nwhere condition = 'Systemic Lupus Erythematosus'\n)\n\n\n\n\nselect\n  patient_id,\n  case when patient_id in (select * from obesity) then 1\n       else 0\n  end as obesity,\n  case when patient_id in (select * from osteoarthritis) then 1\n       else 0\n  end as osteoarthritis,\n  case when patient_id in (select * from copd) then 1\n       else 0\n  end as copd,\n  case when patient_id in (select * from anxiety_disorders) then 1\n       else 0\n  end as anxiety_disorders,\n  case when patient_id in (select * from ckd) then 1\n       else 0\n  end as ckd,\n  case when patient_id in (select * from t2d) then 1\n       else 0\n  end as t2d,\n  case when patient_id in (select * from cll) then 1\n       else 0\n  end as cll,\n  case when patient_id in (select * from dysplipidemias) then 1\n       else 0\n  end as dysplipidemias,\n  case when patient_id in (select * from hypertension) then 1\n       else 0\n  end as hypertension,\n  case when patient_id in (select * from atherosclerosis) then 1\n       else 0\n  end as atherosclerosis,\n  case when patient_id in (select * from dementia) then 1\n       else 0\n  end as dementia,\n  case when patient_id in (select * from rheumatoid_arthritis) then 1\n       else 0\n  end as rheumatoid_arthritis,\n  case when patient_id in (select * from celiac) then 1\n       else 0\n  end as celiac,\n  case when patient_id in (select * from hip_fracture) then 1\n       else 0\n  end as hip_fracture,\n  case when patient_id in (select * from immunodeficiencies_and_white_blood_cell_disorders) then 1\n       else 0\n  end as immunodeficiencies_and_white_blood_cell_disorders,\n  case when patient_id in (select * from asthma) then 1\n       else 0\n  end asthma,\n  case when patient_id in (select * from t1d) then 1\n       else 0\n  end as t1d,\n  case when patient_id in (select * from ulcerative_colitis) then 1\n       else 0\n  end as ulcerative_colitis,\n  case when patient_id in (select * from chrohns) then 1\n       else 0\n  end as chrohns,\n  case when patient_id in (select * from holicobacter) then 1\n       else 0\n  end as holicobacter,\n  case when patient_id in (select * from bipolar) then 1\n       else 0\n  end as bipolar,\n  case when patient_id in (select * from heart_failure) then 1\n       else 0\n  end as heart_failure,\n  case when patient_id in (select * from tabacco) then 1\n       else 0\n  end as tabacco,\n  case when patient_id in (select * from lyme) then 1\n       else 0\n  end as lyme,\n  case when patient_id in (select * from breast_cancer) then 1\n       else 0\n  end as breast_cancer,\n  case when patient_id in (select * from osteoporosis) then 1\n       else 0\n  end as osteoporosis,\n  case when patient_id in (select * from pulmonary_embolism) then 1\n       else 0\n  end as pulmonary_embolism,\n  case when patient_id in (select * from schizophrenia) then 1\n       else 0\n  end as schizophrenia,\n  case when patient_id in (select * from atrial_fibrillation) then 1\n       else 0\n  end as atrial_fibrillation,\n  case when patient_id in (select * from colorectal_cancer) then 1\n       else 0\n  end as colorectal_cancer,\n  case when patient_id in (select * from depression) then 1\n       else 0\n  end as depression,\n  case when patient_id in (select * from deep_vein_thrombosis) then 1\n       else 0\n  end as deep_vein_thrombosis,\n  case when patient_id in (select * from alzheimer) then 1\n       else 0\n  end as alzheimer,\n  case when patient_id in (select * from stroke) then 1\n       else 0\n  end as stroke,\n  case when patient_id in (select * from myocardial_infraction) then 1\n       else 0\n  end as myocardial_infraction,\n  case when patient_id in (select * from opiod_use_disorder) then 1\n       else 0\n  end as opiod_use_disorder,\n  case when patient_id in (select * from lung_cancer) then 1\n       else 0\n  end as lung_cancer,\n  case when patient_id in (select * from herpes) then 1\n       else 0\n  end as herpes,\n  case when patient_id in (select * from rickettsiosis) then 1\n       else 0\n  end as rickettsiosis,\n  case when patient_id in (select * from ms) then 1\n       else 0\n  end as ms,\n  case when patient_id in (select * from alchohol) then 1\n       else 0\n  end as alchohol,\n  case when patient_id in (select * from adhd) then 1\n       else 0\n  end as adhd,\n  case when patient_id in (select * from hiv) then 1\n       else 0\n  end as hiv,\n  case when patient_id in (select * from ptsd) then 1\n       else 0\n  end as ptsd,\n  case when patient_id in (select * from lupus) then 1\n       else 0\n  end as lupus,\n  '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n\nfrom patients", "relation_name": "dev_coco.chronic_conditions.tuva_chronic_conditions_wide"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.114888Z", "completed_at": "2024-10-11T23:52:45.128722Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.178584Z", "completed_at": "2024-10-11T23:52:45.178595Z"}], "thread_id": "Thread-5", "execution_time": 0.08314919471740723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__number_of_conditions", "compiled": true, "compiled_code": "\n\nwith xwalk as (\n    select distinct patient_id, data_source\n    from dev_coco.core.patient\n),\ncte as (\n    select l.patient_id,\n           x.data_source,\n           count(*) as numofconditions\n    from dev_coco.chronic_conditions.tuva_chronic_conditions_long l\n    left join xwalk x on l.patient_id = x.patient_id\n    group by l.patient_id, x.data_source\n)\nselect p.patient_id,\n       p.data_source,\n        p.patient_id || '|' || p.data_source as patient_source_key,\n       coalesce(cte.numofconditions, 0) as numofconditions\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient p\nleft join cte on p.patient_id = cte.patient_id and p.data_source = cte.data_source", "relation_name": "dev_coco.data_quality.mart_review__number_of_conditions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.121060Z", "completed_at": "2024-10-11T23:52:45.134215Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.201784Z", "completed_at": "2024-10-11T23:52:45.201792Z"}], "thread_id": "Thread-6", "execution_time": 0.0904550552368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__tuva_chronic_conditions", "compiled": true, "compiled_code": "\n\nwith cte as (\n    select distinct\n        patient_id\n    from dev_coco.chronic_conditions.tuva_chronic_conditions_long\n)\n\n, patientxwalk as (\n    select distinct\n        patient_id\n      , data_source\n    from dev_coco.core.patient\n)\n\n, result as (\n    select\n        l.patient_id\n      , p.data_source\n      , l.condition\n    from dev_coco.chronic_conditions.tuva_chronic_conditions_long as l\n    inner join patientxwalk as p\n      on l.patient_id = p.patient_id\n\n    union all\n\n    select\n        p.patient_id\n      , p.data_source\n      , 'No Chronic Conditions' as condition\n    from dev_coco.core.patient as p\n    left join cte\n      on p.patient_id = cte.patient_id\n    where cte.patient_id is null\n)\n\nselect *\n   , patient_id || '|' || data_source as patient_source_key\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom result", "relation_name": "dev_coco.data_quality.mart_review__tuva_chronic_conditions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.129067Z", "completed_at": "2024-10-11T23:52:45.202684Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.234832Z", "completed_at": "2024-10-11T23:52:45.234841Z"}], "thread_id": "Thread-3", "execution_time": 0.12058806419372559, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_chronic_conditions__tuva_chronic_conditions_long_patient_id__condition.9c8c725ff2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        patient_id, condition\n    from dev_coco.chronic_conditions.tuva_chronic_conditions_long\n    group by patient_id, condition\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.134838Z", "completed_at": "2024-10-11T23:52:45.233832Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.259609Z", "completed_at": "2024-10-11T23:52:45.259618Z"}], "thread_id": "Thread-4", "execution_time": 0.14001893997192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__cms_chronic_conditions__stg_core__condition as (\n\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\nwhere claim_id is not null\n),  __dbt__cte__cms_chronic_conditions__stg_core__medical_claim as (\n\n\nselect\n      claim_id\n    , patient_id\n    , claim_start_date\n    , ms_drg_code\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n),  __dbt__cte__cms_chronic_conditions__stg_core__procedure as (\n\n\nselect\n      claim_id\n    , patient_id\n    , procedure_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\nwhere claim_id is not null\n), chronic_conditions as (\n\n    select * from dev_coco.chronic_conditions._value_set_cms_chronic_conditions_hierarchy\n\n)\n\n, patient_conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_core__condition\n\n)\n\n, patient_ms_drgs as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date as start_date\n        , 'MS-DRG' as code_type\n        , ms_drg_code as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_core__medical_claim\n\n)\n\n, patient_procedures as (\n\n    select\n          patient_id\n        , claim_id\n        , procedure_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_core__procedure\n\n)\n\n, inclusions_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.additional_logic = 'None'\n\n)\n\n, inclusions_ms_drg as (\n\n    select\n          patient_ms_drgs.patient_id\n        , patient_ms_drgs.claim_id\n        , patient_ms_drgs.start_date\n        , patient_ms_drgs.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_ms_drgs\n         inner join chronic_conditions\n             on patient_ms_drgs.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'MS-DRG'\n    and chronic_conditions.additional_logic = 'None'\n\n)\n\n, inclusions_procedure as (\n\n    select\n          patient_procedures.patient_id\n        , patient_procedures.claim_id\n        , patient_procedures.start_date\n        , patient_procedures.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_procedures\n         inner join chronic_conditions\n             on patient_procedures.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system in ('ICD-10-PCS', 'HCPCS')\n    and chronic_conditions.additional_logic = 'None'\n\n)\n\n, exclusions_diagnosis as (\n\n    select distinct\n          patient_conditions.claim_id\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Exclude'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n\n)\n\n\n, inclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_procedure\n    union distinct\n    select * from inclusions_ms_drg\n\n)\n\n\nselect distinct\n      cast(inclusions_unioned.patient_id as TEXT) as patient_id\n    , cast(inclusions_unioned.claim_id as TEXT) as claim_id\n    , cast(inclusions_unioned.start_date as date) as start_date\n    , cast(inclusions_unioned.chronic_condition_type as TEXT) as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as TEXT) as condition_category\n    , cast(inclusions_unioned.condition as TEXT) as condition\n    , cast(inclusions_unioned.data_source as TEXT) as data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom inclusions_unioned\n     left join exclusions_diagnosis\n         on inclusions_unioned.claim_id = exclusions_diagnosis.claim_id\n         and inclusions_unioned.condition = exclusions_diagnosis.condition\nwhere exclusions_diagnosis.claim_id is null", "relation_name": "dev_coco.chronic_conditions._int_cms_chronic_condition_all"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.159839Z", "completed_at": "2024-10-11T23:52:45.235377Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.265471Z", "completed_at": "2024-10-11T23:52:45.265477Z"}], "thread_id": "Thread-10", "execution_time": 0.14478278160095215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids", "compiled": true, "compiled_code": "with  __dbt__cte__cms_chronic_conditions__stg_core__condition as (\n\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\nwhere claim_id is not null\n),  __dbt__cte__cms_chronic_conditions__stg_core__medical_claim as (\n\n\nselect\n      claim_id\n    , patient_id\n    , claim_start_date\n    , ms_drg_code\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n), chronic_conditions as (\n\n    select * from dev_coco.chronic_conditions._value_set_cms_chronic_conditions_hierarchy\n    where condition = 'Human Immunodeficiency Virus and/or Acquired Immunodeficiency Syndrome (HIV/AIDS)'\n\n)\n\n, patient_conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_core__condition\n\n)\n\n, patient_ms_drgs as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date as start_date\n        , 'MS-DRG' as code_type\n        , ms_drg_code as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_core__medical_claim\n\n)\n\n/*\n    Exception logic: a claim with the diagnosis code R75 requires a second\n    qualifying claim that is not R75 (a screening code)\n\n    This CTE excludes encounters with the exception code. Those encounters\n    will be evaluated separately.\n*/\n, inclusions_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.code <> 'R75'\n\n)\n\n, inclusions_ms_drg as (\n\n    select\n          patient_ms_drgs.patient_id\n        , patient_ms_drgs.claim_id\n        , patient_ms_drgs.start_date\n        , patient_ms_drgs.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_ms_drgs\n         inner join chronic_conditions\n             on patient_ms_drgs.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'MS-DRG'\n\n)\n\n/*\n    Exception logic: a claim with the diagnosis code R75 requires a second\n    qualifying claim that is not R75 (a screening code)\n\n    This CTE includes encounters with the exception code only where that\n    patient has another encounter that is not R75.\n*/\n, exception_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n         inner join inclusions_diagnosis\n             on patient_conditions.patient_id = inclusions_diagnosis.patient_id\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.code = 'R75'\n\n)\n\n\n, inclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_ms_drg\n    union distinct\n    select * from exception_diagnosis\n\n)\n\n\nselect distinct\n      cast(inclusions_unioned.patient_id as TEXT) as patient_id\n    , cast(inclusions_unioned.claim_id as TEXT) as claim_id\n    , cast(inclusions_unioned.start_date as date) as start_date\n    , cast(inclusions_unioned.chronic_condition_type as TEXT) as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as TEXT) as condition_category\n    , cast(inclusions_unioned.condition as TEXT) as condition\n    , cast(inclusions_unioned.data_source as TEXT) as data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom inclusions_unioned", "relation_name": "dev_coco.chronic_conditions._int_cms_chronic_condition_hiv_aids"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.203198Z", "completed_at": "2024-10-11T23:52:45.264850Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.267302Z", "completed_at": "2024-10-11T23:52:45.267308Z"}], "thread_id": "Thread-7", "execution_time": 0.1392519474029541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_eligible_conditions", "compiled": true, "compiled_code": "\n/*\nSteps for staging condition data:\n    1) Filter to risk-adjustable claims per claim type for the collection year.\n    2) Gather diagnosis codes from condition for the eligible claims.\n    3) Map and filter diagnosis codes to HCCs\n\nClaims filtering logic:\n - Professional:\n    - CPT/HCPCS in CPT/HCPCS seed file from CMS\n - Inpatient:\n    - Bill type code in (11X, 41X)\n - Outpatient:\n    - Bill type code in (12X, 13X, 43X, 71X, 73X, 76X, 77X, 85X)\n    - CPT/HCPCS in CPT/HCPCS seed file from CMS\n\nJinja is used to set payment year variable.\n - The payment_year var has been set here so it gets compiled.\n - The collection year is one year prior to the payment year.\n*/\n\nwith  __dbt__cte__cms_hcc__stg_core__medical_claim as (\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , claim_start_date\n    , claim_end_date\n    , bill_type_code\n    , hcpcs_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n),  __dbt__cte__cms_hcc__stg_core__condition as (\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , condition_type\n    , normalized_code_type as code_type\n    , normalized_code as code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n), medical_claims as (\n\n    select\n          claim_id\n        , claim_line_number\n        , claim_type\n        , patient_id\n        , claim_start_date\n        , claim_end_date\n        , bill_type_code\n        , hcpcs_code\n    from __dbt__cte__cms_hcc__stg_core__medical_claim\n\n)\n\n, conditions as (\n\n    select\n          claim_id\n        , patient_id\n        , code\n    from __dbt__cte__cms_hcc__stg_core__condition\n    where code_type = 'icd-10-cm'\n\n)\n\n, cpt_hcpcs_list as (\n\n    select\n          payment_year\n        , hcpcs_cpt_code\n    from dev_coco.cms_hcc._value_set_cpt_hcpcs\n\n)\n\n, professional_claims as (\n\n    select\n          medical_claims.claim_id\n        , medical_claims.claim_line_number\n        , medical_claims.claim_type\n        , medical_claims.patient_id\n        , medical_claims.claim_start_date\n        , medical_claims.claim_end_date\n        , medical_claims.bill_type_code\n        , medical_claims.hcpcs_code\n    from medical_claims\n        inner join cpt_hcpcs_list\n            on medical_claims.hcpcs_code = cpt_hcpcs_list.hcpcs_cpt_code\n    where claim_type = 'professional'\n              and date_part('year', claim_end_date) = 2023\n        and cpt_hcpcs_list.payment_year = 2024\n\n)\n\n\n, inpatient_claims as (\n\n    select\n          medical_claims.claim_id\n        , medical_claims.claim_line_number\n        , medical_claims.claim_type\n        , medical_claims.patient_id\n        , medical_claims.claim_start_date\n        , medical_claims.claim_end_date\n        , medical_claims.bill_type_code\n        , medical_claims.hcpcs_code\n    from medical_claims\n    where claim_type = 'institutional'\n        \n            and extract(year from claim_end_date) = 2023\n        \n        and substring(bill_type_code, 1, 2) in ('11','41')\n\n)\n\n, outpatient_claims as (\n\n    select\n          medical_claims.claim_id\n        , medical_claims.claim_line_number\n        , medical_claims.claim_type\n        , medical_claims.patient_id\n        , medical_claims.claim_start_date\n        , medical_claims.claim_end_date\n        , medical_claims.bill_type_code\n        , medical_claims.hcpcs_code\n    from medical_claims\n        inner join cpt_hcpcs_list\n            on medical_claims.hcpcs_code = cpt_hcpcs_list.hcpcs_cpt_code\n    where claim_type = 'institutional'\n        \n            and extract(year from claim_end_date) = 2023\n        \n        and cpt_hcpcs_list.payment_year = 2024\n        and substring(bill_type_code, 1, 2) in ('12','13','43','71','73','76','77','85')\n\n)\n\n, eligible_claims as (\n\n    select * from professional_claims\n    union all\n    select * from inpatient_claims\n    union all\n    select * from outpatient_claims\n\n)\n\n, eligible_conditions as (\n\n    select distinct\n          eligible_claims.claim_id\n        , eligible_claims.patient_id\n        , conditions.code\n    from eligible_claims\n        inner join conditions\n            on eligible_claims.claim_id = conditions.claim_id\n            and eligible_claims.patient_id = conditions.patient_id\n\n)\n\n, add_data_types as (\n\n    select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(code as TEXT) as condition_code\n        , cast('2024' as integer) as payment_year\n    from eligible_conditions\n\n)\n\nselect\n      patient_id\n    , condition_code\n    , payment_year\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.cms_hcc._int_eligible_conditions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.235640Z", "completed_at": "2024-10-11T23:52:45.267036Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.280142Z", "completed_at": "2024-10-11T23:52:45.280151Z"}], "thread_id": "Thread-2", "execution_time": 0.13338088989257812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__financial_pmpm__stg_medical_claim as (\n\n\n\nSELECT\n    patient_id\n    , claim_id\n    , claim_line_number\n    , claim_start_date\n    , claim_end_date\n    , service_category_1\n    , service_category_2\n    , paid_amount\n    , allowed_amount\n    , payer\n    , plan\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n),  __dbt__cte__financial_pmpm__stg_pharmacy_claim as (\n\n\n\nSELECT\n    patient_id\n    , dispensing_date\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , payer\n    , plan\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.pharmacy_claim\n), claims_with_service_categories as (\n  select\n      patient_id\n    , payer\n    , plan\n    , service_category_1\n    , service_category_2\n    , coalesce(claim_start_date,claim_end_date) as claim_date\n    , paid_amount\n    , allowed_amount\n    , data_source\n  from __dbt__cte__financial_pmpm__stg_medical_claim\n)\n\n, medical_claims_year_month as (\n  select\n      patient_id\n    , payer\n    , plan\n    , service_category_1\n    , service_category_2\n    , date_part('year', claim_date) || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || date_part('month', claim_date),\n            2\n        )\n    end as year_month\n    , paid_amount\n    , allowed_amount\n    , data_source\n  from claims_with_service_categories\n)\n\n, rx_claims as (\n  select\n      patient_id\n    , payer\n    , plan\n    , 'pharmacy' as service_category_1\n    , cast(null as TEXT) as service_category_2\n    , coalesce(dispensing_date, paid_date) as claim_date\n    , paid_amount\n    , allowed_amount\n    , data_source\n  from __dbt__cte__financial_pmpm__stg_pharmacy_claim\n)\n\n, rx_claims_year_month as (\n  select\n      patient_id\n    , payer\n    , plan\n    , service_category_1\n    , service_category_2\n    , date_part('year', claim_date) || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '0' || date_part('month', claim_date),\n            2\n        )\n    end as year_month\n    , paid_amount\n    , allowed_amount\n    , data_source\n  from rx_claims\n)\n\n, combine_medical_and_rx as (\nselect *\nfrom medical_claims_year_month\n\nunion all\n\nselect *\nfrom rx_claims_year_month\n)\n\nselect\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_1\n  , service_category_2\n  , sum(paid_amount) as total_paid\n  , sum(allowed_amount) as total_allowed\n  , data_source\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n  from combine_medical_and_rx\ngroup by\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_1\n  , service_category_2\n  , data_source", "relation_name": "dev_coco.financial_pmpm._int_patient_spend_with_service_categories"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.260651Z", "completed_at": "2024-10-11T23:52:45.268402Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.314188Z", "completed_at": "2024-10-11T23:52:45.314196Z"}], "thread_id": "Thread-9", "execution_time": 0.11191582679748535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__claims_with_enrollment", "compiled": true, "compiled_code": "\n\nwith enrollment_stage as(\nSELECT\n    mc.data_source,\n    mc.year_month,\n    SUM(CASE WHEN mm.patient_id IS NOT NULL THEN 1 ELSE 0 END) AS claims_with_enrollment,\n    COUNT(*) AS claims\nFROM dev_coco.data_quality.mart_review__stg_medical_claim mc\nLEFT JOIN dev_coco.core.member_months mm\n    ON mc.patient_id = mm.patient_id\n    AND mc.data_source = mm.data_source\n    AND mc.year_month = mm.year_month\nGROUP BY mc.data_source\n, mc.year_month\n)\n\nselect\n    data_source\n    , year_month\n    , claims_with_enrollment\n    , claims\n    , cast(claims_with_enrollment / claims as numeric(28,6) ) AS percentage_claims_with_enrollment\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom enrollment_stage", "relation_name": "dev_coco.data_quality.mart_review__claims_with_enrollment"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.268672Z", "completed_at": "2024-10-11T23:52:45.315492Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.375025Z", "completed_at": "2024-10-11T23:52:45.375033Z"}], "thread_id": "Thread-5", "execution_time": 0.1275477409362793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__members_with_claims", "compiled": true, "compiled_code": "\n\nWITH medical_claim AS (\n    SELECT\n        data_source,\n        patient_id,\n        year_month,\n        SUM(paid_amount) AS paid_amount\n    FROM dev_coco.data_quality.mart_review__stg_medical_claim\n    GROUP BY data_source\n    , patient_id\n    , year_month\n)\n\n,pharmacy_claim AS (\n    SELECT\n        data_source,\n        patient_id,\n        year_month,\n        SUM(paid_amount) AS paid_amount\n    FROM dev_coco.data_quality.mart_review__stg_pharmacy_claim\n    GROUP BY data_source\n    , patient_id\n    , year_month\n)\n, final as(\nSELECT\n    mm.data_source,\n    mm.year_month,\n    SUM(CASE WHEN mc.patient_id IS NOT NULL THEN 1 ELSE 0 END) AS members_with_medical_claims,\n    SUM(CASE WHEN pc.patient_id IS NOT NULL THEN 1 ELSE 0 END) AS members_with_pharmacy_claims,\n    SUM(CASE WHEN pc.patient_id IS NOT NULL THEN 1\n             WHEN mc.patient_id is not null THEN 1 ELSE 0 END) AS members_with_claims,\n    COUNT(*) AS total_member_months\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM dev_coco.core.member_months mm\nLEFT JOIN medical_claim mc\n    ON mm.patient_id = mc.patient_id\n    AND mm.data_source = mc.data_source\n    AND mm.year_month = mc.year_month\nLEFT JOIN pharmacy_claim pc\n    ON mm.patient_id = pc.patient_id\n    AND mm.data_source = pc.data_source\n    AND mm.year_month = pc.year_month\nGROUP BY mm.data_source, mm.year_month\n)\n\nselect\n    data_source\n    , year_month\n    , members_with_medical_claims\n    , members_with_pharmacy_claims\n    , members_with_claims\n    , total_member_months\n    , cast(members_with_claims/ total_member_months as numeric(28,6)) as percent_members_with_claims\n    , cast(members_with_medical_claims/ total_member_months  as numeric(28,6)) as percent_members_with_medical_claims\n    , cast(members_with_pharmacy_claims/ total_member_months as numeric(28,6))  as  percent_members_with_pharmacy_claims\nfrom final", "relation_name": "dev_coco.data_quality.mart_review__members_with_claims"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.273839Z", "completed_at": "2024-10-11T23:52:45.337647Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.410587Z", "completed_at": "2024-10-11T23:52:45.410596Z"}], "thread_id": "Thread-6", "execution_time": 0.15041279792785645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer", "compiled": true, "compiled_code": "\n\n/*\nDENOMINATOR EXCLUSIONS:\nPatients with a diagnosis or past history of total colectomy or colorectal cancer: G9711\n*/\n\n\nwith  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , observation_date\n    , result\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , normalized_description\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.observation\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n), exclusion_codes as (\n\n    select\n          code\n        , case code_system\n            when 'SNOMEDCT' then 'snomed-ct'\n            when 'ICD9CM' then 'icd-9-cm'\n            when 'ICD10CM' then 'icd-10-cm'\n            when 'CPT' then 'hcpcs'\n            when 'ICD10PCS' then 'icd-10-pcs'\n          else lower(code_system) \n          end as code_system\n        , concept_name\n    From dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n          'malignant neoplasm of colon'\n        , 'total colectomy'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name as concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name as concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name as concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name as concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, patients_with_exclusions as(\n    select patient_id\n        , recorded_date as exclusion_date\n        , concept_name as exclusion_reason\n    from condition_exclusions\n\n    union all\n\n    select patient_id\n        , coalesce(claim_end_date, claim_start_date) as exclusion_date\n        , concept_name as exclusion_reason\n    from med_claim_exclusions\n\n    union all\n\n    select patient_id\n        , observation_date as exclusion_date\n        , concept_name as exclusion_reason\n    from observation_exclusions\n\n    union all\n\n    select patient_id\n        , procedure_date as exclusion_date\n        , concept_name as exclusion_reason\n    from procedure_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , 'measure specific exclusion for historical record of colectomy cancer' as exclusion_type\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom patients_with_exclusions", "relation_name": "dev_coco.quality_measures._int_nqf0034_exclude_colectomy_cancer"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.316220Z", "completed_at": "2024-10-11T23:52:45.412813Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.425366Z", "completed_at": "2024-10-11T23:52:45.425377Z"}], "thread_id": "Thread-3", "execution_time": 0.15767288208007812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_shared_exclusions_frailty", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n),  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , observation_date\n    , result\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , normalized_description\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.observation\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n), patients as (\n\n    select\n          patient_id\n    from __dbt__cte__quality_measures__stg_core__patient\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'frailty device'\n        , 'frailty diagnosis'\n        , 'frailty encounter'\n        , 'frailty symptom'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n         inner join exclusion_codes\n             on conditions.code = exclusion_codes.code\n             and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, patients_with_frailty as (\n\n    select\n          patients.patient_id\n        , condition_exclusions.recorded_date as exclusion_date\n        , condition_exclusions.concept_name as exclusion_reason\n    from patients\n         inner join condition_exclusions\n            on patients.patient_id = condition_exclusions.patient_id\n\n    union all\n\n    select\n          patients.patient_id\n        , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , med_claim_exclusions.concept_name as exclusion_reason\n    from patients\n         inner join med_claim_exclusions\n            on patients.patient_id = med_claim_exclusions.patient_id\n\n    union all\n\n    select\n          patients.patient_id\n        , observation_exclusions.observation_date as exclusion_date\n        , observation_exclusions.concept_name as exclusion_reason\n    from patients\n         inner join observation_exclusions\n            on patients.patient_id = observation_exclusions.patient_id\n\n    union all\n\n    select\n          patients.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , procedure_exclusions.concept_name as exclusion_reason\n    from patients\n         inner join procedure_exclusions\n            on patients.patient_id = procedure_exclusions.patient_id\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom patients_with_frailty", "relation_name": "dev_coco.quality_measures._int_shared_exclusions_frailty"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.394289Z", "completed_at": "2024-10-11T23:52:45.418895Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.430677Z", "completed_at": "2024-10-11T23:52:45.430685Z"}], "thread_id": "Thread-10", "execution_time": 0.11691689491271973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_shared_exclusions_institutional_snp", "compiled": true, "compiled_code": "\n\n/*\n    patients in institutional special needs plans (snp)\n    or residing in long term care\n\n    while referencing this model, patients greater or equal than 66 years of age should be taken\n\n    filtering out age from this model has been stripped out as different measures calculate age varingly\n\n    future enhancement: group claims into encounters\n*/\n\nwith  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n), patients as (\n\n    select\n          patient_id\n    from __dbt__cte__quality_measures__stg_core__patient\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, exclusions as (\n\n    select\n          patients.patient_id\n        , coalesce(\n              medical_claim.claim_start_date\n            , medical_claim.claim_end_date\n          ) as exclusion_date\n        , 'institutional or long term care' as exclusion_reason\n    from patients\n         inner join medical_claim\n         on patients.patient_id = medical_claim.patient_id\n    where place_of_service_code in ('32', '33', '34', '54', '56')\n    and datediff(\n        day,\n        medical_claim.claim_start_date,\n        medical_claim.claim_end_date\n        ) >= 90\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , 'institutional_snp' as exclusion_type\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom exclusions", "relation_name": "dev_coco.quality_measures._int_shared_exclusions_institutional_snp"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.356137Z", "completed_at": "2024-10-11T23:52:45.419194Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.431220Z", "completed_at": "2024-10-11T23:52:45.431225Z"}], "thread_id": "Thread-4", "execution_time": 0.15776777267456055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_shared_exclusions_hospice_palliative", "compiled": true, "compiled_code": "\n\n/*\nDENOMINATOR EXCLUSIONS:\nPatient was provided hospice services any time during the measurement period: G9687\n*/\n\n\nwith  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , observation_date\n    , result\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , normalized_description\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.observation\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n), exclusion_codes as (\n\n    select\n          code\n        , case code_system\n            when 'SNOMEDCT' then 'snomed-ct'\n            when 'ICD9CM' then 'icd-9-cm'\n            when 'ICD10CM' then 'icd-10-cm'\n            when 'CPT' then 'hcpcs'\n            when 'ICD10PCS' then 'icd-10-pcs'\n          else lower(code_system) end as code_system\n        , concept_name\n    From dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n            'hospice encounter'\n          , 'hospice care ambulatory'\n          , 'hospice diagnosis'\n          , 'palliative care encounter'\n          , 'palliative care diagnosis'\n          , 'palliative care intervention'\n    )\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition \n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name as concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name as concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name as concept_name\n    from observations\n    inner join exclusion_codes\n        on observations.code = exclusion_codes.code\n        and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name as concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, patients_with_exclusions as(\n    \n    select patient_id\n        , recorded_date as exclusion_date\n        , concept_name as exclusion_reason\n    from condition_exclusions\n\n    union all\n\n    select patient_id\n        , coalesce(claim_end_date, claim_start_date) as exclusion_date\n        , concept_name as exclusion_reason\n    from med_claim_exclusions\n\n    union all\n\n    select patient_id\n        , observation_date as exclusion_date\n        , concept_name as exclusion_reason\n    from observation_exclusions\n\n    union all\n\n    select patient_id\n        , procedure_date as exclusion_date\n        , concept_name as exclusion_reason\n    from procedure_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , 'hospice_palliative' as exclusion_type\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom patients_with_exclusions", "relation_name": "dev_coco.quality_measures._int_shared_exclusions_hospice_palliative"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.413103Z", "completed_at": "2024-10-11T23:52:45.430391Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.433431Z", "completed_at": "2024-10-11T23:52:45.433437Z"}], "thread_id": "Thread-7", "execution_time": 0.11779093742370605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__location_location_id.dc12ec8d3a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.core.location\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.419456Z", "completed_at": "2024-10-11T23:52:45.432600Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.447234Z", "completed_at": "2024-10-11T23:52:45.447244Z"}], "thread_id": "Thread-2", "execution_time": 0.08486104011535645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__pharmacy", "compiled": true, "compiled_code": "\n\n\nWITH dedup_prac AS (\n    SELECT DISTINCT practitioner_id,\n                    provider_first_name,\n                    provider_last_name,\n                    specialty\n    FROM dev_coco.core.practitioner\n),\ndedup_loc AS (\n    SELECT DISTINCT location_id,\n                    npi,\n                    name\n    FROM dev_coco.core.location\n)\n\nSELECT\n    p.claim_id,\n    p.claim_line_number,\n    p.patient_id,\n    p.data_source,\n    p.patient_id || '|' || p.data_source as patient_source_key,\n    p.ndc_code,\n    COALESCE(n.fda_description, n.rxnorm_description) AS ndc_description,\n    p.paid_amount,\n    p.allowed_amount,\n    p.prescribing_provider_id,\n    p.prescribing_provider_name,\n    prac.specialty AS prescribing_specialty,\n    p.dispensing_provider_id,\n    p.dispensing_provider_name,\n    p.paid_date,\n    p.dispensing_date,\n    p.days_supply,\n    n.rxcui,\n    n.rxnorm_description,\n    r.brand_name,\n    r.brand_vs_generic,\n    r.ingredient_name,\n    a.atc_1_name,\n    a.atc_2_name,\n    a.atc_3_name,\n    a.atc_4_name\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM dev_coco.core.pharmacy_claim p\nLEFT JOIN dev_coco.terminology.ndc n ON p.ndc_code = n.ndc\nLEFT JOIN dev_coco.terminology.rxnorm_brand_generic r ON n.rxcui = r.product_rxcui\nLEFT JOIN dev_coco.terminology.rxnorm_to_atc a ON n.rxcui = a.rxcui\nLEFT JOIN dedup_prac prac ON p.prescribing_provider_id = prac.practitioner_id\nLEFT JOIN dedup_loc l ON p.dispensing_provider_id = l.location_id", "relation_name": "dev_coco.data_quality.mart_review__pharmacy"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.426659Z", "completed_at": "2024-10-11T23:52:45.435054Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.452298Z", "completed_at": "2024-10-11T23:52:45.452305Z"}], "thread_id": "Thread-9", "execution_time": 0.04116487503051758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__practitioner_practitioner_id.24d565a6b6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    practitioner_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.core.practitioner\nwhere practitioner_id is not null\ngroup by practitioner_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.435310Z", "completed_at": "2024-10-11T23:52:45.454119Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.473268Z", "completed_at": "2024-10-11T23:52:45.473279Z"}], "thread_id": "Thread-5", "execution_time": 0.04835987091064453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_patient_hcc_history", "compiled": true, "compiled_code": "\n\nwith all_conditions as (\n\n    select\n          patient_id\n        , data_source\n        , recorded_date\n        , condition_type\n        , icd_10_cm_code\n        , hcc_code\n        , hcc_description\n    from dev_coco.hcc_suspecting._int_all_conditions\n    where hcc_code is not null\n\n)\n\n, hcc_grouped as (\n\n    select\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , min(recorded_date) as first_recorded\n        , max(recorded_date) as last_recorded\n    from all_conditions\n    where hcc_code is not null\n    group by\n          patient_id\n        , hcc_code\n        , hcc_description\n        , data_source\n\n)\n\n, hcc_billed as (\n\n    select\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , max(recorded_date) as last_billed\n    from all_conditions\n    where hcc_code is not null\n    and lower(condition_type) <> 'problem'\n    group by\n          patient_id\n        , hcc_code\n        , hcc_description\n        , data_source\n\n)\n\n, add_flag as (\n\n    select\n          hcc_grouped.patient_id\n        , hcc_grouped.data_source\n        , hcc_grouped.hcc_code\n        , hcc_grouped.hcc_description\n        , hcc_grouped.first_recorded\n        , hcc_grouped.last_recorded\n        , hcc_billed.last_billed\n        , case\n            when date_part('year', hcc_billed.last_billed) = date_part('year', convert_timezone('UTC', current_timestamp()))\n            then 1\n            else 0\n          end as current_year_billed\n\n    from hcc_grouped\n         left join hcc_billed\n         on hcc_grouped.patient_id = hcc_billed.patient_id\n         and hcc_grouped.hcc_code = hcc_billed.hcc_code\n         and hcc_grouped.data_source = hcc_billed.data_source\n\n)\n\n, all_conditions_with_flag as (\n\n    select distinct\n          all_conditions.patient_id\n        , all_conditions.data_source\n        , all_conditions.recorded_date\n        , all_conditions.condition_type\n        , all_conditions.icd_10_cm_code\n        , all_conditions.hcc_code\n        , all_conditions.hcc_description\n        , add_flag.first_recorded\n        , add_flag.last_recorded\n        , add_flag.last_billed\n        , add_flag.current_year_billed\n        , cast('Prior coding history' as TEXT) as reason\n        , icd_10_cm_code || case when last_billed is not null then ' last billed on ' || last_billed when last_billed is null and last_recorded is not null then ' last recorded on ' || last_recorded else ' (missing recorded and billing dates) ' end as contributing_factor\n        , coalesce(last_billed, last_recorded) as condition_date\n    from all_conditions\n         left join add_flag\n            on all_conditions.patient_id = add_flag.patient_id\n            and all_conditions.hcc_code = add_flag.hcc_code\n            and all_conditions.data_source = add_flag.data_source\n\n)\n\n, add_standard_fields as (\n\n    select distinct\n          patient_id\n        , data_source\n        , recorded_date\n        , condition_type\n        , icd_10_cm_code\n        , hcc_code\n        , hcc_description\n        , first_recorded\n        , last_recorded\n        , last_billed\n        , current_year_billed\n        , 'Prior coding history' as reason\n        , icd_10_cm_code || case when last_billed is not null then ' last billed on ' || last_billed when last_billed is null and last_recorded is not null then ' last recorded on ' || last_recorded else ' (missing recorded and billing dates) ' end as contributing_factor\n        , coalesce(last_billed, last_recorded) as suspect_date\n    from all_conditions_with_flag\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(data_source as TEXT) as data_source\n        , cast(recorded_date as date) as recorded_date\n        , cast(condition_type as TEXT) as condition_type\n        , cast(icd_10_cm_code as TEXT) as icd_10_cm_code\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        , cast(first_recorded as date) as first_recorded\n        , cast(last_recorded as date) as last_recorded\n        , cast(last_billed as date) as last_billed\n        \n            , cast(current_year_billed as boolean) as current_year_billed\n        \n        , cast(reason as TEXT) as reason\n        , cast(contributing_factor as TEXT) as contributing_factor\n        , cast(suspect_date as date) as suspect_date\n    from add_standard_fields\n\n)\n\nselect\n      patient_id\n    , data_source\n    , recorded_date\n    , condition_type\n    , icd_10_cm_code\n    , hcc_code\n    , hcc_description\n    , first_recorded\n    , last_recorded\n    , last_billed\n    , current_year_billed\n    , reason\n    , contributing_factor\n    , suspect_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.hcc_suspecting._int_patient_hcc_history"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.447776Z", "completed_at": "2024-10-11T23:52:45.454600Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.504973Z", "completed_at": "2024-10-11T23:52:45.504980Z"}], "thread_id": "Thread-6", "execution_time": 0.07874369621276855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id.705b1ca561", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_wide\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.455156Z", "completed_at": "2024-10-11T23:52:45.509997Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.515308Z", "completed_at": "2024-10-11T23:52:45.515315Z"}], "thread_id": "Thread-3", "execution_time": 0.06895685195922852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id.02386b9158", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.chronic_conditions.tuva_chronic_conditions_wide\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.492084Z", "completed_at": "2024-10-11T23:52:45.511051Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.520078Z", "completed_at": "2024-10-11T23:52:45.520084Z"}], "thread_id": "Thread-4", "execution_time": 0.06813812255859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_claim_id.84015aec48", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom dev_coco.chronic_conditions._int_cms_chronic_condition_all\nwhere claim_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.460515Z", "completed_at": "2024-10-11T23:52:45.514656Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.520611Z", "completed_at": "2024-10-11T23:52:45.520616Z"}], "thread_id": "Thread-10", "execution_time": 0.06897997856140137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud", "compiled": true, "compiled_code": "with  __dbt__cte__cms_chronic_conditions__stg_core__condition as (\n\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\nwhere claim_id is not null\n),  __dbt__cte__cms_chronic_conditions__stg_core__pharmacy_claim as (\n\n\nselect\n      claim_id\n    , patient_id\n    , paid_date\n    , ndc_code\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.pharmacy_claim\n),  __dbt__cte__cms_chronic_conditions__stg_core__procedure as (\n\n\nselect\n      claim_id\n    , patient_id\n    , procedure_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\nwhere claim_id is not null\n), chronic_conditions as (\n\n    select * from dev_coco.chronic_conditions._value_set_cms_chronic_conditions_hierarchy\n    where condition = 'Opioid Use Disorder (OUD)'\n\n)\n\n, patient_conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_core__condition\n\n)\n\n, patient_medications as (\n\n    select\n          patient_id\n        , claim_id\n        , paid_date as start_date\n        , replace(ndc_code,'.','') as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_core__pharmacy_claim\n\n)\n\n, patient_procedures as (\n\n    select\n          patient_id\n        , claim_id\n        , procedure_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_core__procedure\n\n)\n\n, inclusions_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n\n)\n\n, inclusions_procedure as (\n\n    select\n          patient_procedures.patient_id\n        , patient_procedures.claim_id\n        , patient_procedures.start_date\n        , patient_procedures.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_procedures\n         inner join chronic_conditions\n             on patient_procedures.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system in ('ICD-10-PCS', 'HCPCS')\n\n)\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE excludes medication encounters with the exception codes for\n    Naltrexone. Those encounters will be evaluated separately.\n*/\n, inclusions_medication as (\n\n    select\n          patient_medications.patient_id\n        , patient_medications.claim_id\n        , patient_medications.start_date\n        , patient_medications.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_medications\n         inner join chronic_conditions\n             on patient_medications.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'NDC'\n    and chronic_conditions.code not in ('00056001122', '00056001130', '00056001170', '00056007950', '00056008050', '00185003901', '00185003930', '00406009201', '00406009203', '00406117001', '00406117003', '00555090201', '00555090202', '00904703604', '16729008101', '16729008110', '42291063230', '43063059115', '47335032683', '47335032688', '50090286600', '50436010501', '51224020630', '51224020650', '51285027501', '51285027502', '52152010502', '52152010504', '52152010530', '54868557400', '63459030042', '63629104601', '63629104701', '65694010003', '65694010010', '65757030001', '65757030202', '68084029111', '68084029121', '68094085362', '68115068030')\n\n)\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE includes patients with evidence of the chronic conditions Alcohol\n    Use Disorders or Drug Use Disorders.\n*/\n, exclusions_other_chronic_conditions as (\n\n    select distinct patient_id\n    from dev_coco.chronic_conditions._int_cms_chronic_condition_all\n    where condition in (\n          'Alcohol Use Disorders'\n        , 'Drug Use Disorders'\n    )\n\n)\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE creates the exclusion list which consists of patients with\n    medication encounters for Naltrexone having Alcohol Use Disorder or Drug\n    Use Disorder and missing the Opioid Use Disorder diagnosis codes.\n*/\n, exclusions_medication as (\n    select distinct\n          patient_medications.patient_id\n    from patient_medications\n         inner join chronic_conditions\n             on patient_medications.code = chronic_conditions.code\n         inner join exclusions_other_chronic_conditions\n             on patient_medications.patient_id = exclusions_other_chronic_conditions.patient_id\n         left join inclusions_diagnosis\n             on patient_medications.patient_id = inclusions_diagnosis.patient_id\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'NDC'\n    and chronic_conditions.code in ('00056001122', '00056001130', '00056001170', '00056007950', '00056008050', '00185003901', '00185003930', '00406009201', '00406009203', '00406117001', '00406117003', '00555090201', '00555090202', '00904703604', '16729008101', '16729008110', '42291063230', '43063059115', '47335032683', '47335032688', '50090286600', '50436010501', '51224020630', '51224020650', '51285027501', '51285027502', '52152010502', '52152010504', '52152010530', '54868557400', '63459030042', '63629104601', '63629104701', '65694010003', '65694010010', '65757030001', '65757030202', '68084029111', '68084029121', '68094085362', '68115068030')\n    and inclusions_diagnosis.patient_id is null\n\n)\n\n\n, inclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_procedure\n    union distinct\n    select * from inclusions_medication\n\n)\n\n\nselect distinct\n      cast(inclusions_unioned.patient_id as TEXT) as patient_id\n    , cast(inclusions_unioned.claim_id as TEXT) as claim_id\n    , cast(inclusions_unioned.start_date as date) as start_date\n    , cast(inclusions_unioned.chronic_condition_type as TEXT) as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as TEXT) as condition_category\n    , cast(inclusions_unioned.condition as TEXT) as condition\n    , cast(inclusions_unioned.data_source as TEXT) as data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom inclusions_unioned\n     left join exclusions_medication\n         on inclusions_unioned.patient_id = exclusions_medication.patient_id\nwhere exclusions_medication.patient_id is null", "relation_name": "dev_coco.chronic_conditions._int_cms_chronic_condition_oud"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.506133Z", "completed_at": "2024-10-11T23:52:45.516104Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.522194Z", "completed_at": "2024-10-11T23:52:45.522198Z"}], "thread_id": "Thread-7", "execution_time": 0.06874489784240723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_condition.bb780b4840", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom dev_coco.chronic_conditions._int_cms_chronic_condition_all\nwhere condition is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.511296Z", "completed_at": "2024-10-11T23:52:45.521958Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.531785Z", "completed_at": "2024-10-11T23:52:45.531793Z"}], "thread_id": "Thread-2", "execution_time": 0.07195591926574707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_patient_id.95fc066008", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_coco.chronic_conditions._int_cms_chronic_condition_all\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.516341Z", "completed_at": "2024-10-11T23:52:45.527724Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.533220Z", "completed_at": "2024-10-11T23:52:45.533225Z"}], "thread_id": "Thread-9", "execution_time": 0.02782297134399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.c54d45a2c6", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        condition as value_field,\n        count(*) as n_records\n\n    from dev_coco.chronic_conditions._int_cms_chronic_condition_hiv_aids\n    group by condition\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Human Immunodeficiency Virus and/or Acquired Immunodeficiency Syndrome (HIV/AIDS)'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.523389Z", "completed_at": "2024-10-11T23:52:45.534022Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.539316Z", "completed_at": "2024-10-11T23:52:45.539322Z"}], "thread_id": "Thread-5", "execution_time": 0.024413108825683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id.9baa48027d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom dev_coco.chronic_conditions._int_cms_chronic_condition_hiv_aids\nwhere claim_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.528427Z", "completed_at": "2024-10-11T23:52:45.535192Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.545762Z", "completed_at": "2024-10-11T23:52:45.545768Z"}], "thread_id": "Thread-6", "execution_time": 0.030025005340576172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition.da32954f00", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom dev_coco.chronic_conditions._int_cms_chronic_condition_hiv_aids\nwhere condition is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.535969Z", "completed_at": "2024-10-11T23:52:45.556278Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.573164Z", "completed_at": "2024-10-11T23:52:45.573172Z"}], "thread_id": "Thread-3", "execution_time": 0.045130014419555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id.b6c58add4b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_coco.chronic_conditions._int_cms_chronic_condition_hiv_aids\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.540352Z", "completed_at": "2024-10-11T23:52:45.567052Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.582914Z", "completed_at": "2024-10-11T23:52:45.582923Z"}], "thread_id": "Thread-4", "execution_time": 0.05048775672912598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_hcc_mapping", "compiled": true, "compiled_code": "\n/*\nSteps for staging the medical claim data:\n    1) Filter to risk-adjustable claims per claim type for the collection year.\n    2) Gather diagnosis codes from Condition for the eligible claims.\n    3) Map and filter diagnosis codes to HCCs for each CMS model version\n    4) Union results from each CMS model version\n       (note: some payment years may not have results for v28)\n*/\n\nwith conditions as (\n\n    select\n          patient_id\n        , condition_code\n        , payment_year\n    from dev_coco.cms_hcc._int_eligible_conditions\n\n)\n\n, seed_hcc_mapping as (\n\n    select\n          payment_year\n        , diagnosis_code\n        , cms_hcc_v24\n        , cms_hcc_v24_flag\n        , cms_hcc_v28\n        , cms_hcc_v28_flag\n    from dev_coco.cms_hcc._value_set_icd_10_cm_mappings\n\n)\n\n/* casting hcc_code to avoid formatting changes during union */\n, v24_mapped as (\n\n    select distinct\n          conditions.patient_id\n        , conditions.condition_code\n        , conditions.payment_year\n        , 'CMS-HCC-V24' as model_version\n        , cast(seed_hcc_mapping.cms_hcc_v24 as TEXT) as hcc_code\n    from conditions\n        inner join seed_hcc_mapping\n            on conditions.condition_code = seed_hcc_mapping.diagnosis_code\n            and conditions.payment_year = seed_hcc_mapping.payment_year\n    where cms_hcc_v24_flag = 'Yes'\n\n)\n\n, v28_mapped as (\n\n    select distinct\n          conditions.patient_id\n        , conditions.condition_code\n        , conditions.payment_year\n        , 'CMS-HCC-V28' as model_version\n        , cast(seed_hcc_mapping.cms_hcc_v28 as TEXT) as hcc_code\n    from conditions\n        inner join seed_hcc_mapping\n            on conditions.condition_code = seed_hcc_mapping.diagnosis_code\n            and conditions.payment_year = seed_hcc_mapping.payment_year\n    where cms_hcc_v28_flag = 'Yes'\n\n)\n\n, unioned as (\n\n    select * from v24_mapped\n    union all\n    select * from v28_mapped\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(condition_code as TEXT) as condition_code\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from unioned\n\n)\n\nselect\n      patient_id\n    , condition_code\n    , hcc_code\n    , model_version\n    , payment_year\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.cms_hcc._int_hcc_mapping"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.546236Z", "completed_at": "2024-10-11T23:52:45.573647Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.584118Z", "completed_at": "2024-10-11T23:52:45.584122Z"}], "thread_id": "Thread-10", "execution_time": 0.05130481719970703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_cms_hcc__int_eligible_conditions_condition_code.e811a078bc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect condition_code\nfrom dev_coco.cms_hcc._int_eligible_conditions\nwhere condition_code is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.550319Z", "completed_at": "2024-10-11T23:52:45.583485Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.594719Z", "completed_at": "2024-10-11T23:52:45.594726Z"}], "thread_id": "Thread-7", "execution_time": 0.06015801429748535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_1_allowed_pivot", "compiled": true, "compiled_code": "\n\nwith service_cat_1 as (\n  select\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_1\n  , data_source\n  , sum(total_allowed) as total_allowed\n  from dev_coco.financial_pmpm._int_patient_spend_with_service_categories\n  group by\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_1\n  , data_source\n)\n\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, data_source\n, \n  \n    sum(\n      \n      case\n      when service_category_1 = 'inpatient'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as inpatient_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'outpatient'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'office-based'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as office_based_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'ancillary'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as ancillary_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'other'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as other_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'pharmacy'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as pharmacy_allowed\n      \n    \n    \n  \n\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_cat_1\ngroup by\n  patient_id\n, year_month\n, payer\n, plan\n, data_source", "relation_name": "dev_coco.financial_pmpm._int_service_category_1_allowed_pivot"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.567300Z", "completed_at": "2024-10-11T23:52:45.584914Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.627236Z", "completed_at": "2024-10-11T23:52:45.627246Z"}], "thread_id": "Thread-2", "execution_time": 0.08754587173461914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_1_paid_pivot", "compiled": true, "compiled_code": "\n\nwith service_cat_1 as (\n  select\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_1\n  , data_source\n  , sum(total_paid) as total_paid\n  from dev_coco.financial_pmpm._int_patient_spend_with_service_categories\n  group by\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_1\n  , data_source\n)\n\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, data_source\n, \n  \n    sum(\n      \n      case\n      when service_category_1 = 'inpatient'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as inpatient_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'outpatient'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'office-based'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as office_based_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'ancillary'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as ancillary_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'other'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as other_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'pharmacy'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as pharmacy_paid\n      \n    \n    \n  \n\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_cat_1\ngroup by\n  patient_id\n, year_month\n, payer\n, plan\n, data_source", "relation_name": "dev_coco.financial_pmpm._int_service_category_1_paid_pivot"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.574257Z", "completed_at": "2024-10-11T23:52:45.595231Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.654910Z", "completed_at": "2024-10-11T23:52:45.654917Z"}], "thread_id": "Thread-9", "execution_time": 0.10569071769714355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_2_allowed_pivot", "compiled": true, "compiled_code": "\n\nwith service_cat_2 as (\n  select\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_2\n  , data_source\n  , sum(total_allowed) as total_allowed\n  from dev_coco.financial_pmpm._int_patient_spend_with_service_categories\n  group by\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_2\n  , data_source\n)\n\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, data_source\n, \n  \n    sum(\n      \n      case\n      when service_category_2 = 'acute inpatient'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as acute_inpatient_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'ambulance'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as ambulance_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'ambulatory surgery center'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as ambulatory_surgery_center_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'dialysis'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as dialysis_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'durable medical equipment'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as durable_medical_equipment_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'emergency department'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as emergency_department_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'home health'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as home_health_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'inpatient hospice'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as inpatient_hospice_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'inpatient psychiatric'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as inpatient_psychiatric_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'inpatient rehabilitation'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as inpatient_rehabilitation_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'lab'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as lab_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'observation'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as observation_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'office-based other'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as office_based_other_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'office-based pt/ot/st'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as office_based_ptotst_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'office-based radiology'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as office_based_radiology_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'office-based surgery'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as office_based_surgery_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'office-based visit'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as office_based_visit_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'other'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as other_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'outpatient hospice'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_hospice_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'outpatient hospital or clinic'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_hospital_or_clinic_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'outpatient pt/ot/st'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_ptotst_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'outpatient psychiatric'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_psychiatric_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'outpatient radiology'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_radiology_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'outpatient rehabilitation'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_rehabilitation_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'outpatient surgery'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_surgery_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'pharmacy'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as pharmacy_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'skilled nursing'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as skilled_nursing_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'telehealth visit'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as telehealth_visit_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'urgent care'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as urgent_care_allowed\n      \n    \n    \n  \n\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_cat_2\ngroup by\n  patient_id\n, year_month\n, payer\n, plan\n, data_source", "relation_name": "dev_coco.financial_pmpm._int_service_category_2_allowed_pivot"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.585188Z", "completed_at": "2024-10-11T23:52:45.655433Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.665429Z", "completed_at": "2024-10-11T23:52:45.665436Z"}], "thread_id": "Thread-5", "execution_time": 0.09878087043762207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_2_paid_pivot", "compiled": true, "compiled_code": "\n\nwith service_cat_2 as (\n  select\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_2\n  , data_source\n  , sum(total_paid) as total_paid\n  from dev_coco.financial_pmpm._int_patient_spend_with_service_categories\n  group by\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_2\n  , data_source\n)\n\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, data_source\n, \n  \n    sum(\n      \n      case\n      when service_category_2 = 'acute inpatient'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as acute_inpatient_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'ambulance'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as ambulance_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'ambulatory surgery center'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as ambulatory_surgery_center_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'dialysis'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as dialysis_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'durable medical equipment'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as durable_medical_equipment_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'emergency department'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as emergency_department_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'home health'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as home_health_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'inpatient hospice'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as inpatient_hospice_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'inpatient psychiatric'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as inpatient_psychiatric_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'inpatient rehabilitation'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as inpatient_rehabilitation_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'lab'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as lab_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'observation'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as observation_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'office-based other'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as office_based_other_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'office-based pt/ot/st'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as office_based_ptotst_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'office-based radiology'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as office_based_radiology_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'office-based surgery'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as office_based_surgery_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'office-based visit'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as office_based_visit_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'other'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as other_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'outpatient hospice'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_hospice_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'outpatient hospital or clinic'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_hospital_or_clinic_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'outpatient pt/ot/st'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_ptotst_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'outpatient psychiatric'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_psychiatric_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'outpatient radiology'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_radiology_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'outpatient rehabilitation'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_rehabilitation_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'outpatient surgery'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_surgery_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'pharmacy'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as pharmacy_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'skilled nursing'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as skilled_nursing_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'telehealth visit'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as telehealth_visit_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'urgent care'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as urgent_care_paid\n      \n    \n    \n  \n\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom service_cat_2\ngroup by\n  patient_id\n, year_month\n, payer\n, plan\n, data_source", "relation_name": "dev_coco.financial_pmpm._int_service_category_2_paid_pivot"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.596115Z", "completed_at": "2024-10-11T23:52:45.665106Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.727772Z", "completed_at": "2024-10-11T23:52:45.727781Z"}], "thread_id": "Thread-6", "execution_time": 0.15392494201660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_shared_exclusions_advanced_illness", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n), patients_with_frailty as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_shared_exclusions_frailty\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'advanced illness'\n        , 'acute inpatient'\n        , 'encounter inpatient'\n        , 'outpatient'\n        , 'observation'\n        , 'emergency department visit'\n        , 'nonacute inpatient'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n    where lower(exclusion_codes.concept_name) = 'advanced illness'\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, acute_inpatient as (\n\n    select distinct\n          patients_with_frailty.patient_id\n        , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , patients_with_frailty.exclusion_reason || ' with ' || med_claim_exclusions.concept_name || ' and ' || condition_exclusions.concept_name as exclusion_reason\n        , med_claim_exclusions.claim_start_date\n        , med_claim_exclusions.claim_end_date\n        , cast(null as date) as procedure_date\n    from patients_with_frailty\n         inner join med_claim_exclusions\n            on patients_with_frailty.patient_id = med_claim_exclusions.patient_id\n         inner join condition_exclusions\n            on med_claim_exclusions.claim_id = condition_exclusions.claim_id\n    where lower(med_claim_exclusions.concept_name) = 'acute inpatient'\n\n    union all\n\n    select distinct\n          patients_with_frailty.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , patients_with_frailty.exclusion_reason || ' with ' || procedure_exclusions.concept_name || ' and ' || condition_exclusions.concept_name as exclusion_reason\n        , cast(null as date) as claim_start_date\n        , cast(null as date) as claim_end_date\n        , procedure_exclusions.procedure_date\n    from patients_with_frailty\n         inner join procedure_exclusions\n         on patients_with_frailty.patient_id = procedure_exclusions.patient_id\n         inner join condition_exclusions\n         on procedure_exclusions.patient_id = condition_exclusions.patient_id\n         and procedure_exclusions.procedure_date = condition_exclusions.recorded_date\n    where lower(procedure_exclusions.concept_name) = 'acute inpatient'\n\n)\n\n, nonacute_outpatient as (\n\n    select distinct\n          patients_with_frailty.patient_id\n        , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , patients_with_frailty.exclusion_reason || ' with ' || med_claim_exclusions.concept_name || ' and ' || condition_exclusions.concept_name as exclusion_reason\n        , med_claim_exclusions.claim_start_date\n        , med_claim_exclusions.claim_end_date\n        , cast(null as date) as procedure_date\n    from patients_with_frailty\n         inner join med_claim_exclusions\n            on patients_with_frailty.patient_id = med_claim_exclusions.patient_id\n         inner join condition_exclusions\n            on med_claim_exclusions.claim_id = condition_exclusions.claim_id\n    where lower(med_claim_exclusions.concept_name) in (\n              'encounter inpatient'\n            , 'outpatient'\n            , 'observation'\n            , 'emergency department visit'\n            , 'nonacute inpatient'\n        )\n\n    union all\n\n    select distinct\n          patients_with_frailty.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , patients_with_frailty.exclusion_reason || ' with ' || procedure_exclusions.concept_name || ' and ' || condition_exclusions.concept_name as exclusion_reason\n        , cast(null as date) as claim_start_date\n        , cast(null as date) as claim_end_date\n        , procedure_exclusions.procedure_date\n    from patients_with_frailty\n         inner join procedure_exclusions\n         on patients_with_frailty.patient_id = procedure_exclusions.patient_id\n         inner join condition_exclusions\n         on procedure_exclusions.patient_id = condition_exclusions.patient_id\n         and procedure_exclusions.procedure_date = condition_exclusions.recorded_date\n    where lower(procedure_exclusions.concept_name) in (\n          'encounter inpatient'\n        , 'outpatient'\n        , 'observation'\n        , 'emergency department visit'\n        , 'nonacute inpatient'\n    )\n\n)\n\n, exclusions_unioned as (\n\n    select\n          acute_inpatient.patient_id\n        , acute_inpatient.exclusion_date\n        , acute_inpatient.exclusion_reason\n        , acute_inpatient.claim_start_date\n        , acute_inpatient.claim_end_date\n        , acute_inpatient.procedure_date\n        , 'acute_inpatient' as patient_type\n    from acute_inpatient\n\n    union all\n\n    select\n          nonacute_outpatient.patient_id\n        , nonacute_outpatient.exclusion_date\n        , nonacute_outpatient.exclusion_reason\n        , nonacute_outpatient.claim_start_date\n        , nonacute_outpatient.claim_end_date\n        , nonacute_outpatient.procedure_date\n        , 'nonacute_outpatient' as patient_type\n    from nonacute_outpatient\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , 'advanced_illness' as exclusion_type\n    , claim_start_date\n    , claim_end_date\n    , procedure_date\n    , patient_type\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom exclusions_unioned", "relation_name": "dev_coco.quality_measures._int_shared_exclusions_advanced_illness"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.665981Z", "completed_at": "2024-10-11T23:52:45.756331Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.847559Z", "completed_at": "2024-10-11T23:52:45.847567Z"}], "thread_id": "Thread-3", "execution_time": 0.2521328926086426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_shared_exclusions_dementia", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__medication as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , prescribing_date  \n    , dispensing_date\n    , source_code_type\n    , source_code\n    , ndc_code\n    , rxnorm_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medication\n\n\n),  __dbt__cte__quality_measures__stg_pharmacy_claim as (\n\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , days_supply\n    , paid_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.pharmacy_claim\n\n\n), patients_with_frailty as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_shared_exclusions_frailty\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n        'dementia medications'\n    )\n\n)\n\n, medications as (\n\n    select\n          patient_id\n        , dispensing_date\n        , source_code_type\n        , source_code\n        , ndc_code\n        , rxnorm_code\n    from __dbt__cte__quality_measures__stg_core__medication\n\n)\n\n, pharmacy_claim as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code\n        , paid_date\n    from __dbt__cte__quality_measures__stg_pharmacy_claim\n\n)\n\n, medication_exclusions as (\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n         inner join exclusion_codes\n            on medications.ndc_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'ndc'\n\n    union all\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n         inner join exclusion_codes\n            on medications.rxnorm_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'rxnorm'\n\n    union all\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n         inner join exclusion_codes\n            on medications.source_code = exclusion_codes.code\n            and medications.source_code_type = exclusion_codes.code_system\n\n)\n\n, pharmacy_claim_exclusions as (\n\n    select\n          pharmacy_claim.patient_id\n        , pharmacy_claim.dispensing_date\n        , pharmacy_claim.ndc_code\n        , pharmacy_claim.paid_date\n        , exclusion_codes.concept_name\n    from pharmacy_claim\n         inner join exclusion_codes\n            on pharmacy_claim.ndc_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'ndc'\n\n)\n\n, frailty_with_dementia as (\n\n    select\n          patients_with_frailty.patient_id\n        , patients_with_frailty.exclusion_date\n        , patients_with_frailty.exclusion_reason || ' with ' || pharmacy_claim_exclusions.concept_name as exclusion_reason\n        , pharmacy_claim_exclusions.dispensing_date\n        , pharmacy_claim_exclusions.paid_date\n    from patients_with_frailty\n         inner join pharmacy_claim_exclusions\n            on patients_with_frailty.patient_id = pharmacy_claim_exclusions.patient_id\n\n    union all\n\n    select\n          patients_with_frailty.patient_id\n        , medication_exclusions.dispensing_date as exclusion_date\n        , patients_with_frailty.exclusion_reason || ' with ' || medication_exclusions.concept_name as exclusion_reason\n        , medication_exclusions.dispensing_date\n        , null as paid_date\n    from patients_with_frailty\n         inner join medication_exclusions\n         on patients_with_frailty.patient_id = medication_exclusions.patient_id\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , 'dementia' as exclusion_type\n    , dispensing_date\n    , paid_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom frailty_with_dementia", "relation_name": "dev_coco.quality_measures._int_shared_exclusions_dementia"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.695967Z", "completed_at": "2024-10-11T23:52:45.847263Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.864205Z", "completed_at": "2024-10-11T23:52:45.864213Z"}], "thread_id": "Thread-4", "execution_time": 0.21021819114685059, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_adh_diabetes_exclusions", "compiled": true, "compiled_code": "with  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_pharmacy_claim as (\n\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , days_supply\n    , paid_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.pharmacy_claim\n\n\n), denominator as (\n    \n    select\n        patient_id\n    from dev_coco.quality_measures._int_adh_diabetes_denominator\n\n)\n\n, exclusion_codes as (\n\n    select\n        code\n      , code_system\n      , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'pqa esrd'\n        , 'pqa insulin medications'\n    )\n\n)\n\n, hospice_palliative as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_shared_exclusions_hospice_palliative\n    where exclusion_date between (\n\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_adh_diabetes__performance_period\n\n) and (\n\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_adh_diabetes__performance_period\n\n)\n\n)\n\n, valid_hospice as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from hospice_palliative\n    where lower(exclusion_reason) in (\n            'hospice encounter'\n          , 'hospice care ambulatory'\n          , 'hospice diagnosis'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , claim_id\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition\n    where recorded_date between (\n\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_adh_diabetes__performance_period\n\n) and (\n\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_adh_diabetes__performance_period\n\n)\n\n)\n\n, condition_exclusions as (\n\n      select\n          conditions.patient_id\n        , conditions.recorded_date as exclusion_date\n        , exclusion_codes.concept_name as exclusion_reason\n    from conditions\n    inner join exclusion_codes\n      on conditions.code = exclusion_codes.code\n        and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, pharmacy_exclusions as (\n\n    select\n        patient_id\n      , dispensing_date as exclusion_date\n      , concept_name as exclusion_reason\n    from __dbt__cte__quality_measures__stg_pharmacy_claim as pharmacy_claims\n    inner join exclusion_codes\n      on pharmacy_claims.ndc_code = exclusion_codes.code\n        and exclusion_codes.code_system = 'ndc'\n\n)\n\n, exclusion_patients as (\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from valid_hospice\n\n    union all\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from condition_exclusions\n\n    union all\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from pharmacy_exclusions\n\n)\n\n, combined_exclusions as (\n\n    select\n        exclusion_patients.patient_id\n      , exclusion_patients.exclusion_date\n      , exclusion_patients.exclusion_reason\n    from exclusion_patients\n    inner join denominator\n      on exclusion_patients.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(1 as integer) as exclusion_flag\n    from combined_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_adh_diabetes_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.728727Z", "completed_at": "2024-10-11T23:52:45.862020Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.865349Z", "completed_at": "2024-10-11T23:52:45.865354Z"}], "thread_id": "Thread-10", "execution_time": 0.20938587188720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_adhras_exclusions", "compiled": true, "compiled_code": "with  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_pharmacy_claim as (\n\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , days_supply\n    , paid_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.pharmacy_claim\n\n\n), denominator as (\n\n    select\n          patient_id\n    from dev_coco.quality_measures._int_adhras_denominator\n\n)\n\n, valid_hospice_palliative as (\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from dev_coco.quality_measures._int_shared_exclusions_hospice_palliative\n    where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_adhras__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_adhras__performance_period\n\n)\n\n)\n\n, codes as (\n\n    select\n            code\n          , code_system\n          , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where concept_name in (\n            'PQA ESRD'\n          , 'PQA Sacubitril Valsartan Medications'\n        )\n\n)\n\n, valid_esrd as (\n\n    select\n          condition.patient_id\n        , condition.recorded_date as exclusion_date\n        , codes.concept_name as exclusion_reason\n    from __dbt__cte__quality_measures__stg_core__condition as condition\n    inner join codes \n      on coalesce(condition.normalized_code, condition.source_code) = codes.code \n        and coalesce(condition.normalized_code_type, condition.source_code_type) = codes.code_system\n    where condition.recorded_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_adhras__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_adhras__performance_period\n\n)\n\n)\n\n, sacubitril_pharmacy_claim as (\n\n    select\n          pharmacy_claim.patient_id\n        , pharmacy_claim.dispensing_date as exclusion_date\n        , codes.concept_name as exclusion_reason\n    from __dbt__cte__quality_measures__stg_pharmacy_claim as pharmacy_claim\n    inner join codes\n      on pharmacy_claim.ndc_code = codes.code \n    where pharmacy_claim.dispensing_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_adhras__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_adhras__performance_period\n\n)\n\n)\n\n, exclusions as (\n\n    select \n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from valid_hospice_palliative\n\n    union all\n\n    select \n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from valid_esrd\n\n    union all\n\n    select \n          patient_id\n        , exclusion_date\n        , exclusion_reason \n    from sacubitril_pharmacy_claim\n\n)\n\n, measure_exclusions as (\n\n    select \n          exclusions.patient_id\n        , exclusion_date\n        , exclusion_reason\n    from exclusions\n    inner join denominator\n      on exclusions.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n            cast(patient_id as TEXT) as patient_id\n          , cast(exclusion_date as date) as exclusion_date\n          , cast(exclusion_reason as TEXT) as exclusion_reason\n          , 1 as exclusion_flag\n    from measure_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run \nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_adhras_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.756891Z", "completed_at": "2024-10-11T23:52:45.864687Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.910430Z", "completed_at": "2024-10-11T23:52:45.910438Z"}], "thread_id": "Thread-7", "execution_time": 0.24615979194641113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_comorbidity_suspects", "compiled": true, "compiled_code": "\n\nwith conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n        , data_source\n    from dev_coco.hcc_suspecting._int_prep_conditions\n\n)\n\n, seed_clinical_concepts as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from dev_coco.hcc_suspecting._value_set_clinical_concepts\n\n)\n\n, seed_hcc_descriptions as (\n\n    select distinct\n          hcc_code\n        , hcc_description\n    from dev_coco.hcc_suspecting._value_set_hcc_descriptions\n\n)\n\n, billed_hccs as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , current_year_billed\n    from dev_coco.hcc_suspecting._int_patient_hcc_history\n\n)\n\n/* BEGIN HCC 37 logic */\n, ckd_stage_1_or_2 as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , conditions.condition_type\n        , conditions.code_type\n        , conditions.code\n        , conditions.data_source\n        , seed_clinical_concepts.concept_name\n        , row_number() over (\n            partition by\n                  conditions.patient_id\n                , conditions.data_source\n            order by\n                  conditions.recorded_date desc\n                , conditions.code desc\n          ) as row_num\n    from conditions\n        inner join seed_clinical_concepts\n            on conditions.code_type = seed_clinical_concepts.code_system\n            and conditions.code = seed_clinical_concepts.code\n    where lower(seed_clinical_concepts.concept_name) in (\n          'chronic kidney disease, stage 1'\n        , 'chronic kidney disease, stage 2'\n    )\n\n)\n\n, ckd_stage_1_or_2_dedupe as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n        , data_source\n        , concept_name\n    from ckd_stage_1_or_2\n    where row_num = 1\n\n)\n\n, diabetes as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , conditions.condition_type\n        , conditions.code_type\n        , conditions.code\n        , conditions.data_source\n        , seed_clinical_concepts.concept_name\n        , row_number() over (\n            partition by\n                  conditions.patient_id\n                , conditions.data_source\n            order by\n                  conditions.recorded_date desc\n                , conditions.code desc\n          ) as row_num\n    from conditions\n        inner join seed_clinical_concepts\n            on conditions.code_type = seed_clinical_concepts.code_system\n            and conditions.code = seed_clinical_concepts.code\n    where lower(seed_clinical_concepts.concept_name) = 'diabetes'\n)\n\n, diabetes_dedupe as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n        , data_source\n        , concept_name\n    from diabetes\n    where row_num = 1\n\n)\n\n, hcc_37_suspect as (\n\n    select\n          diabetes_dedupe.patient_id\n        , diabetes_dedupe.data_source\n        , seed_hcc_descriptions.hcc_code\n        , seed_hcc_descriptions.hcc_description\n        , diabetes_dedupe.concept_name as condition_1_concept_name\n        , diabetes_dedupe.code as condition_1_code\n        , diabetes_dedupe.recorded_date as condition_1_recorded_date\n        , ckd_stage_1_or_2_dedupe.concept_name as condition_2_concept_name\n        , ckd_stage_1_or_2_dedupe.code as condition_2_code\n        , ckd_stage_1_or_2_dedupe.recorded_date as condition_2_recorded_date\n    from diabetes_dedupe\n        inner join ckd_stage_1_or_2_dedupe\n            on diabetes_dedupe.patient_id = ckd_stage_1_or_2_dedupe.patient_id\n            and diabetes_dedupe.data_source = ckd_stage_1_or_2_dedupe.data_source\n            /* ensure conditions overlap in the same year */\n            and date_part('year', diabetes_dedupe.recorded_date) = date_part('year', ckd_stage_1_or_2_dedupe.recorded_date)\n        inner join seed_hcc_descriptions\n            on hcc_code = '37'\n\n)\n/* END HCC 37 logic */\n\n, unioned as (\n\n    select * from hcc_37_suspect\n\n)\n\n, add_billed_flag as (\n\n    select\n          unioned.patient_id\n        , unioned.data_source\n        , unioned.hcc_code\n        , unioned.hcc_description\n        , unioned.condition_1_concept_name\n        , unioned.condition_1_code\n        , unioned.condition_1_recorded_date\n        , unioned.condition_2_concept_name\n        , unioned.condition_2_code\n        , unioned.condition_2_recorded_date\n        , billed_hccs.current_year_billed\n    from unioned\n        left join billed_hccs\n            on unioned.patient_id = billed_hccs.patient_id\n            and unioned.data_source = billed_hccs.data_source\n            and unioned.hcc_code = billed_hccs.hcc_code\n\n)\n\n, add_standard_fields as (\n\n    select\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , condition_1_concept_name\n        , condition_1_code\n        , condition_1_recorded_date\n        , condition_2_concept_name\n        , condition_2_code\n        , condition_2_recorded_date\n        , current_year_billed\n        , cast('Comorbidity suspect' as TEXT) as reason\n        , condition_1_concept_name || ' (' || condition_1_code || ') on ' || condition_1_recorded_date || ') and ' || condition_2_concept_name || ' (' || condition_2_code || ') on ' || condition_2_recorded_date as contributing_factor\n        , condition_1_recorded_date as suspect_date\n    from add_billed_flag\n\n)\n\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(data_source as TEXT) as data_source\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        , cast(condition_1_concept_name as TEXT) as condition_1_concept_name\n        , cast(condition_1_code as TEXT) as condition_1_code\n        , cast(condition_1_recorded_date as date) as condition_1_recorded_date\n        , cast(condition_2_concept_name as TEXT) as condition_2_concept_name\n        , cast(condition_2_code as TEXT) as condition_2_code\n        , cast(condition_2_recorded_date as date) as condition_2_recorded_date\n        \n            , cast(current_year_billed as boolean) as current_year_billed\n        \n        , cast(reason as TEXT) as reason\n        , cast(contributing_factor as TEXT) as contributing_factor\n        , cast(suspect_date as date) as suspect_date\n    from add_standard_fields\n\n)\n\nselect\n      patient_id\n    , data_source\n    , hcc_code\n    , hcc_description\n    , condition_1_concept_name\n    , condition_1_code\n    , condition_1_recorded_date\n    , condition_2_concept_name\n    , condition_2_code\n    , condition_2_recorded_date\n    , current_year_billed\n    , reason\n    , contributing_factor\n    , suspect_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.hcc_suspecting._int_comorbidity_suspects"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.848051Z", "completed_at": "2024-10-11T23:52:45.866190Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.973146Z", "completed_at": "2024-10-11T23:52:45.973153Z"}], "thread_id": "Thread-2", "execution_time": 0.2776191234588623, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_lab_suspects", "compiled": true, "compiled_code": "\n\nwith egfr_labs as (\n\n    select\n          patient_id\n        , data_source\n        , code_type\n        , code\n        , result_date\n        , result\n    from dev_coco.hcc_suspecting._int_prep_egfr_labs\n\n)\n\n, seed_hcc_descriptions as (\n\n    select distinct\n          hcc_code\n        , hcc_description\n    from dev_coco.hcc_suspecting._value_set_hcc_descriptions\n\n)\n\n, billed_hccs as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , current_year_billed\n    from dev_coco.hcc_suspecting._int_patient_hcc_history\n\n)\n\n/* BEGIN CKD logic */\n\n/*\n    Find a patient\u2019s two most recent eGFR lab results that are spaced by at\n    least 90 days.\n*/\n, max_lab_date as (\n\n    select\n          patient_id\n        , data_source\n        , max(result_date) as max_result_date\n    from egfr_labs\n    group by\n          patient_id\n        , data_source\n\n)\n\n, lab_lookback as (\n\n    select\n          egfr_labs.patient_id\n        , egfr_labs.data_source\n        , max_lab_date.max_result_date\n        , max(egfr_labs.result_date) as lookback_result_date\n    from egfr_labs\n        left join max_lab_date\n        on egfr_labs.patient_id = max_lab_date.patient_id\n        and egfr_labs.data_source = max_lab_date.data_source\n    where egfr_labs.result_date <= \n\n    dateadd(\n        day,\n        -90,\n        max_result_date\n        )\n\n\n    group by\n          egfr_labs.patient_id\n        , egfr_labs.data_source\n        , max_lab_date.max_result_date\n\n)\n\n/*\n    Take the highest eGFR result that occurred between the date range.\n*/\n, eligible_labs as (\n\n    select\n          egfr_labs.patient_id\n        , egfr_labs.data_source\n        , egfr_labs.code_type\n        , egfr_labs.code\n        , egfr_labs.result_date\n        , egfr_labs.result\n        , row_number() over (\n            partition by\n                  egfr_labs.patient_id\n                , egfr_labs.data_source\n            order by egfr_labs.result desc\n        ) as row_num\n    from egfr_labs\n        inner join lab_lookback\n        on egfr_labs.patient_id = lab_lookback.patient_id\n        and egfr_labs.data_source = lab_lookback.data_source\n    where egfr_labs.result_date >= lab_lookback.lookback_result_date\n\n)\n\n/*\n    Assign a patient's kidney disease stage based on the highest eGFR based on\n    the following range:\n\n    CKD 3a: eGFR in the range (45-59)\n    CKD 3b: eGFR in the range (30-44)\n    CKD 4: eGFR in the range (15-29)\n    CKD 5: eGFR in the range (0-14)\n*/\n, ckd_suspects as (\n\n    select\n          patient_id\n        , data_source\n        , code_type\n        , code as lab_code\n        , result_date\n        , result\n        , case\n            when result between 0 and 14 then '326'\n            when result between 15 and 29 then '327'\n            when result between 30 and 44 then '328'\n            when result between 45 and 59 then '329'\n          end as hcc_code\n        , 'eGFR (' || code || ') result ' || result || ' on ' || result_date as contributing_factor\n    from eligible_labs\n    where row_num = 1\n\n)\n/* END CKD logic */\n\n, unioned as (\n\n    select * from ckd_suspects\n\n)\n\n, add_billed_flag as (\n\n    select\n          unioned.patient_id\n        , unioned.data_source\n        , unioned.result_date\n        , unioned.result\n        , unioned.lab_code\n        , unioned.hcc_code\n        , unioned.contributing_factor\n        , seed_hcc_descriptions.hcc_description\n        , billed_hccs.current_year_billed\n    from unioned\n        inner join seed_hcc_descriptions\n            on unioned.hcc_code = seed_hcc_descriptions.hcc_code\n        left join billed_hccs\n            on unioned.patient_id = billed_hccs.patient_id\n            and unioned.data_source = billed_hccs.data_source\n            and unioned.hcc_code = billed_hccs.hcc_code\n\n)\n\n, add_standard_fields as (\n\n    select\n          patient_id\n        , data_source\n        , result_date\n        , result\n        , lab_code\n        , hcc_code\n        , hcc_description\n        , contributing_factor\n        , current_year_billed\n        , cast('Lab result suspect' as TEXT) as reason\n        , result_date as suspect_date\n    from add_billed_flag\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(data_source as TEXT) as data_source\n        , cast(result_date as date) as result_date\n        , cast(result as numeric(28,6)) as result\n        , cast(lab_code as TEXT) as lab_code\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        \n            , cast(current_year_billed as boolean) as current_year_billed\n        \n        , cast(reason as TEXT) as reason\n        , cast(contributing_factor as TEXT) as contributing_factor\n        , cast(suspect_date as date) as suspect_date\n    from add_standard_fields\n\n)\n\nselect\n      patient_id\n    , data_source\n    , result_date\n    , result\n    , lab_code\n    , hcc_code\n    , hcc_description\n    , current_year_billed\n    , reason\n    , contributing_factor\n    , suspect_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.hcc_suspecting._int_lab_suspects"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.855728Z", "completed_at": "2024-10-11T23:52:45.878746Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.974572Z", "completed_at": "2024-10-11T23:52:45.974577Z"}], "thread_id": "Thread-9", "execution_time": 0.2599637508392334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_medication_suspects", "compiled": true, "compiled_code": "\n\nwith all_medications as (\n\n    select\n          patient_id\n        , dispensing_date\n        , drug_code\n        , code_system\n        , data_source\n    from dev_coco.hcc_suspecting._int_all_medications\n\n)\n\n, seed_clinical_concepts as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from dev_coco.hcc_suspecting._value_set_clinical_concepts\n\n)\n\n, seed_hcc_descriptions as (\n\n    select distinct\n          hcc_code\n        , hcc_description\n    from dev_coco.hcc_suspecting._value_set_hcc_descriptions\n\n)\n\n, billed_hccs as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , current_year_billed\n    from dev_coco.hcc_suspecting._int_patient_hcc_history\n\n)\n\n/* BEGIN HCC 155 logic (Major Depression, Moderate or Severe, without Psychosis)\n\n   antidepressant medication taken within the past five years\n*/\n, hcc_155_suspect as (\n\n    select\n          all_medications.patient_id\n        , all_medications.dispensing_date\n        , all_medications.drug_code\n        , all_medications.code_system\n        , all_medications.data_source\n        , seed_clinical_concepts.concept_name\n        , seed_hcc_descriptions.hcc_code\n        , seed_hcc_descriptions.hcc_description\n    from all_medications\n        inner join seed_clinical_concepts\n            on all_medications.code_system = seed_clinical_concepts.code_system\n            and all_medications.drug_code = seed_clinical_concepts.code\n        inner join seed_hcc_descriptions\n            on hcc_code = '155'\n    where lower(seed_clinical_concepts.concept_name) = 'antidepressant medication'\n    and all_medications.dispensing_date >= \n\n    dateadd(\n        year,\n        -5,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n\n\n)\n/* END HCC 155 logic */\n\n, unioned as (\n\n    select * from hcc_155_suspect\n\n)\n\n, add_billed_flag as (\n\n    select\n          unioned.patient_id\n        , unioned.data_source\n        , unioned.hcc_code\n        , unioned.hcc_description\n        , unioned.concept_name\n        , unioned.dispensing_date\n        , unioned.drug_code\n        , billed_hccs.current_year_billed\n    from unioned\n        left join billed_hccs\n            on unioned.patient_id = billed_hccs.patient_id\n            and unioned.data_source = billed_hccs.data_source\n            and unioned.hcc_code = billed_hccs.hcc_code\n)\n\n, add_standard_fields as (\n\n    select\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , dispensing_date\n        , drug_code\n        , current_year_billed\n        , cast('Medication suspect' as TEXT) as reason\n        , concept_name || drug_code || ') dispensed on ' || dispensing_date as contributing_factor\n        , dispensing_date as suspect_date\n    from add_billed_flag\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(data_source as TEXT) as data_source\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        , cast(dispensing_date as date) as dispensing_date\n        , cast(drug_code as TEXT) as drug_code\n        \n            , cast(current_year_billed as boolean) as current_year_billed\n        \n        , cast(reason as TEXT) as reason\n        , cast(contributing_factor as TEXT) as contributing_factor\n        , cast(suspect_date as date) as suspect_date\n    from add_standard_fields\n\n)\n\nselect\n      patient_id\n    , data_source\n    , hcc_code\n    , hcc_description\n    , dispensing_date\n    , drug_code\n    , current_year_billed\n    , reason\n    , contributing_factor\n    , suspect_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.hcc_suspecting._int_medication_suspects"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.866425Z", "completed_at": "2024-10-11T23:52:45.984391Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.991608Z", "completed_at": "2024-10-11T23:52:45.991616Z"}], "thread_id": "Thread-5", "execution_time": 0.14476227760314941, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_observation_suspects", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__hcc_suspecting__stg_core__observation as (\n\n\nselect\n      patient_id\n    , observation_date\n    , result\n    , lower(coalesce(normalized_code_type,source_code_type)) as code_type\n    , coalesce(normalized_code,source_code) as code\n    , data_source\nfrom dev_coco.core.observation\n\n\n), conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n        , data_source\n    from dev_coco.hcc_suspecting._int_prep_conditions\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , result\n        , code_type\n        , code\n        , data_source\n    from __dbt__cte__hcc_suspecting__stg_core__observation\n\n)\n\n, numeric_observations as (\n\n    select\n          patient_id\n        , observation_date\n        \n        , CAST(result AS numeric(28,6)) AS result\n        \n        , code_type\n        , code\n        , data_source\n    from observations\n   \n        where regexp_like(result, '^[+-]?([0-9]*[.])?[0-9]+$')\n    \n\n)\n\n, seed_clinical_concepts as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from dev_coco.hcc_suspecting._value_set_clinical_concepts\n\n)\n\n, seed_hcc_descriptions as (\n\n    select distinct\n          hcc_code\n        , hcc_description\n    from dev_coco.hcc_suspecting._value_set_hcc_descriptions\n\n)\n\n, billed_hccs as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , current_year_billed\n    from dev_coco.hcc_suspecting._int_patient_hcc_history\n\n)\n\n, depression_assessment as (\n\n    select\n          numeric_observations.patient_id\n        , numeric_observations.observation_date\n        , numeric_observations.result\n        , numeric_observations.code_type\n        , numeric_observations.code\n        , numeric_observations.data_source\n        , seed_clinical_concepts.concept_name\n    from numeric_observations\n        inner join seed_clinical_concepts\n            on numeric_observations.code_type = seed_clinical_concepts.code_system\n            and numeric_observations.code = seed_clinical_concepts.code\n    where lower(seed_clinical_concepts.concept_name) = 'depression assessment (phq-9)'\n\n)\n\n, diabetes as (\n\n     select\n          conditions.patient_id\n        , conditions.recorded_date\n        , conditions.condition_type\n        , conditions.code_type\n        , conditions.code\n        , conditions.data_source\n        , seed_clinical_concepts.concept_name\n    from conditions\n        inner join seed_clinical_concepts\n            on conditions.code_type = seed_clinical_concepts.code_system\n            and conditions.code = seed_clinical_concepts.code\n    where lower(seed_clinical_concepts.concept_name) = 'diabetes'\n\n)\n\n, hypertension as (\n\n     select\n          conditions.patient_id\n        , conditions.recorded_date\n        , conditions.condition_type\n        , conditions.code_type\n        , conditions.code\n        , conditions.data_source\n        , seed_clinical_concepts.concept_name\n    from conditions\n        inner join seed_clinical_concepts\n            on conditions.code_type = seed_clinical_concepts.code_system\n            and conditions.code = seed_clinical_concepts.code\n    where lower(seed_clinical_concepts.concept_name) = 'essential hypertension'\n\n)\n\n, obstructive_sleep_apnea as (\n\n     select\n          conditions.patient_id\n        , conditions.recorded_date\n        , conditions.condition_type\n        , conditions.code_type\n        , conditions.code\n        , conditions.data_source\n        , seed_clinical_concepts.concept_name\n    from conditions\n        inner join seed_clinical_concepts\n            on conditions.code_type = seed_clinical_concepts.code_system\n            and conditions.code = seed_clinical_concepts.code\n    where lower(seed_clinical_concepts.concept_name) = 'obstructive sleep apnea'\n\n)\n\n/* BEGIN HCC 48 logic (Morbid Obesity) */\n, bmi_over_30_with_osa as (\n\n    select\n          numeric_observations.patient_id\n        , numeric_observations.data_source\n        , numeric_observations.observation_date\n        , numeric_observations.result as observation_result\n        , obstructive_sleep_apnea.code as condition_code\n        , obstructive_sleep_apnea.recorded_date as condition_date\n        , obstructive_sleep_apnea.concept_name as condition_concept_name\n        , seed_hcc_descriptions.hcc_code\n        , seed_hcc_descriptions.hcc_description\n    from numeric_observations\n        inner join seed_clinical_concepts\n            on numeric_observations.code_type = seed_clinical_concepts.code_system\n            and numeric_observations.code = seed_clinical_concepts.code\n        inner join obstructive_sleep_apnea\n            on numeric_observations.patient_id = obstructive_sleep_apnea.patient_id\n            /* ensure bmi and condition overlaps in the same year */\n            and date_part('year', numeric_observations.observation_date) = date_part('year', obstructive_sleep_apnea.recorded_date)\n        inner join seed_hcc_descriptions\n            on hcc_code = '48'\n    where lower(seed_clinical_concepts.concept_name) = 'bmi'\n    and result >= 30\n\n)\n\n, bmi_over_35_with_diabetes as (\n\n    select\n          numeric_observations.patient_id\n        , numeric_observations.data_source\n        , numeric_observations.observation_date\n        , numeric_observations.result as observation_result\n        , diabetes.code as condition_code\n        , diabetes.recorded_date as condition_date\n        , diabetes.concept_name as condition_concept_name\n        , seed_hcc_descriptions.hcc_code\n        , seed_hcc_descriptions.hcc_description\n    from numeric_observations\n        inner join seed_clinical_concepts\n            on numeric_observations.code_type = seed_clinical_concepts.code_system\n            and numeric_observations.code = seed_clinical_concepts.code\n        inner join diabetes\n            on numeric_observations.patient_id = diabetes.patient_id\n            /* ensure bmi and condition overlaps in the same year */\n            and date_part('year', numeric_observations.observation_date) = date_part('year', diabetes.recorded_date)\n        inner join seed_hcc_descriptions\n            on hcc_code = '48'\n    where lower(seed_clinical_concepts.concept_name) = 'bmi'\n    and result >= 35\n\n)\n\n, bmi_over_35_with_hypertension as (\n\n    select\n          numeric_observations.patient_id\n        , numeric_observations.data_source\n        , numeric_observations.observation_date\n        , numeric_observations.result as observation_result\n        , hypertension.code as condition_code\n        , hypertension.recorded_date as condition_date\n        , hypertension.concept_name as condition_concept_name\n        , seed_hcc_descriptions.hcc_code\n        , seed_hcc_descriptions.hcc_description\n    from numeric_observations\n        inner join seed_clinical_concepts\n            on numeric_observations.code_type = seed_clinical_concepts.code_system\n            and numeric_observations.code = seed_clinical_concepts.code\n        inner join hypertension\n            on numeric_observations.patient_id = hypertension.patient_id\n            /* ensure bmi and condition overlaps in the same year */\n            and date_part('year', numeric_observations.observation_date) = date_part('year', hypertension.recorded_date)\n        inner join seed_hcc_descriptions\n            on hcc_code = '48'\n    where lower(seed_clinical_concepts.concept_name) = 'bmi'\n    and result >= 35\n\n)\n\n, bmi_over_40 as (\n\n    select\n          numeric_observations.patient_id\n        , numeric_observations.data_source\n        , numeric_observations.observation_date\n        , numeric_observations.result as observation_result\n        , cast(null as TEXT) as condition_code\n        , cast(null as date) as condition_date\n        , cast(null as TEXT) as condition_concept_name\n        , seed_hcc_descriptions.hcc_code\n        , seed_hcc_descriptions.hcc_description\n    from numeric_observations\n        inner join seed_clinical_concepts\n            on numeric_observations.code_type = seed_clinical_concepts.code_system\n            and numeric_observations.code = seed_clinical_concepts.code\n        inner join seed_hcc_descriptions\n            on hcc_code = '48'\n    where lower(seed_clinical_concepts.concept_name) = 'bmi'\n    and result >= 40\n\n)\n\n, hcc_48_unioned as (\n\n    select * from bmi_over_30_with_osa\n    union all\n    select * from bmi_over_35_with_diabetes\n    union all\n    select * from bmi_over_35_with_hypertension\n    union all\n    select * from bmi_over_40\n\n)\n\n, hcc_48_suspect as (\n\n    select\n          patient_id\n        , data_source\n        , observation_date\n        , observation_result\n        , condition_code\n        , condition_date\n        , condition_concept_name\n        , hcc_code\n        , hcc_description\n        , 'BMI result ' || observation_result || case when condition_code is null then ''  else ' with ' || condition_concept_name || '(' || condition_code || ' on ' || condition_date || ')' end as contributing_factor\n    from hcc_48_unioned\n\n)\n/* END HCC 48 logic */\n\n/* BEGIN HCC 155 logic (Major Depression, Moderate or Severe, without Psychosis)\n\n   to determine a positive PHQ-9 assessment, we look at the past 3 screenings\n   for a patient and take the highest result\n*/\n, eligible_depression_assessments as (\n\n    select\n          depression_assessment.patient_id\n        , depression_assessment.observation_date\n        , depression_assessment.result\n        , depression_assessment.code_type\n        , depression_assessment.code\n        , depression_assessment.data_source\n        , depression_assessment.concept_name\n        , row_number() over (\n            partition by\n                  depression_assessment.patient_id\n                , depression_assessment.data_source\n            order by\n                case when depression_assessment.observation_date is null then 1 else 0 end,\n                depression_assessment.observation_date desc\n        ) assessment_order\n    from depression_assessment\n\n)\n\n, depression_assessments_ordered as (\n\n    select\n          patient_id\n        , observation_date\n        , code_type\n        , code\n        , data_source\n        , concept_name\n        , result\n        , row_number() over (\n            partition by\n                  patient_id\n                , data_source\n            --order by result desc nulls last\n            order by\n                case when result is null then 1 else 0 end,\n                result desc\n        ) as result_order --order the last three assessments by result value\n    from eligible_depression_assessments\n    where assessment_order <= 3\n\n)\n\n, hcc_155_suspect as (\n\n    select\n          depression_assessments_ordered.patient_id\n        , depression_assessments_ordered.data_source\n        , depression_assessments_ordered.observation_date\n        , depression_assessments_ordered.result as observation_result\n        , cast(null as TEXT) as condition_code\n        , cast(null as date) as condition_date\n        , depression_assessments_ordered.concept_name as condition_concept_name\n        , seed_hcc_descriptions.hcc_code\n        , seed_hcc_descriptions.hcc_description\n        , 'PHQ-9 result ' || depression_assessments_ordered.result || ' on ' || depression_assessments_ordered.observation_date as contributing_factor\n    from depression_assessments_ordered\n        inner join seed_hcc_descriptions\n            on hcc_code = '155'\n    where result_order = 1\n    and result >= 15\n\n)\n\n/* END HCC 155 logic */\n\n, unioned as (\n\n    select * from hcc_48_suspect\n    union all\n    select * from hcc_155_suspect\n\n)\n\n, add_billed_flag as (\n\n    select\n          unioned.patient_id\n        , unioned.data_source\n        , unioned.observation_date\n        , unioned.observation_result\n        , unioned.condition_code\n        , unioned.condition_date\n        , unioned.condition_concept_name\n        , unioned.hcc_code\n        , unioned.hcc_description\n        , unioned.contributing_factor\n        , billed_hccs.current_year_billed\n    from unioned\n        left join billed_hccs\n            on unioned.patient_id = billed_hccs.patient_id\n            and unioned.data_source = billed_hccs.data_source\n            and unioned.hcc_code = billed_hccs.hcc_code\n\n)\n\n, add_standard_fields as (\n\n    select\n          patient_id\n        , data_source\n        , observation_date\n        , observation_result\n        , condition_code\n        , condition_date\n        , condition_concept_name\n        , hcc_code\n        , hcc_description\n        , contributing_factor\n        , current_year_billed\n        , cast('Observation suspect' as TEXT) as reason\n        , observation_date as suspect_date\n    from add_billed_flag\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(data_source as TEXT) as data_source\n        , cast(observation_date as date) as observation_date\n        , cast(observation_result as TEXT) as observation_result\n        , cast(condition_code as TEXT) as condition_code\n        , cast(condition_date as date) as condition_date\n        , cast(condition_concept_name as TEXT) as condition_concept_name\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        \n            , cast(current_year_billed as boolean) as current_year_billed\n        \n        , cast(reason as TEXT) as reason\n        , cast(contributing_factor as TEXT) as contributing_factor\n        , cast(suspect_date as date) as suspect_date\n    from add_standard_fields\n\n)\n\nselect\n      patient_id\n    , data_source\n    , observation_date\n    , observation_result\n    , condition_code\n    , condition_date\n    , condition_concept_name\n    , hcc_code\n    , hcc_description\n    , current_year_billed\n    , reason\n    , contributing_factor\n    , suspect_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.hcc_suspecting._int_observation_suspects"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.968098Z", "completed_at": "2024-10-11T23:52:45.984920Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:45.995410Z", "completed_at": "2024-10-11T23:52:45.995416Z"}], "thread_id": "Thread-6", "execution_time": 0.13191914558410645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long", "compiled": true, "compiled_code": "\n\n\nwith conditions_unioned as (\n\n    select * from dev_coco.chronic_conditions._int_cms_chronic_condition_all\n    union distinct\n    select * from dev_coco.chronic_conditions._int_cms_chronic_condition_hiv_aids\n    union distinct\n    select * from dev_coco.chronic_conditions._int_cms_chronic_condition_oud\n\n)\n\n\nselect\n      patient_id\n    , claim_id\n    , start_date\n    , chronic_condition_type\n    , condition_category\n    , condition\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom conditions_unioned", "relation_name": "dev_coco.chronic_conditions.cms_chronic_conditions_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.986567Z", "completed_at": "2024-10-11T23:52:46.000096Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.012755Z", "completed_at": "2024-10-11T23:52:46.012765Z"}], "thread_id": "Thread-3", "execution_time": 0.0898752212524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_.f44489eec5", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        condition as value_field,\n        count(*) as n_records\n\n    from dev_coco.chronic_conditions._int_cms_chronic_condition_oud\n    group by condition\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Opioid Use Disorder (OUD)'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.992075Z", "completed_at": "2024-10-11T23:52:46.005928Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.021932Z", "completed_at": "2024-10-11T23:52:46.021940Z"}], "thread_id": "Thread-4", "execution_time": 0.046942949295043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id.7ee5fe28fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom dev_coco.chronic_conditions._int_cms_chronic_condition_oud\nwhere claim_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:45.996494Z", "completed_at": "2024-10-11T23:52:46.020201Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.023376Z", "completed_at": "2024-10-11T23:52:46.023381Z"}], "thread_id": "Thread-10", "execution_time": 0.047148942947387695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_condition.6800b245ea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom dev_coco.chronic_conditions._int_cms_chronic_condition_oud\nwhere condition is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.002397Z", "completed_at": "2024-10-11T23:52:46.022993Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.025632Z", "completed_at": "2024-10-11T23:52:46.025636Z"}], "thread_id": "Thread-7", "execution_time": 0.039420127868652344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id.382354e0d0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_coco.chronic_conditions._int_cms_chronic_condition_oud\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.006646Z", "completed_at": "2024-10-11T23:52:46.024255Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.032436Z", "completed_at": "2024-10-11T23:52:46.032442Z"}], "thread_id": "Thread-2", "execution_time": 0.04175305366516113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_hcc_hierarchy", "compiled": true, "compiled_code": "\n/*\n    Staging HCCs that will be used in disease factor calculations.\n    Final output for each CMS model version includes:\n        - hccs without a hierarchy\n        - lower-level hccs with hierarchy where top-level hcc is missing\n        - top-level hccs from hierarchy\n*/\n\nwith hcc_mapping as (\n\n    select distinct\n          patient_id\n        , hcc_code\n        , model_version\n        , payment_year\n    from dev_coco.cms_hcc._int_hcc_mapping\n\n)\n\n, seed_hcc_hierarchy as (\n\n    select\n          model_version\n        , hcc_code\n        , description\n        , hccs_to_exclude\n    from dev_coco.cms_hcc._value_set_disease_hierarchy\n\n)\n\n/*\n    selecting hccs that do not have a hierarchy\n    all codes in this cte are included in final output\n*/\n, hccs_without_hierarchy as (\n\n    select distinct\n          hcc_mapping.patient_id\n        , hcc_mapping.model_version\n        , hcc_mapping.payment_year\n        , hcc_mapping.hcc_code\n    from hcc_mapping\n        left join seed_hcc_hierarchy as hcc_top_level\n            on hcc_mapping.hcc_code = hcc_top_level.hcc_code\n            and hcc_mapping.model_version = hcc_top_level.model_version\n        left join seed_hcc_hierarchy as hcc_exclusions\n            on hcc_mapping.hcc_code = hcc_exclusions.hccs_to_exclude\n            and hcc_mapping.model_version = hcc_exclusions.model_version\n    where hcc_top_level.hcc_code is null\n        and hcc_exclusions.hccs_to_exclude is null\n\n)\n\n/*\n    selecting hccs that have a hierarchy to be evaluated in the next cte\n*/\n, hccs_with_hierarchy as (\n\n    select\n          hcc_mapping.patient_id\n        , hcc_mapping.model_version\n        , hcc_mapping.payment_year\n        , hcc_mapping.hcc_code\n        , seed_hcc_hierarchy.hcc_code as top_level_hcc\n    from hcc_mapping\n        inner join seed_hcc_hierarchy\n            on hcc_mapping.hcc_code = seed_hcc_hierarchy.hccs_to_exclude\n            and hcc_mapping.model_version = seed_hcc_hierarchy.model_version\n\n)\n\n/*\n    applying hcc hierarchy and grouping by patient and hcc\n    to account for multiple hcc combinations\n    minimum HCC is included following CMS's severity logic\n*/\n, hierarchy_applied as (\n\n    select\n          hccs_with_hierarchy.patient_id\n        , hccs_with_hierarchy.model_version\n        , hccs_with_hierarchy.payment_year\n        , hccs_with_hierarchy.hcc_code\n        , min(hcc_mapping.hcc_code) as top_level_hcc\n    from hccs_with_hierarchy\n        left join hcc_mapping\n            on hcc_mapping.patient_id = hccs_with_hierarchy.patient_id\n            and hcc_mapping.hcc_code = hccs_with_hierarchy.top_level_hcc\n            and hcc_mapping.model_version = hccs_with_hierarchy.model_version\n    group by\n          hccs_with_hierarchy.patient_id\n        , hccs_with_hierarchy.model_version\n        , hccs_with_hierarchy.payment_year\n        , hccs_with_hierarchy.hcc_code\n\n)\n\n/*\n    selecting lower-level hccs in hierarchy\n    all codes in this cte are included in final output\n*/\n, lower_level_inclusions as (\n\n    select distinct\n          patient_id\n        , model_version\n        , payment_year\n        , case\n            when top_level_hcc is not null then top_level_hcc\n            else hcc_code\n          end as hcc_code\n    from hierarchy_applied\n\n)\n\n/*\n    selecting top-level hccs not in previous steps\n    all codes in this cte are included in final output\n*/\n, top_level_inclusions as (\n\n    select distinct\n          hcc_mapping.patient_id\n        , hcc_mapping.model_version\n        , hcc_mapping.payment_year\n        , hcc_mapping.hcc_code\n    from hcc_mapping\n        inner join seed_hcc_hierarchy\n            on hcc_mapping.hcc_code = seed_hcc_hierarchy.hcc_code\n            and hcc_mapping.model_version = seed_hcc_hierarchy.model_version\n        left join lower_level_inclusions\n            on hcc_mapping.patient_id = lower_level_inclusions.patient_id\n            and hcc_mapping.hcc_code = lower_level_inclusions.hcc_code\n            and hcc_mapping.model_version = lower_level_inclusions.model_version\n        left join hierarchy_applied\n            on hcc_mapping.patient_id = hierarchy_applied.patient_id\n            and hcc_mapping.hcc_code = hierarchy_applied.hcc_code\n            and hcc_mapping.model_version = hierarchy_applied.model_version\n    where lower_level_inclusions.hcc_code is null\n        and hierarchy_applied.top_level_hcc is null\n\n)\n\n, unioned as (\n\n    select * from hccs_without_hierarchy\n    union all\n    select * from lower_level_inclusions\n    union all\n    select * from top_level_inclusions\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n        , cast(hcc_code as TEXT) as hcc_code\n    from unioned\n\n)\n\nselect\n      patient_id\n    , model_version\n    , payment_year\n    , hcc_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.cms_hcc._int_hcc_hierarchy"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.013556Z", "completed_at": "2024-10-11T23:52:46.024753Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.038653Z", "completed_at": "2024-10-11T23:52:46.038659Z"}], "thread_id": "Thread-9", "execution_time": 0.047389984130859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__pmpm_prep", "compiled": true, "compiled_code": "\n\nwith combine as (\n  select\n      a.patient_id\n    , a.year_month\n    , a.payer\n    , a.plan\n    , a.data_source\n    , a.payer_attributed_provider\n    , a.payer_attributed_provider_practice\n    , a.payer_attributed_provider_organization\n    , a.payer_attributed_provider_lob\n    , a.custom_attributed_provider\n    , a.custom_attributed_provider_practice\n    , a.custom_attributed_provider_organization\n    , a.custom_attributed_provider_lob\n\n    -- service cat 1 paid\n    , coalesce(b.inpatient_paid, 0) as inpatient_paid\n    , coalesce(b.outpatient_paid, 0) as outpatient_paid\n    , coalesce(b.office_based_paid, 0) as office_based_paid\n    , coalesce(b.ancillary_paid, 0) as ancillary_paid\n    , coalesce(b.other_paid, 0) as other_paid\n    , coalesce(b.pharmacy_paid, 0) as pharmacy_paid\n\n    -- service cat 2 paid\n    , coalesce(c.acute_inpatient_paid, 0) as acute_inpatient_paid\n    , coalesce(c.ambulance_paid, 0) as ambulance_paid\n    , coalesce(c.ambulatory_surgery_center_paid, 0) as ambulatory_surgery_center_paid\n    , coalesce(c.dialysis_paid, 0) as dialysis_paid\n    , coalesce(c.durable_medical_equipment_paid, 0) as durable_medical_equipment_paid\n    , coalesce(c.emergency_department_paid, 0) as emergency_department_paid\n    , coalesce(c.home_health_paid, 0) as home_health_paid\n    , coalesce(c.inpatient_hospice_paid, 0) as inpatient_hospice_paid\n    , coalesce(c.inpatient_psychiatric_paid, 0) as inpatient_psychiatric_paid\n    , coalesce(c.inpatient_rehabilitation_paid, 0) as inpatient_rehabilitation_paid\n    , coalesce(c.lab_paid, 0) as lab_paid\n    , coalesce(c.observation_paid, 0) as observation_paid\n    , coalesce(c.office_based_other_paid, 0) as office_based_other_paid\n    , coalesce(c.office_based_ptotst_paid, 0) as office_based_pt_ot_st_paid\n    , coalesce(c.office_based_radiology_paid, 0) as office_based_radiology_paid\n    , coalesce(c.office_based_surgery_paid, 0) as office_based_surgery_paid\n    , coalesce(c.office_based_visit_paid, 0) as office_based_visit_paid\n    , coalesce(c.other_paid, 0) as other_paid_2\n    , coalesce(c.outpatient_hospice_paid, 0) as outpatient_hospice_paid\n    , coalesce(c.outpatient_hospital_or_clinic_paid, 0) as outpatient_hospital_or_clinic_paid\n    , coalesce(c.outpatient_ptotst_paid, 0) as outpatient_pt_ot_st_paid\n    , coalesce(c.outpatient_psychiatric_paid, 0) as outpatient_psychiatric_paid\n    , coalesce(c.outpatient_radiology_paid, 0) as outpatient_radiology_paid\n    , coalesce(c.outpatient_rehabilitation_paid, 0) as outpatient_rehabilitation_paid\n    , coalesce(c.outpatient_surgery_paid, 0) as outpatient_surgery_paid\n    , coalesce(c.pharmacy_paid, 0) as pharmacy_paid_2\n    , coalesce(c.skilled_nursing_paid, 0) as skilled_nursing_paid\n    , coalesce(c.telehealth_visit_paid, 0) as telehealth_visit_paid\n    , coalesce(c.urgent_care_paid, 0) as urgent_care_paid\n\n    -- service cat 1 allowed\n    , coalesce(d.inpatient_allowed, 0) as inpatient_allowed\n    , coalesce(d.outpatient_allowed, 0) as outpatient_allowed\n    , coalesce(d.office_based_allowed, 0) as office_based_allowed\n    , coalesce(d.ancillary_allowed, 0) as ancillary_allowed\n    , coalesce(d.other_allowed, 0) as other_allowed\n    , coalesce(d.pharmacy_allowed, 0) as pharmacy_allowed\n\n    -- service cat 2 allowed\n    , coalesce(e.acute_inpatient_allowed, 0) as acute_inpatient_allowed\n    , coalesce(e.ambulance_allowed, 0) as ambulance_allowed\n    , coalesce(e.ambulatory_surgery_center_allowed, 0) as ambulatory_surgery_center_allowed\n    , coalesce(e.dialysis_allowed, 0) as dialysis_allowed\n    , coalesce(e.durable_medical_equipment_allowed, 0) as durable_medical_equipment_allowed\n    , coalesce(e.emergency_department_allowed, 0) as emergency_department_allowed\n    , coalesce(e.home_health_allowed, 0) as home_health_allowed\n    , coalesce(e.inpatient_hospice_allowed, 0) as inpatient_hospice_allowed\n    , coalesce(e.inpatient_psychiatric_allowed, 0) as inpatient_psychiatric_allowed\n    , coalesce(e.inpatient_rehabilitation_allowed, 0) as inpatient_rehabilitation_allowed\n    , coalesce(e.lab_allowed, 0) as lab_allowed\n    , coalesce(e.observation_allowed, 0) as observation_allowed\n    , coalesce(e.office_based_other_allowed, 0) as office_based_other_allowed\n    , coalesce(e.office_based_ptotst_allowed, 0) as office_based_pt_ot_st_allowed\n    , coalesce(e.office_based_radiology_allowed, 0) as office_based_radiology_allowed\n    , coalesce(e.office_based_surgery_allowed, 0) as office_based_surgery_allowed\n    , coalesce(e.office_based_visit_allowed, 0) as office_based_visit_allowed\n    , coalesce(e.other_allowed, 0) as other_allowed_2\n    , coalesce(e.outpatient_hospice_allowed, 0) as outpatient_hospice_allowed\n    , coalesce(e.outpatient_hospital_or_clinic_allowed, 0) as outpatient_hospital_or_clinic_allowed\n    , coalesce(e.outpatient_ptotst_allowed, 0) as outpatient_pt_ot_st_allowed\n    , coalesce(e.outpatient_psychiatric_allowed, 0) as outpatient_psychiatric_allowed\n    , coalesce(e.outpatient_radiology_allowed, 0) as outpatient_radiology_allowed\n    , coalesce(e.outpatient_rehabilitation_allowed, 0) as outpatient_rehabilitation_allowed\n    , coalesce(e.outpatient_surgery_allowed, 0) as outpatient_surgery_allowed\n    , coalesce(e.pharmacy_allowed, 0) as pharmacy_allowed_2\n    , coalesce(e.skilled_nursing_allowed, 0) as skilled_nursing_allowed\n    , coalesce(e.telehealth_visit_allowed, 0) as telehealth_visit_allowed\n    , coalesce(e.urgent_care_allowed, 0) as urgent_care_allowed\n\n  from dev_coco.core.member_months as a\n  left join dev_coco.financial_pmpm._int_service_category_1_paid_pivot as b\n    on a.patient_id = b.patient_id\n    and a.year_month = b.year_month\n    and a.payer = b.payer\n    and a.plan = b.plan\n  left join dev_coco.financial_pmpm._int_service_category_2_paid_pivot as c\n    on a.patient_id = c.patient_id\n    and a.year_month = c.year_month\n    and a.payer = c.payer\n    and a.plan = c.plan\n  left join dev_coco.financial_pmpm._int_service_category_1_allowed_pivot as d\n    on a.patient_id = d.patient_id\n    and a.year_month = d.year_month\n    and a.payer = d.payer\n    and a.plan = d.plan\n  left join dev_coco.financial_pmpm._int_service_category_2_allowed_pivot as e\n    on a.patient_id = e.patient_id\n    and a.year_month = e.year_month\n    and a.payer = e.payer\n    and a.plan = e.plan\n)\n\nselect\n    *\n  , inpatient_paid + outpatient_paid + office_based_paid + ancillary_paid + other_paid + pharmacy_paid as total_paid\n  , inpatient_paid + outpatient_paid + office_based_paid + ancillary_paid + other_paid as medical_paid\n  , inpatient_allowed + outpatient_allowed + office_based_allowed + ancillary_allowed + other_allowed + pharmacy_allowed as total_allowed\n  , inpatient_allowed + outpatient_allowed + office_based_allowed + ancillary_allowed + other_allowed as medical_allowed\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom combine", "relation_name": "dev_coco.financial_pmpm.pmpm_prep"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.032912Z", "completed_at": "2024-10-11T23:52:46.047688Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.058007Z", "completed_at": "2024-10-11T23:52:46.058016Z"}], "thread_id": "Thread-6", "execution_time": 0.03677105903625488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_adhras_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_coco.quality_measures._int_adhras_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_coco.quality_measures._int_adhras_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_adhras_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_adhras_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.026395Z", "completed_at": "2024-10-11T23:52:46.049323Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.066696Z", "completed_at": "2024-10-11T23:52:46.066703Z"}], "thread_id": "Thread-5", "execution_time": 0.04593181610107422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_adh_diabetes_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_coco.quality_measures._int_adh_diabetes_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_coco.quality_measures._int_adh_diabetes_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_adh_diabetes_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_adh_diabetes_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.041556Z", "completed_at": "2024-10-11T23:52:46.071340Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.076448Z", "completed_at": "2024-10-11T23:52:46.076455Z"}], "thread_id": "Thread-3", "execution_time": 0.0512089729309082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__list", "compiled": true, "compiled_code": "\n\nwith hcc_history_suspects as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , reason\n        , contributing_factor\n        , suspect_date\n    from dev_coco.hcc_suspecting._int_patient_hcc_history\n    \n        where (current_year_billed = false\n            or current_year_billed is null)\n    \n\n)\n\n, comorbidity_suspects as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , reason\n        , contributing_factor\n        , suspect_date\n    from dev_coco.hcc_suspecting._int_comorbidity_suspects\n    \n        where (current_year_billed = false\n            or current_year_billed is null)\n    \n\n)\n\n, observation_suspects as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , reason\n        , contributing_factor\n        , suspect_date\n    from dev_coco.hcc_suspecting._int_observation_suspects\n    \n        where (current_year_billed = false\n            or current_year_billed is null)\n    \n\n)\n\n, lab_suspects as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , reason\n        , contributing_factor\n        , suspect_date\n    from dev_coco.hcc_suspecting._int_lab_suspects\n    \n        where (current_year_billed = false\n            or current_year_billed is null)\n    \n\n)\n\n, medication_suspects as (\n\n    select distinct\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , reason\n        , contributing_factor\n        , suspect_date\n    from dev_coco.hcc_suspecting._int_medication_suspects\n    \n        where (current_year_billed = false\n            or current_year_billed is null)\n    \n\n)\n\n, unioned as (\n\n    select * from hcc_history_suspects\n    union all\n    select * from comorbidity_suspects\n    union all\n    select * from observation_suspects\n    union all\n    select * from lab_suspects\n    union all\n    select * from medication_suspects\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(data_source as TEXT) as data_source\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        , cast(reason as TEXT) as reason\n        , cast(contributing_factor as TEXT) as contributing_factor\n        , cast(suspect_date as date) as suspect_date\n    from unioned\n\n)\n\nselect\n      patient_id\n    , data_source\n    , hcc_code\n    , hcc_description\n    , reason\n    , contributing_factor\n    , suspect_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.hcc_suspecting.list"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.067530Z", "completed_at": "2024-10-11T23:52:46.084628Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.086706Z", "completed_at": "2024-10-11T23:52:46.086713Z"}], "thread_id": "Thread-10", "execution_time": 0.04682421684265137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_chronic_conditions__cms_chronic_conditions_long_patient_id__claim_id__start_date__condition.8088fbf90d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        patient_id, claim_id, start_date, condition\n    from dev_coco.chronic_conditions.cms_chronic_conditions_long\n    group by patient_id, claim_id, start_date, condition\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.073049Z", "completed_at": "2024-10-11T23:52:46.086132Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.088642Z", "completed_at": "2024-10-11T23:52:46.088648Z"}], "thread_id": "Thread-7", "execution_time": 0.039151906967163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_claim_id.74242d2abc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom dev_coco.chronic_conditions.cms_chronic_conditions_long\nwhere claim_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.080216Z", "completed_at": "2024-10-11T23:52:46.087156Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.095472Z", "completed_at": "2024-10-11T23:52:46.095479Z"}], "thread_id": "Thread-9", "execution_time": 0.04412221908569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_patient_id.551c145c85", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_coco.chronic_conditions.cms_chronic_conditions_long\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.076944Z", "completed_at": "2024-10-11T23:52:46.087983Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.102107Z", "completed_at": "2024-10-11T23:52:46.102115Z"}], "thread_id": "Thread-2", "execution_time": 0.052040815353393555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_condition.e794460ae3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom dev_coco.chronic_conditions.cms_chronic_conditions_long\nwhere condition is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.089150Z", "completed_at": "2024-10-11T23:52:46.104572Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.112476Z", "completed_at": "2024-10-11T23:52:46.112483Z"}], "thread_id": "Thread-6", "execution_time": 0.02819681167602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_disabled_interaction_factors", "compiled": true, "compiled_code": "\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , institutional_status\n        , model_version\n        , payment_year\n    from dev_coco.cms_hcc._int_demographic_factors\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n        , model_version\n    from dev_coco.cms_hcc._int_hcc_hierarchy\n\n)\n\n, seed_interaction_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , institutional_status\n        , short_name\n        , description\n        , hcc_code\n        , coefficient\n    from dev_coco.cms_hcc._value_set_disabled_interaction_factors\n\n)\n\n, demographics_with_hccs as (\n\n    select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , hcc_hierarchy.hcc_code\n    from demographics\n        inner join hcc_hierarchy\n            on demographics.patient_id = hcc_hierarchy.patient_id\n            and demographics.model_version = hcc_hierarchy.model_version\n\n)\n\n, interactions as (\n\n    select\n          demographics_with_hccs.patient_id\n        , demographics_with_hccs.model_version\n        , demographics_with_hccs.payment_year\n        , seed_interaction_factors.factor_type\n        , seed_interaction_factors.description\n        , seed_interaction_factors.coefficient\n    from demographics_with_hccs\n        inner join seed_interaction_factors\n            on demographics_with_hccs.enrollment_status = seed_interaction_factors.enrollment_status\n            and demographics_with_hccs.institutional_status = seed_interaction_factors.institutional_status\n            and demographics_with_hccs.hcc_code = seed_interaction_factors.hcc_code\n            and demographics_with_hccs.model_version = seed_interaction_factors.model_version\n\n)\n\n, add_data_types as (\n\nselect\n      cast(patient_id as TEXT) as patient_id\n    , cast(description as TEXT) as description\n    , round(cast(coefficient as numeric(28,6)),3) as coefficient\n    , cast(factor_type as TEXT) as factor_type\n    , cast(model_version as TEXT) as model_version\n    , cast(payment_year as integer) as payment_year\nfrom interactions\n\n)\n\nselect\n      patient_id\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.cms_hcc._int_disabled_interaction_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.096325Z", "completed_at": "2024-10-11T23:52:46.111174Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.113220Z", "completed_at": "2024-10-11T23:52:46.113224Z"}], "thread_id": "Thread-5", "execution_time": 0.02814006805419922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_disease_factors", "compiled": true, "compiled_code": "\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from dev_coco.cms_hcc._int_demographic_factors\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n        , model_version\n    from dev_coco.cms_hcc._int_hcc_hierarchy\n\n)\n\n, seed_disease_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , hcc_code\n        , description\n        , coefficient\n    from dev_coco.cms_hcc._value_set_disease_factors\n\n)\n\n, demographics_with_hccs as (\n\n    select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.gender\n        , demographics.age_group\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , hcc_hierarchy.hcc_code\n    from demographics\n        inner join hcc_hierarchy\n            on demographics.patient_id = hcc_hierarchy.patient_id\n            and demographics.model_version = hcc_hierarchy.model_version\n\n)\n\n, disease_factors as (\n\n    select\n          demographics_with_hccs.patient_id\n        , demographics_with_hccs.hcc_code\n        , demographics_with_hccs.model_version\n        , demographics_with_hccs.payment_year\n        , seed_disease_factors.factor_type\n        , seed_disease_factors.description\n        , seed_disease_factors.coefficient\n    from demographics_with_hccs\n        inner join seed_disease_factors\n            on demographics_with_hccs.enrollment_status = seed_disease_factors.enrollment_status\n            and demographics_with_hccs.medicaid_status = seed_disease_factors.medicaid_status\n            and demographics_with_hccs.dual_status = seed_disease_factors.dual_status\n            and demographics_with_hccs.orec = seed_disease_factors.orec\n            and demographics_with_hccs.institutional_status = seed_disease_factors.institutional_status\n            and demographics_with_hccs.hcc_code = seed_disease_factors.hcc_code\n            and demographics_with_hccs.model_version = seed_disease_factors.model_version\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(description as TEXT) as hcc_description\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(factor_type as TEXT) as factor_type\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from disease_factors\n\n)\n\nselect\n      patient_id\n    , hcc_code\n    , hcc_description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.cms_hcc._int_disease_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.105226Z", "completed_at": "2024-10-11T23:52:46.120003Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.131163Z", "completed_at": "2024-10-11T23:52:46.131171Z"}], "thread_id": "Thread-3", "execution_time": 0.04293990135192871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_disease_interaction_factors", "compiled": true, "compiled_code": "\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from dev_coco.cms_hcc._int_demographic_factors\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n        , model_version\n    from dev_coco.cms_hcc._int_hcc_hierarchy\n\n)\n\n, seed_interaction_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , short_name\n        , description\n        , hcc_code_1\n        , hcc_code_2\n        , coefficient\n    from dev_coco.cms_hcc._value_set_disease_interaction_factors\n\n)\n\n, demographics_with_hccs as (\n\n    select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , hcc_hierarchy.hcc_code\n    from demographics\n        inner join hcc_hierarchy\n            on demographics.patient_id = hcc_hierarchy.patient_id\n            and demographics.model_version = hcc_hierarchy.model_version\n\n)\n\n, demographics_with_interactions as (\n\n    select\n          demographics_with_hccs.patient_id\n        , demographics_with_hccs.model_version\n        , demographics_with_hccs.payment_year\n        , interactions_code_1.factor_type\n        , interactions_code_1.description\n        , interactions_code_1.hcc_code_1\n        , interactions_code_1.hcc_code_2\n        , interactions_code_1.coefficient\n    from demographics_with_hccs\n        inner join seed_interaction_factors as interactions_code_1\n            on demographics_with_hccs.enrollment_status = interactions_code_1.enrollment_status\n            and demographics_with_hccs.medicaid_status = interactions_code_1.medicaid_status\n            and demographics_with_hccs.dual_status = interactions_code_1.dual_status\n            and demographics_with_hccs.orec = interactions_code_1.orec\n            and demographics_with_hccs.institutional_status = interactions_code_1.institutional_status\n            and demographics_with_hccs.hcc_code = interactions_code_1.hcc_code_1\n            and demographics_with_hccs.model_version = interactions_code_1.model_version\n\n)\n\n, disease_interactions as (\n\n    select\n          demographics_with_interactions.patient_id\n        , demographics_with_interactions.factor_type\n        , demographics_with_interactions.hcc_code_1\n        , demographics_with_interactions.hcc_code_2\n        , demographics_with_interactions.description\n        , demographics_with_interactions.coefficient\n        , demographics_with_interactions.model_version\n        , demographics_with_interactions.payment_year\n    from demographics_with_interactions\n        inner join demographics_with_hccs as interactions_code_2\n            on demographics_with_interactions.patient_id = interactions_code_2.patient_id\n            and demographics_with_interactions.hcc_code_2 = interactions_code_2.hcc_code\n            and demographics_with_interactions.model_version = interactions_code_2.model_version\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(hcc_code_1 as TEXT) as hcc_code_1\n        , cast(hcc_code_2 as TEXT) as hcc_code_2\n        , cast(description as TEXT) as description\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(factor_type as TEXT) as factor_type\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from disease_interactions\n\n)\n\nselect\n      patient_id\n    , hcc_code_1\n    , hcc_code_2\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.cms_hcc._int_disease_interaction_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.113991Z", "completed_at": "2024-10-11T23:52:46.131979Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.139233Z", "completed_at": "2024-10-11T23:52:46.139240Z"}], "thread_id": "Thread-10", "execution_time": 0.03596687316894531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_hcc_count_factors", "compiled": true, "compiled_code": "\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from dev_coco.cms_hcc._int_demographic_factors\n\n)\n\n, seed_payment_hcc_count_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , payment_hcc_count\n        , description\n        , coefficient\n    from dev_coco.cms_hcc._value_set_payment_hcc_count_factors\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n        , model_version\n    from dev_coco.cms_hcc._int_hcc_hierarchy\n\n)\n\n, demographics_with_hcc_counts as (\n\n    select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , count(hcc_hierarchy.hcc_code) as hcc_count\n    from demographics\n        inner join hcc_hierarchy\n            on demographics.patient_id = hcc_hierarchy.patient_id\n            and demographics.model_version = hcc_hierarchy.model_version\n    group by\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n\n)\n\n, hcc_counts_normalized as (\n\n    select\n          patient_id\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n        , case\n            when hcc_count >= 10 then '>=10'\n            else cast(hcc_count as TEXT)\n          end as hcc_count_string\n    from demographics_with_hcc_counts\n\n)\n\n, hcc_counts as (\n\n    select\n          hcc_counts_normalized.patient_id\n        , hcc_counts_normalized.model_version\n        , hcc_counts_normalized.payment_year\n        , seed_payment_hcc_count_factors.factor_type\n        , seed_payment_hcc_count_factors.description\n        , seed_payment_hcc_count_factors.coefficient\n    from hcc_counts_normalized\n        inner join seed_payment_hcc_count_factors\n            on hcc_counts_normalized.enrollment_status = seed_payment_hcc_count_factors.enrollment_status\n            and hcc_counts_normalized.medicaid_status = seed_payment_hcc_count_factors.medicaid_status\n            and hcc_counts_normalized.dual_status = seed_payment_hcc_count_factors.dual_status\n            and hcc_counts_normalized.orec = seed_payment_hcc_count_factors.orec\n            and hcc_counts_normalized.institutional_status = seed_payment_hcc_count_factors.institutional_status\n            and hcc_counts_normalized.hcc_count_string = seed_payment_hcc_count_factors.payment_hcc_count\n            and hcc_counts_normalized.model_version = seed_payment_hcc_count_factors.model_version\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(description as TEXT) as description\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(factor_type as TEXT) as factor_type\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from hcc_counts\n\n)\n\nselect\n      patient_id\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.cms_hcc._int_hcc_count_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.121157Z", "completed_at": "2024-10-11T23:52:46.138995Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.152290Z", "completed_at": "2024-10-11T23:52:46.152297Z"}], "thread_id": "Thread-7", "execution_time": 0.040801048278808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__pmpm_payer", "compiled": true, "compiled_code": "\n\nselect\n    year_month\n  , payer\n  , data_source\n  , count(1) as member_months\n  , sum(total_paid) / count(1) as total_paid\n  , sum(medical_paid) / count(1) as medical_paid\n  , sum(inpatient_paid) / count(1) as inpatient_paid\n  , sum(outpatient_paid) / count(1) as outpatient_paid\n  , sum(office_based_paid) / count(1) as office_based_paid\n  , sum(ancillary_paid) / count(1) as ancillary_paid\n  , sum(other_paid) / count(1) as other_paid\n  , sum(pharmacy_paid) / count(1) as pharmacy_paid\n  , sum(acute_inpatient_paid) / count(1) as acute_inpatient_paid\n  , sum(ambulance_paid) / count(1) as ambulance_paid\n  , sum(ambulatory_surgery_center_paid) / count(1) as ambulatory_surgery_center_paid\n  , sum(dialysis_paid) / count(1) as dialysis_paid\n  , sum(durable_medical_equipment_paid) / count(1) as durable_medical_equipment_paid\n  , sum(emergency_department_paid) / count(1) as emergency_department_paid\n  , sum(home_health_paid) / count(1) as home_health_paid\n  , sum(inpatient_hospice_paid) / count(1) as inpatient_hospice_paid\n  , sum(inpatient_psychiatric_paid) / count(1) as inpatient_psychiatric_paid\n  , sum(inpatient_rehabilitation_paid) / count(1) as inpatient_rehabilitation_paid\n  , sum(lab_paid) / count(1) as lab_paid\n  , sum(observation_paid) / count(1) as observation_paid\n  , sum(office_based_other_paid) / count(1) as office_based_other_paid\n  , sum(office_based_pt_ot_st_paid) / count(1) as office_based_pt_ot_st_paid\n  , sum(office_based_radiology_paid) / count(1) as office_based_radiology_paid\n  , sum(office_based_surgery_paid) / count(1) as office_based_surgery_paid\n  , sum(office_based_visit_paid) / count(1) as office_based_visit_paid\n  , sum(outpatient_hospital_or_clinic_paid) / count(1) as outpatient_hospital_or_clinic_paid\n  , sum(outpatient_pt_ot_st_paid) / count(1) as outpatient_pt_ot_st_paid\n  , sum(outpatient_psychiatric_paid) / count(1) as outpatient_psychiatric_paid\n  , sum(outpatient_radiology_paid) / count(1) as outpatient_radiology_paid\n  , sum(outpatient_rehabilitation_paid) / count(1) as outpatient_rehabilitation_paid\n  , sum(outpatient_surgery_paid) / count(1) as outpatient_surgery_paid\n  , sum(skilled_nursing_paid) / count(1) as skilled_nursing_paid\n  , sum(telehealth_visit_paid) / count(1) as telehealth_visit_paid\n  , sum(urgent_care_paid) / count(1) as urgent_care_paid\n  , sum(total_allowed) / count(1) as total_allowed\n  , sum(medical_allowed) / count(1) as medical_allowed\n  , sum(inpatient_allowed) / count(1) as inpatient_allowed\n  , sum(outpatient_allowed) / count(1) as outpatient_allowed\n  , sum(office_based_allowed) / count(1) as office_based_allowed\n  , sum(ancillary_allowed) / count(1) as ancillary_allowed\n  , sum(other_allowed) / count(1) as other_allowed\n  , sum(pharmacy_allowed) / count(1) as pharmacy_allowed\n  , sum(acute_inpatient_allowed) / count(1) as acute_inpatient_allowed\n  , sum(ambulance_allowed) / count(1) as ambulance_allowed\n  , sum(ambulatory_surgery_center_allowed) / count(1) as ambulatory_surgery_center_allowed\n  , sum(dialysis_allowed) / count(1) as dialysis_allowed\n  , sum(durable_medical_equipment_allowed) / count(1) as durable_medical_equipment_allowed\n  , sum(emergency_department_allowed) / count(1) as emergency_department_allowed\n  , sum(home_health_allowed) / count(1) as home_health_allowed\n  , sum(inpatient_hospice_allowed) / count(1) as inpatient_hospice_allowed\n  , sum(inpatient_psychiatric_allowed) / count(1) as inpatient_psychiatric_allowed\n  , sum(inpatient_rehabilitation_allowed) / count(1) as inpatient_rehabilitation_allowed\n  , sum(lab_allowed) / count(1) as lab_allowed\n  , sum(observation_allowed) / count(1) as observation_allowed\n  , sum(office_based_other_allowed) / count(1) as office_based_other_allowed\n  , sum(office_based_pt_ot_st_allowed) / count(1) as office_based_pt_ot_st_allowed\n  , sum(office_based_radiology_allowed) / count(1) as office_based_radiology_allowed\n  , sum(office_based_surgery_allowed) / count(1) as office_based_surgery_allowed\n  , sum(office_based_visit_allowed) / count(1) as office_based_visit_allowed\n  , sum(outpatient_hospital_or_clinic_allowed) / count(1) as outpatient_hospital_or_clinic_allowed\n  , sum(outpatient_pt_ot_st_allowed) / count(1) as outpatient_pt_ot_st_allowed\n  , sum(outpatient_psychiatric_allowed) / count(1) as outpatient_psychiatric_allowed\n  , sum(outpatient_radiology_allowed) / count(1) as outpatient_radiology_allowed\n  , sum(outpatient_rehabilitation_allowed) / count(1) as outpatient_rehabilitation_allowed\n  , sum(outpatient_surgery_allowed) / count(1) as outpatient_surgery_allowed\n  , sum(skilled_nursing_allowed) / count(1) as skilled_nursing_allowed\n  , sum(telehealth_visit_allowed) / count(1) as telehealth_visit_allowed\n  , sum(urgent_care_allowed) / count(1) as urgent_care_allowed\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.financial_pmpm.pmpm_prep a\ngroup by\n  year_month\n, payer\n, data_source", "relation_name": "dev_coco.financial_pmpm.pmpm_payer"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.126544Z", "completed_at": "2024-10-11T23:52:46.139697Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.152880Z", "completed_at": "2024-10-11T23:52:46.152886Z"}], "thread_id": "Thread-9", "execution_time": 0.04075980186462402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__pmpm_payer_plan", "compiled": true, "compiled_code": "\n\nselect\n    year_month\n  , payer\n  , plan\n  , data_source\n  , count(1) as member_months\n  , sum(total_paid) / count(1) as total_paid\n  , sum(medical_paid) / count(1) as medical_paid\n  , sum(inpatient_paid) / count(1) as inpatient_paid\n  , sum(outpatient_paid) / count(1) as outpatient_paid\n  , sum(office_based_paid) / count(1) as office_based_paid\n  , sum(ancillary_paid) / count(1) as ancillary_paid\n  , sum(other_paid) / count(1) as other_paid\n  , sum(pharmacy_paid) / count(1) as pharmacy_paid\n  , sum(acute_inpatient_paid) / count(1) as acute_inpatient_paid\n  , sum(ambulance_paid) / count(1) as ambulance_paid\n  , sum(ambulatory_surgery_center_paid) / count(1) as ambulatory_surgery_center_paid\n  , sum(dialysis_paid) / count(1) as dialysis_paid\n  , sum(durable_medical_equipment_paid) / count(1) as durable_medical_equipment_paid\n  , sum(emergency_department_paid) / count(1) as emergency_department_paid\n  , sum(home_health_paid) / count(1) as home_health_paid\n  , sum(inpatient_hospice_paid) / count(1) as inpatient_hospice_paid\n  , sum(inpatient_psychiatric_paid) / count(1) as inpatient_psychiatric_paid\n  , sum(inpatient_rehabilitation_paid) / count(1) as inpatient_rehabilitation_paid\n  , sum(lab_paid) / count(1) as lab_paid\n  , sum(observation_paid) / count(1) as observation_paid\n  , sum(office_based_other_paid) / count(1) as office_based_other_paid\n  , sum(office_based_pt_ot_st_paid) / count(1) as office_based_pt_ot_st_paid\n  , sum(office_based_radiology_paid) / count(1) as office_based_radiology_paid\n  , sum(office_based_surgery_paid) / count(1) as office_based_surgery_paid\n  , sum(office_based_visit_paid) / count(1) as office_based_visit_paid\n  , sum(outpatient_hospital_or_clinic_paid) / count(1) as outpatient_hospital_or_clinic_paid\n  , sum(outpatient_pt_ot_st_paid) / count(1) as outpatient_pt_ot_st_paid\n  , sum(outpatient_psychiatric_paid) / count(1) as outpatient_psychiatric_paid\n  , sum(outpatient_radiology_paid) / count(1) as outpatient_radiology_paid\n  , sum(outpatient_rehabilitation_paid) / count(1) as outpatient_rehabilitation_paid\n  , sum(outpatient_surgery_paid) / count(1) as outpatient_surgery_paid\n  , sum(skilled_nursing_paid) / count(1) as skilled_nursing_paid\n  , sum(telehealth_visit_paid) / count(1) as telehealth_visit_paid\n  , sum(urgent_care_paid) / count(1) as urgent_care_paid\n  , sum(total_allowed) / count(1) as total_allowed\n  , sum(medical_allowed) / count(1) as medical_allowed\n  , sum(inpatient_allowed) / count(1) as inpatient_allowed\n  , sum(outpatient_allowed) / count(1) as outpatient_allowed\n  , sum(office_based_allowed) / count(1) as office_based_allowed\n  , sum(ancillary_allowed) / count(1) as ancillary_allowed\n  , sum(other_allowed) / count(1) as other_allowed\n  , sum(pharmacy_allowed) / count(1) as pharmacy_allowed\n  , sum(acute_inpatient_allowed) / count(1) as acute_inpatient_allowed\n  , sum(ambulance_allowed) / count(1) as ambulance_allowed\n  , sum(ambulatory_surgery_center_allowed) / count(1) as ambulatory_surgery_center_allowed\n  , sum(dialysis_allowed) / count(1) as dialysis_allowed\n  , sum(durable_medical_equipment_allowed) / count(1) as durable_medical_equipment_allowed\n  , sum(emergency_department_allowed) / count(1) as emergency_department_allowed\n  , sum(home_health_allowed) / count(1) as home_health_allowed\n  , sum(inpatient_hospice_allowed) / count(1) as inpatient_hospice_allowed\n  , sum(inpatient_psychiatric_allowed) / count(1) as inpatient_psychiatric_allowed\n  , sum(inpatient_rehabilitation_allowed) / count(1) as inpatient_rehabilitation_allowed\n  , sum(lab_allowed) / count(1) as lab_allowed\n  , sum(observation_allowed) / count(1) as observation_allowed\n  , sum(office_based_other_allowed) / count(1) as office_based_other_allowed\n  , sum(office_based_pt_ot_st_allowed) / count(1) as office_based_pt_ot_st_allowed\n  , sum(office_based_radiology_allowed) / count(1) as office_based_radiology_allowed\n  , sum(office_based_surgery_allowed) / count(1) as office_based_surgery_allowed\n  , sum(office_based_visit_allowed) / count(1) as office_based_visit_allowed\n  , sum(outpatient_hospital_or_clinic_allowed) / count(1) as outpatient_hospital_or_clinic_allowed\n  , sum(outpatient_pt_ot_st_allowed) / count(1) as outpatient_pt_ot_st_allowed\n  , sum(outpatient_psychiatric_allowed) / count(1) as outpatient_psychiatric_allowed\n  , sum(outpatient_radiology_allowed) / count(1) as outpatient_radiology_allowed\n  , sum(outpatient_rehabilitation_allowed) / count(1) as outpatient_rehabilitation_allowed\n  , sum(outpatient_surgery_allowed) / count(1) as outpatient_surgery_allowed\n  , sum(skilled_nursing_allowed) / count(1) as skilled_nursing_allowed\n  , sum(telehealth_visit_allowed) / count(1) as telehealth_visit_allowed\n  , sum(urgent_care_allowed) / count(1) as urgent_care_allowed\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.financial_pmpm.pmpm_prep a\ngroup by\n    year_month\n  , payer\n  , plan\n  , data_source", "relation_name": "dev_coco.financial_pmpm.pmpm_payer_plan"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.132212Z", "completed_at": "2024-10-11T23:52:46.146076Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.159952Z", "completed_at": "2024-10-11T23:52:46.159959Z"}], "thread_id": "Thread-2", "execution_time": 0.04708600044250488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__member_months", "compiled": true, "compiled_code": "\n\nSELECT m.*,\n    COALESCE(p.total_paid, 0) AS total_paid,\n    COALESCE(p.medical_paid, 0) AS medical_paid,\n    COALESCE(p.pharmacy_paid, 0) AS pharmacy_paid,\n    m.patient_id || ' | ' || m.data_source AS patient_data_source_key,\n    m.patient_id || ' | ' || m.data_source || ' | ' || m.year_month AS member_month_key\nFROM dev_coco.core.member_months m\nLEFT JOIN dev_coco.financial_pmpm.pmpm_prep p ON m.patient_id = p.patient_id\n    AND m.data_source = p.data_source\n    AND m.year_month = p.year_month", "relation_name": "dev_coco.data_quality.mart_review__member_months"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.146639Z", "completed_at": "2024-10-11T23:52:46.161842Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.180628Z", "completed_at": "2024-10-11T23:52:46.180637Z"}], "thread_id": "Thread-6", "execution_time": 0.04902791976928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.dbt_utils_unique_combination_of_columns_financial_pmpm__pmpm_prep_patient_id__year_month___quote_column_plan_.be60091e23", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        patient_id, year_month, plan\n    from dev_coco.financial_pmpm.pmpm_prep\n    group by patient_id, year_month, plan\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.153639Z", "completed_at": "2024-10-11T23:52:46.169126Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.181574Z", "completed_at": "2024-10-11T23:52:46.181579Z"}], "thread_id": "Thread-5", "execution_time": 0.04558086395263672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__list_rollup", "compiled": true, "compiled_code": "\n\nwith list as (\n\n    select\n          patient_id\n        , data_source\n        , hcc_code\n        , hcc_description\n        , reason\n        , contributing_factor\n        , suspect_date\n        , row_number() over (\n            partition by\n                  patient_id\n                , hcc_code\n            order by suspect_date desc\n          ) as row_num\n    from dev_coco.hcc_suspecting.list\n\n)\n\n, list_dedupe as (\n\n    select\n          patient_id\n        , hcc_code\n        , hcc_description\n        , reason\n        , contributing_factor\n        , suspect_date as latest_suspect_date\n    from list\n    where row_num = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        , cast(reason as TEXT) as reason\n        , cast(contributing_factor as TEXT) as contributing_factor\n        , cast(latest_suspect_date as date) as latest_suspect_date\n    from list_dedupe\n\n)\n\nselect\n      patient_id\n    , hcc_code\n    , hcc_description\n    , reason\n    , contributing_factor\n    , latest_suspect_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.hcc_suspecting.list_rollup"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.162842Z", "completed_at": "2024-10-11T23:52:46.189182Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.194785Z", "completed_at": "2024-10-11T23:52:46.194793Z"}], "thread_id": "Thread-3", "execution_time": 0.048545122146606445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__summary", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__hcc_suspecting__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\nfrom dev_coco.core.patient\n), patients as (\n\n    select\n          patient_id\n        , sex\n        , birth_date\n        \n            , floor(datediff(\n        hour,\n        birth_date,\n        current_date\n        ) / 8766.0) as age\n        \n    from __dbt__cte__hcc_suspecting__stg_core__patient\n    where death_date is null\n\n)\n\n, suspecting_list as (\n\n      select\n          patient_id\n        , count(*) as gaps\n    from dev_coco.hcc_suspecting.list\n    group by patient_id\n\n)\n\n, joined as (\n\n    select\n          patients.patient_id\n        , patients.sex\n        , patients.birth_date\n        , patients.age\n        , suspecting_list.gaps\n    from patients\n         inner join suspecting_list\n         on patients.patient_id = suspecting_list.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(sex as TEXT) as patient_sex\n        , cast(birth_date as date) as patient_birth_date\n        , cast(age as integer) as patient_age\n        , cast(gaps as integer) as suspecting_gaps\n    from joined\n\n)\n\nselect\n      patient_id\n    , patient_sex\n    , patient_birth_date\n    , patient_age\n    , suspecting_gaps\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.hcc_suspecting.summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.191386Z", "completed_at": "2024-10-11T23:52:46.195574Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.196084Z", "completed_at": "2024-10-11T23:52:46.196088Z"}], "thread_id": "Thread-7", "execution_time": 0.016741275787353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__pmpm", "compiled": true, "compiled_code": "\n\n\nSELECT *,\n       total_paid * member_months AS total_paid_absolute,\n       medical_paid * member_months AS medical_paid_absolute,\n       pharmacy_paid * member_months AS pharmacy_paid_absolute,\n       inpatient_paid * member_months AS inpatient_paid_absolute,\n       outpatient_paid * member_months AS outpatient_paid_absolute,\n       office_based_paid * member_months AS office_based_paid_absolute,\n       ancillary_paid * member_months AS ancillary_paid_absolute,\n       other_paid * member_months AS other_paid_absolute,\n        data_source || '|' || year_month as data_source_month_key\nFROM dev_coco.financial_pmpm.pmpm_payer", "relation_name": "dev_coco.data_quality.mart_review__pmpm"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.182872Z", "completed_at": "2024-10-11T23:52:46.195842Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.196539Z", "completed_at": "2024-10-11T23:52:46.196543Z"}], "thread_id": "Thread-10", "execution_time": 0.03510308265686035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__patient_risk_factors", "compiled": true, "compiled_code": "\nwith demographic_factors as (\n\n    select\n          patient_id\n        /* concatenate demographic risk factors */\n\n    , gender || ', ' || age_group || ' Years' || ', ' || enrollment_status || ' Enrollee' || ', ' || CASE   WHEN medicaid_status = 'Yes' THEN 'Medicaid'   ELSE 'Non-Medicaid' END || ', ' || dual_status || ' Dual' || ', ' || orec || ', ' || CASE   WHEN institutional_status = 'Yes' THEN 'Institutional'   ELSE 'Non-Institutional' END as description\n\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from dev_coco.cms_hcc._int_demographic_factors\n\n)\n\n, demographic_defaults as (\n\n    select\n          patient_id\n        , model_version\n        , enrollment_status_default\n        , medicaid_dual_status_default\n        , orec_default\n        , institutional_status_default\n    from dev_coco.cms_hcc._int_demographic_factors\n\n)\n\n, disease_factors as (\n\n    select\n          patient_id\n        , hcc_description || ' (HCC ' || hcc_code || ')' as description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from dev_coco.cms_hcc._int_disease_factors\n\n)\n\n, enrollment_interactions as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from dev_coco.cms_hcc._int_enrollment_interaction_factors\n\n)\n\n, disabled_interactions as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from dev_coco.cms_hcc._int_disabled_interaction_factors\n\n)\n\n, disease_interactions as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from dev_coco.cms_hcc._int_disease_interaction_factors\n\n)\n\n, hcc_counts as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from dev_coco.cms_hcc._int_hcc_count_factors\n\n)\n\n, unioned as (\n\n    select * from demographic_factors\n    union all\n    select * from disease_factors\n    union all\n    select * from enrollment_interactions\n    union all\n    select * from disabled_interactions\n    union all\n    select * from disease_interactions\n    union all\n    select * from hcc_counts\n\n)\n\n, add_defaults as (\n\n    select\n          unioned.patient_id\n        , demographic_defaults.enrollment_status_default\n        , demographic_defaults.medicaid_dual_status_default\n        , demographic_defaults.orec_default\n        , demographic_defaults.institutional_status_default\n        , unioned.description as risk_factor_description\n        , unioned.coefficient\n        , unioned.factor_type\n        , unioned.model_version\n        , unioned.payment_year\n    from unioned\n        left join demographic_defaults\n            on unioned.patient_id = demographic_defaults.patient_id\n            and unioned.model_version = demographic_defaults.model_version\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        \n            , cast(enrollment_status_default as boolean) as enrollment_status_default\n            , cast(medicaid_dual_status_default as boolean) as medicaid_dual_status_default\n            , cast(orec_default as boolean) as orec_default\n            , cast(institutional_status_default as boolean) as institutional_status_default\n        \n        , cast(factor_type as TEXT) as factor_type\n        , cast(risk_factor_description as TEXT) as risk_factor_description\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from add_defaults\n\n)\n\nselect\n      patient_id\n    , enrollment_status_default\n    , medicaid_dual_status_default\n    , orec_default\n    , institutional_status_default\n    , factor_type\n    , risk_factor_description\n    , coefficient\n    , model_version\n    , payment_year\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.cms_hcc.patient_risk_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.211222Z", "completed_at": "2024-10-11T23:52:46.233197Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.239772Z", "completed_at": "2024-10-11T23:52:46.239780Z"}], "thread_id": "Thread-2", "execution_time": 0.041905879974365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__patient_risk_factors", "compiled": true, "compiled_code": "\n\nselect *\n,dense_rank() over (order by patient_id, model_version, payment_year ) as patient_risk_sk\nfrom dev_coco.cms_hcc.patient_risk_factors p", "relation_name": "dev_coco.data_quality.mart_review__patient_risk_factors"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.198700Z", "completed_at": "2024-10-11T23:52:46.251885Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.252240Z", "completed_at": "2024-10-11T23:52:46.252248Z"}], "thread_id": "Thread-9", "execution_time": 0.05465292930603027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__patient_risk_scores", "compiled": true, "compiled_code": "\nwith  __dbt__cte__cms_hcc__stg_core__member_months as (\n\nselect\n     patient_id\n    , year_month\n    , payer\n    , plan\n    , data_source\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.member_months\n), seed_adjustment_rates as (\n\n    select\n          model_version\n        , payment_year\n        , normalization_factor\n        , ma_coding_pattern_adjustment\n    from dev_coco.cms_hcc._value_set_adjustment_rates\n\n)\n\n, risk_factors as (\n\n    select\n          patient_id\n        , coefficient\n        , model_version\n        , payment_year\n    from dev_coco.cms_hcc.patient_risk_factors\n\n)\n\n, member_months as (\n\n    select\n        patient_id\n        , cast(\n  substr(year_month, 1, 4)\n as integer) as eligible_year\n        , COUNT(1) as member_months\n    from  __dbt__cte__cms_hcc__stg_core__member_months\n    group by\n        patient_id\n        , cast(\n  substr(year_month, 1, 4)\n as integer)\n)\n\n, raw_score as (\n\n    select\n          patient_id\n        , sum(coefficient) as risk_score\n        , model_version\n        , payment_year\n    from risk_factors\n    group by\n          patient_id\n        , model_version\n        , payment_year\n\n)\n\n/*\n    CMS Guidance for the transition from v24 to v28:\n\n    PY2024 risk scores will be blended using 67% of the risk score calculated\n    from v24 and 33% from v28.\n\n    PY2025 risk scores will be blended using 33% of the risk score calculated\n    from v24 and 67% from v28.\n\n    PY2026 risk scores will be 100% from v28.\n\n    Prior payment years will still be calculated from v24 only.\n*/\n, transition_scores as (\n\n    select\n          patient_id\n        , risk_score\n        , case\n            when payment_year <= 2023 and model_version = 'CMS-HCC-V24' then risk_score\n            when payment_year = 2024 and model_version = 'CMS-HCC-V24' then risk_score * 0.67\n            when payment_year = 2025 and model_version = 'CMS-HCC-V24' then risk_score * 0.33\n            when payment_year >= 2026 and model_version = 'CMS-HCC-V24' then 0\n            end as v24_risk_score\n        , case\n            when payment_year <= 2023 and model_version = 'CMS-HCC-V28' then 0\n            when payment_year = 2024 and model_version = 'CMS-HCC-V28' then risk_score * 0.33\n            when payment_year = 2025 and model_version = 'CMS-HCC-V28' then risk_score * 0.67\n            when payment_year >= 2026 and model_version = 'CMS-HCC-V28' then risk_score\n            end as v28_risk_score\n        , model_version\n        , payment_year\n    from raw_score\n\n)\n\n/*\n    Grouping by patient to create a single row per patient.\n*/\n, transition_scores_grouped as (\n\n    select\n          patient_id\n        , max(v24_risk_score) as v24_risk_score\n        , max(v28_risk_score) as v28_risk_score\n        , payment_year\n    from transition_scores\n    group by\n          patient_id\n        , payment_year\n\n)\n\n, blended as (\n\n    select\n          patient_id\n        , v24_risk_score\n        , v28_risk_score\n        , v24_risk_score + v28_risk_score as blended_risk_score\n        , payment_year\n    from transition_scores_grouped\n\n)\n\n, normalized as (\n\n    select\n          blended.patient_id\n        , blended.v24_risk_score\n        , blended.v28_risk_score\n        , blended.blended_risk_score\n        , blended.blended_risk_score / seed_adjustment_rates.normalization_factor as normalized_risk_score\n        , blended.payment_year\n    from blended\n        left join seed_adjustment_rates\n            on blended.payment_year = seed_adjustment_rates.payment_year\n\n)\n\n, payment as (\n\n    select\n          normalized.patient_id\n        , normalized.v24_risk_score\n        , normalized.v28_risk_score\n        , normalized.blended_risk_score\n        , normalized.normalized_risk_score\n        , normalized.normalized_risk_score * (1 - seed_adjustment_rates.ma_coding_pattern_adjustment) as payment_risk_score\n        , normalized.payment_year\n    from normalized\n        left join seed_adjustment_rates\n            on normalized.payment_year = seed_adjustment_rates.payment_year\n\n)\n\n, weighted_score as (\n\n    select\n        payment.patient_id\n        , payment.v24_risk_score\n        , payment.v28_risk_score\n        , payment.blended_risk_score\n        , payment.normalized_risk_score\n        , payment.payment_risk_score\n        , member_months.member_months\n        , payment.payment_risk_score * member_months.member_months as payment_risk_score_weighted_by_months\n        , payment.payment_year\n    from payment\n    left join member_months\n            on payment.patient_id = member_months.patient_id\n            and payment.payment_year = member_months.eligible_year\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , round(cast(v24_risk_score as numeric(28,6)),3) as v24_risk_score\n        , round(cast(v28_risk_score as numeric(28,6)),3) as v28_risk_score\n        , round(cast(blended_risk_score as numeric(28,6)),3) as blended_risk_score\n        , round(cast(normalized_risk_score as numeric(28,6)),3) as normalized_risk_score\n        , round(cast(payment_risk_score as numeric(28,6)),3) as payment_risk_score\n        , round(cast(payment_risk_score_weighted_by_months as numeric(28,6)),3) as payment_risk_score_weighted_by_months\n        , cast(member_months as integer) as member_months\n        , cast(payment_year as integer) as payment_year\n    from weighted_score\n\n)\n\nselect\n      patient_id\n    , v24_risk_score\n    , v28_risk_score\n    , blended_risk_score\n    , normalized_risk_score\n    , payment_risk_score\n    , payment_risk_score_weighted_by_months\n    , member_months\n    , payment_year\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.cms_hcc.patient_risk_scores"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.247472Z", "completed_at": "2024-10-11T23:52:46.253925Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.254846Z", "completed_at": "2024-10-11T23:52:46.254852Z"}], "thread_id": "Thread-5", "execution_time": 0.008055925369262695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__patient_risk", "compiled": true, "compiled_code": "\n\n\nWITH cte AS (\n    SELECT \n        payment_year,\n        patient_id,\n        model_version,\n        patient_risk_sk,\n        SUM(coefficient) AS risk_score\n    FROM dev_coco.data_quality.mart_review__patient_risk_factors\n    GROUP BY payment_year,\n             patient_id,\n             model_version,\n             patient_risk_sk\n)\n\nSELECT \n    CASE \n        WHEN risk_score <= 0.5 THEN '.5'\n        WHEN risk_score BETWEEN 0.5 AND 1.0 THEN '1'\n        WHEN risk_score BETWEEN 1.0 AND 1.5 THEN '1.5'\n        WHEN risk_score BETWEEN 1.5 AND 2.0 THEN '2'\n        WHEN risk_score BETWEEN 2.0 AND 2.5 THEN '2.5'\n        WHEN risk_score BETWEEN 2.5 AND 3.0 THEN '3'\n        WHEN risk_score BETWEEN 3.0 AND 3.5 THEN '3.5'\n        WHEN risk_score BETWEEN 3.5 AND 4.0 THEN '4'\n        WHEN risk_score BETWEEN 4.0 AND 4.5 THEN '4.5'\n        WHEN risk_score BETWEEN 4.5 AND 5.0 THEN '5'\n        WHEN risk_score > 5.0 THEN '5+'\n        ELSE null \n        END AS risk_score_bucket,\n        payment_year,\n        patient_id,\n        model_version,\n        patient_risk_sk,\n        risk_score\n        , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nFROM cte", "relation_name": "dev_coco.data_quality.mart_review__patient_risk"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.259091Z", "completed_at": "2024-10-11T23:52:46.262608Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.263147Z", "completed_at": "2024-10-11T23:52:46.263154Z"}], "thread_id": "Thread-10", "execution_time": 0.00904226303100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_cms_hcc__patient_risk_scores_patient_id.05b154e126", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.cms_hcc.patient_risk_scores\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.255615Z", "completed_at": "2024-10-11T23:52:46.262873Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.263649Z", "completed_at": "2024-10-11T23:52:46.263653Z"}], "thread_id": "Thread-7", "execution_time": 0.010104179382324219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__patient_risk_scores", "compiled": true, "compiled_code": "\n\n\nselect *\nfrom dev_coco.cms_hcc.patient_risk_scores p", "relation_name": "dev_coco.data_quality.mart_review__patient_risk_scores"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.051714Z", "completed_at": "2024-10-11T23:52:46.798262Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.798580Z", "completed_at": "2024-10-11T23:52:46.798589Z"}], "thread_id": "Thread-4", "execution_time": 0.9402780532836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__cms_chronic_conditions__stg_core__patient as (\n\n\nselect \n    patient_id\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), chronic_conditions as (\n\n    select distinct\n          condition\n        , condition_column_name\n    from dev_coco.chronic_conditions._value_set_cms_chronic_conditions_hierarchy\n\n)\n\n, conditions as (\n\n    select\n          chronic_conditions_unioned.patient_id\n        , chronic_conditions.condition_column_name\n        , 1 as condition_count\n    from dev_coco.chronic_conditions.cms_chronic_conditions_long as chronic_conditions_unioned\n         inner join chronic_conditions as chronic_conditions\n             on chronic_conditions_unioned.condition = chronic_conditions.condition\n\n)\n\nselect\n      p.patient_id\n    , \n  \n    max(\n      \n      case\n      when condition_column_name = 'acute_myocardial_infarction'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as acute_myocardial_infarction\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'adhd_conduct_disorders_and_hyperkinetic_syndrome'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as adhd_conduct_disorders_and_hyperkinetic_syndrome\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'alcohol_use_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as alcohol_use_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'alzheimers_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as alzheimers_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'anemia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as anemia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'anxiety_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as anxiety_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'asthma'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as asthma\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'atrial_fibrillation_and_flutter'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as atrial_fibrillation_and_flutter\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'autism_spectrum_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as autism_spectrum_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'benign_prostatic_hyperplasia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as benign_prostatic_hyperplasia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'bipolar_disorder'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as bipolar_disorder\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_breast'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_breast\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_colorectal'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_colorectal\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_endometrial'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_endometrial\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_lung'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_lung\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_prostate'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_prostate\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_urologic_kidney_renal_pelvis_and_ureter'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_urologic_kidney_renal_pelvis_and_ureter\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cataract'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cataract\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cerebral_palsy'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cerebral_palsy\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'chronic_kidney_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as chronic_kidney_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'chronic_obstructive_pulmonary_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as chronic_obstructive_pulmonary_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cystic_fibrosis_and_other_metabolic_developmental_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cystic_fibrosis_and_other_metabolic_developmental_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'depression_bipolar_or_other_depressive_mood_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as depression_bipolar_or_other_depressive_mood_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'depressive_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as depressive_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'diabetes'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as diabetes\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'drug_use_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as drug_use_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'epilepsy'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as epilepsy\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'fibromyalgia_and_chronic_pain_and_fatigue'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as fibromyalgia_and_chronic_pain_and_fatigue\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'glaucoma'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as glaucoma\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'heart_failure_and_non_ischemic_heart_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as heart_failure_and_non_ischemic_heart_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_a'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_a\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_b_acute_or_unspecified'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_b_acute_or_unspecified\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_b_chronic'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_b_chronic\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_c_acute'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_c_acute\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_c_chronic'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_c_chronic\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_c_unspecified'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_c_unspecified\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_d'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_d\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_e'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_e\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hip_pelvic_fracture'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hip_pelvic_fracture\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hyperlipidemia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hyperlipidemia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hypertension'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hypertension\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hypothyroidism'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hypothyroidism\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'intellectual_disabilities_and_related_conditions'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as intellectual_disabilities_and_related_conditions\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'ischemic_heart_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as ischemic_heart_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'learning_disabilities'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as learning_disabilities\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'leukemias_and_lymphomas'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as leukemias_and_lymphomas\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'migraine_and_chronic_headache'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as migraine_and_chronic_headache\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'mobility_impairments'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as mobility_impairments\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'multiple_sclerosis_and_transverse_myelitis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as multiple_sclerosis_and_transverse_myelitis\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'muscular_dystrophy'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as muscular_dystrophy\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'non_alzheimers_dementia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as non_alzheimers_dementia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'obesity'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as obesity\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'opioid_use_disorder_oud'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as opioid_use_disorder_oud\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'osteoporosis_with_or_without_pathological_fracture'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as osteoporosis_with_or_without_pathological_fracture\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'other_developmental_delays'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as other_developmental_delays\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'parkinsons_disease_and_secondary_parkinsonism'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as parkinsons_disease_and_secondary_parkinsonism\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'peripheral_vascular_disease_pvd'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as peripheral_vascular_disease_pvd\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'personality_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as personality_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'pneumonia_all_cause'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as pneumonia_all_cause\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'post_traumatic_stress_disorder_ptsd'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as post_traumatic_stress_disorder_ptsd\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'pressure_and_chronic_ulcers'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as pressure_and_chronic_ulcers\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'rheumatoid_arthritis_osteoarthritis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as rheumatoid_arthritis_osteoarthritis\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'schizophrenia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as schizophrenia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'schizophrenia_and_other_psychotic_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as schizophrenia_and_other_psychotic_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'sensory_blindness_and_visual_impairment'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as sensory_blindness_and_visual_impairment\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'sensory_deafness_and_hearing_impairment'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as sensory_deafness_and_hearing_impairment\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'sickle_cell_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as sickle_cell_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'spina_bifida_and_other_congenital_anomalies_of_the_nervous_system'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as spina_bifida_and_other_congenital_anomalies_of_the_nervous_system\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'spinal_cord_injury'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as spinal_cord_injury\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'stroke_transient_ischemic_attack'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as stroke_transient_ischemic_attack\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'tobacco_use'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as tobacco_use\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'viral_hepatitis_general'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as viral_hepatitis_general\n      \n    \n    \n  \n\n      , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom __dbt__cte__cms_chronic_conditions__stg_core__patient p\n     left join conditions\n        on p.patient_id = conditions.patient_id\ngroup by\n    p.patient_id", "relation_name": "dev_coco.chronic_conditions.cms_chronic_conditions_wide"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.985656Z", "completed_at": "2024-10-11T23:52:46.997095Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.997810Z", "completed_at": "2024-10-11T23:52:46.997819Z"}], "thread_id": "Thread-2", "execution_time": 0.014330148696899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id.5c2c8ae105", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom dev_coco.chronic_conditions.cms_chronic_conditions_wide\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:46.991505Z", "completed_at": "2024-10-11T23:52:46.997473Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:46.998472Z", "completed_at": "2024-10-11T23:52:46.998477Z"}], "thread_id": "Thread-3", "execution_time": 0.014323949813842773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_wide_patient_id.60c2d9a586", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.chronic_conditions.cms_chronic_conditions_wide\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:32.980625Z", "completed_at": "2024-10-11T23:52:48.273979Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:48.274881Z", "completed_at": "2024-10-11T23:52:48.274902Z"}], "thread_id": "Thread-1", "execution_time": 15.478850841522217, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.the_tuva_project.the_tuva_project-on-run-end-0", "compiled": true, "compiled_code": "\n\n    \n\n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n        \n        \n        \n        \n    \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:44.811787Z", "completed_at": "2024-10-11T23:52:49.279259Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.279580Z", "completed_at": "2024-10-11T23:52:49.279589Z"}], "thread_id": "Thread-8", "execution_time": 4.68886923789978, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_encounter", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model creates the encounter table in core using dbt_utils.union_relations.\n-- *************************************************\n\n\n\nWITH base AS (\n  \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.acute_inpatient__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(\"ENCOUNTER_END_DATE\" as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(\"ED_FLAG\" as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(\"DELIVERY_FLAG\" as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(\"DELIVERY_TYPE\" as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(\"NEWBORN_FLAG\" as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(\"NICU_FLAG\" as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(\"MS_DRG_CODE\" as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(\"MS_DRG_DESCRIPTION\" as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(\"MEDICAL_SURGICAL\" as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(\"APR_DRG_CODE\" as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(\"APR_DRG_DESCRIPTION\" as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(\"ADMIT_SOURCE_CODE\" as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(\"ADMIT_SOURCE_DESCRIPTION\" as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(\"ADMIT_TYPE_CODE\" as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(\"ADMIT_TYPE_DESCRIPTION\" as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(\"DISCHARGE_DISPOSITION_CODE\" as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(\"DISCHARGE_DISPOSITION_DESCRIPTION\" as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(\"LENGTH_OF_STAY\" as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(\"MORTALITY_FLAG\" as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.acute_inpatient__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.emergency_department__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(\"ENCOUNTER_END_DATE\" as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(\"MS_DRG_CODE\" as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(\"MS_DRG_DESCRIPTION\" as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(\"MEDICAL_SURGICAL\" as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(\"APR_DRG_CODE\" as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(\"APR_DRG_DESCRIPTION\" as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(\"ADMIT_SOURCE_CODE\" as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(\"ADMIT_SOURCE_DESCRIPTION\" as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(\"ADMIT_TYPE_CODE\" as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(\"ADMIT_TYPE_DESCRIPTION\" as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(\"DISCHARGE_DISPOSITION_CODE\" as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(\"DISCHARGE_DISPOSITION_DESCRIPTION\" as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(\"LENGTH_OF_STAY\" as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(\"MORTALITY_FLAG\" as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.emergency_department__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.inpatient_hospice__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(\"ENCOUNTER_END_DATE\" as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(\"ED_FLAG\" as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(\"MS_DRG_CODE\" as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(\"MS_DRG_DESCRIPTION\" as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(\"MEDICAL_SURGICAL\" as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(\"APR_DRG_CODE\" as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(\"APR_DRG_DESCRIPTION\" as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(\"ADMIT_SOURCE_CODE\" as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(\"ADMIT_SOURCE_DESCRIPTION\" as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(\"ADMIT_TYPE_CODE\" as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(\"ADMIT_TYPE_DESCRIPTION\" as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(\"DISCHARGE_DISPOSITION_CODE\" as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(\"DISCHARGE_DISPOSITION_DESCRIPTION\" as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(\"LENGTH_OF_STAY\" as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(\"MORTALITY_FLAG\" as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.inpatient_hospice__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.inpatient_psych__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(\"ENCOUNTER_END_DATE\" as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(\"ED_FLAG\" as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(\"MS_DRG_CODE\" as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(\"MS_DRG_DESCRIPTION\" as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(\"MEDICAL_SURGICAL\" as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(\"APR_DRG_CODE\" as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(\"APR_DRG_DESCRIPTION\" as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(\"ADMIT_SOURCE_CODE\" as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(\"ADMIT_SOURCE_DESCRIPTION\" as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(\"ADMIT_TYPE_CODE\" as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(\"ADMIT_TYPE_DESCRIPTION\" as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(\"DISCHARGE_DISPOSITION_CODE\" as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(\"DISCHARGE_DISPOSITION_DESCRIPTION\" as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(\"LENGTH_OF_STAY\" as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(\"MORTALITY_FLAG\" as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.inpatient_psych__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.inpatient_rehab__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(\"ENCOUNTER_END_DATE\" as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(\"ED_FLAG\" as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(\"MS_DRG_CODE\" as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(\"MS_DRG_DESCRIPTION\" as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(\"MEDICAL_SURGICAL\" as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(\"APR_DRG_CODE\" as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(\"APR_DRG_DESCRIPTION\" as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(\"ADMIT_SOURCE_CODE\" as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(\"ADMIT_SOURCE_DESCRIPTION\" as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(\"ADMIT_TYPE_CODE\" as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(\"ADMIT_TYPE_DESCRIPTION\" as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(\"DISCHARGE_DISPOSITION_CODE\" as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(\"DISCHARGE_DISPOSITION_DESCRIPTION\" as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(\"LENGTH_OF_STAY\" as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(\"MORTALITY_FLAG\" as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.inpatient_rehab__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.inpatient_snf__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(\"ENCOUNTER_END_DATE\" as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(\"ED_FLAG\" as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(\"MS_DRG_CODE\" as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(\"MS_DRG_DESCRIPTION\" as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(\"MEDICAL_SURGICAL\" as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(\"APR_DRG_CODE\" as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(\"APR_DRG_DESCRIPTION\" as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(\"ADMIT_SOURCE_CODE\" as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(\"ADMIT_SOURCE_DESCRIPTION\" as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(\"ADMIT_TYPE_CODE\" as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(\"ADMIT_TYPE_DESCRIPTION\" as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(\"DISCHARGE_DISPOSITION_CODE\" as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(\"DISCHARGE_DISPOSITION_DESCRIPTION\" as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(\"LENGTH_OF_STAY\" as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(\"MORTALITY_FLAG\" as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.inpatient_snf__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.inpatient_substance_use__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(\"ENCOUNTER_END_DATE\" as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(\"ED_FLAG\" as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(\"MS_DRG_CODE\" as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(\"MS_DRG_DESCRIPTION\" as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(\"MEDICAL_SURGICAL\" as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(\"APR_DRG_CODE\" as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(\"APR_DRG_DESCRIPTION\" as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(\"ADMIT_SOURCE_CODE\" as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(\"ADMIT_SOURCE_DESCRIPTION\" as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(\"ADMIT_TYPE_CODE\" as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(\"ADMIT_TYPE_DESCRIPTION\" as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(\"DISCHARGE_DISPOSITION_CODE\" as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(\"DISCHARGE_DISPOSITION_DESCRIPTION\" as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(\"LENGTH_OF_STAY\" as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(\"MORTALITY_FLAG\" as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.inpatient_substance_use__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.urgent_care__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.urgent_care__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.office_visit__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(null as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(null as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(\"BILLING_ID\" as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(\"PROVIDER_NAME\" as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(\"PROVIDER_SPECIALTY\" as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(\"HCPCS_CODE\" as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(\"CCS_CATEGORY\" as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(\"CCS_CATEGORY_DESCRIPTION\" as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.office_visit__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.outpatient_hospice__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.outpatient_hospice__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.outpatient_hospital_or_clinic__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.outpatient_hospital_or_clinic__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.outpatient_injections__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(\"HCPCS_CODE\" as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.outpatient_injections__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.outpatient_psych__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.outpatient_psych__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.outpatient_ptotst__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.outpatient_ptotst__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.outpatient_surgery__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.outpatient_surgery__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.outpatient_radiology__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(\"HCPCS_CODE\" as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.outpatient_radiology__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.outpatient_rehab__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.outpatient_rehab__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.outpatient_substance_use__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(\"OBSERVATION_FLAG\" as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.outpatient_substance_use__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.home_health__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(null as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.home_health__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.dialysis__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(null as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.dialysis__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.asc__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(\"ENCOUNTER_END_DATE\" as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(null as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(\"LENGTH_OF_STAY\" as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(\"HCPCS_CODE\" as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(null as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.asc__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.ambulance__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(null as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(\"PLACE_OF_SERVICE_CODE\" as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(\"PLACE_OF_SERVICE_DESCRIPTION\" as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.ambulance__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.dme__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(null as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(\"PLACE_OF_SERVICE_CODE\" as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(\"PLACE_OF_SERVICE_DESCRIPTION\" as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.dme__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.lab__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(null as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(null as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(\"PLACE_OF_SERVICE_CODE\" as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(\"PLACE_OF_SERVICE_DESCRIPTION\" as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.lab__encounter_grain\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.claims_preprocessing.orphaned_claim__encounter_grain' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"ENCOUNTER_ID\" as NUMBER(18,0)) as \"ENCOUNTER_ID\" ,\n                    cast(\"ENCOUNTER_START_DATE\" as DATE) as \"ENCOUNTER_START_DATE\" ,\n                    cast(\"ENCOUNTER_END_DATE\" as DATE) as \"ENCOUNTER_END_DATE\" ,\n                    cast(\"PATIENT_DATA_SOURCE_ID\" as NUMBER(18,0)) as \"PATIENT_DATA_SOURCE_ID\" ,\n                    cast(\"ENCOUNTER_TYPE\" as character varying(29)) as \"ENCOUNTER_TYPE\" ,\n                    cast(\"ENCOUNTER_GROUP\" as character varying(12)) as \"ENCOUNTER_GROUP\" ,\n                    cast(\"ADMIT_AGE\" as NUMBER(15,6)) as \"ADMIT_AGE\" ,\n                    cast(\"GENDER\" as character varying(16777216)) as \"GENDER\" ,\n                    cast(\"RACE\" as character varying(16777216)) as \"RACE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE_TYPE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE_TYPE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_CODE\" as character varying(16777216)) as \"PRIMARY_DIAGNOSIS_CODE\" ,\n                    cast(\"PRIMARY_DIAGNOSIS_DESCRIPTION\" as character varying(256)) as \"PRIMARY_DIAGNOSIS_DESCRIPTION\" ,\n                    cast(\"FACILITY_ID\" as character varying(16777216)) as \"FACILITY_ID\" ,\n                    cast(null as NUMBER(1,0)) as \"OBSERVATION_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"ED_FLAG\" ,\n                    cast(\"LAB_FLAG\" as NUMBER(1,0)) as \"LAB_FLAG\" ,\n                    cast(\"DME_FLAG\" as NUMBER(1,0)) as \"DME_FLAG\" ,\n                    cast(\"AMBULANCE_FLAG\" as NUMBER(1,0)) as \"AMBULANCE_FLAG\" ,\n                    cast(\"PHARMACY_FLAG\" as NUMBER(1,0)) as \"PHARMACY_FLAG\" ,\n                    cast(\"FACILITY_NAME\" as character varying(95)) as \"FACILITY_NAME\" ,\n                    cast(\"FACILITY_TYPE\" as character varying(173)) as \"FACILITY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"DELIVERY_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"DELIVERY_TYPE\" ,\n                    cast(null as NUMBER(1,0)) as \"NEWBORN_FLAG\" ,\n                    cast(null as NUMBER(1,0)) as \"NICU_FLAG\" ,\n                    cast(null as character varying(16777216)) as \"MS_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"MS_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(256)) as \"MEDICAL_SURGICAL\" ,\n                    cast(null as character varying(16777216)) as \"APR_DRG_CODE\" ,\n                    cast(null as character varying(256)) as \"APR_DRG_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_SOURCE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_SOURCE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"ADMIT_TYPE_CODE\" ,\n                    cast(null as character varying(256)) as \"ADMIT_TYPE_DESCRIPTION\" ,\n                    cast(null as character varying(16777216)) as \"DISCHARGE_DISPOSITION_CODE\" ,\n                    cast(null as character varying(256)) as \"DISCHARGE_DISPOSITION_DESCRIPTION\" ,\n                    cast(\"TOTAL_PAID_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_PAID_AMOUNT\" ,\n                    cast(\"TOTAL_ALLOWED_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_ALLOWED_AMOUNT\" ,\n                    cast(\"TOTAL_CHARGE_AMOUNT\" as NUMBER(38,6)) as \"TOTAL_CHARGE_AMOUNT\" ,\n                    cast(\"CLAIM_COUNT\" as NUMBER(18,0)) as \"CLAIM_COUNT\" ,\n                    cast(\"INST_CLAIM_COUNT\" as NUMBER(18,0)) as \"INST_CLAIM_COUNT\" ,\n                    cast(\"PROF_CLAIM_COUNT\" as NUMBER(18,0)) as \"PROF_CLAIM_COUNT\" ,\n                    cast(null as NUMBER(9,0)) as \"LENGTH_OF_STAY\" ,\n                    cast(null as NUMBER(1,0)) as \"MORTALITY_FLAG\" ,\n                    cast(\"DATA_SOURCE\" as character varying(16777216)) as \"DATA_SOURCE\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" ,\n                    cast(null as character varying(16777216)) as \"BILLING_ID\" ,\n                    cast(null as character varying(191)) as \"PROVIDER_NAME\" ,\n                    cast(null as character varying(173)) as \"PROVIDER_SPECIALTY\" ,\n                    cast(null as character varying(16777216)) as \"HCPCS_CODE\" ,\n                    cast(null as character varying(3)) as \"CCS_CATEGORY\" ,\n                    cast(null as character varying(256)) as \"CCS_CATEGORY_DESCRIPTION\" ,\n                    cast(\"PLACE_OF_SERVICE_CODE\" as character varying(16777216)) as \"PLACE_OF_SERVICE_CODE\" ,\n                    cast(\"PLACE_OF_SERVICE_DESCRIPTION\" as character varying(256)) as \"PLACE_OF_SERVICE_DESCRIPTION\" \n\n            from dev_coco.claims_preprocessing.orphaned_claim__encounter_grain\n\n            \n        )\n\n        \n)\n\nSELECT\n    cast(encounter_id as TEXT ) as encounter_id\n  , cast(p.patient_id as TEXT ) as patient_id\n  , cast(encounter_type as TEXT ) as encounter_type\n  , cast(encounter_group as TEXT ) as encounter_group\n  , try_cast( encounter_start_date as date ) as encounter_start_date\n  , try_cast( encounter_end_date as date ) as encounter_end_date\n  , cast(length_of_stay as integer ) as length_of_stay\n  , cast(admit_source_code as TEXT ) as admit_source_code\n  , cast(admit_source_description as TEXT ) as admit_source_description\n  , cast(admit_type_code as TEXT ) as admit_type_code\n  , cast(admit_type_description as TEXT ) as admit_type_description\n  , cast(discharge_disposition_code as TEXT ) as discharge_disposition_code\n  , cast(discharge_disposition_description as TEXT ) as discharge_disposition_description\n  , cast(null as TEXT ) as attending_provider_id\n  , cast(null as TEXT ) as attending_provider_name\n  , cast(facility_id as TEXT ) as facility_id\n  , cast(facility_name as TEXT ) as facility_name\n  , cast(facility_type as TEXT ) as facility_type\n  , cast(observation_flag as integer ) as observation_flag\n  , cast(lab_flag as integer ) as lab_flag\n  , cast(dme_flag as integer ) as dme_flag\n  , cast(ambulance_flag as integer ) as ambulance_flag\n  , cast(pharmacy_flag as integer ) as pharmacy_flag\n  , cast(ed_flag as integer ) as ed_flag\n  , cast(delivery_flag as integer ) as delivery_flag\n  , cast(delivery_type as TEXT ) as delivery_type\n  , cast(newborn_flag as integer ) as newborn_flag\n  , cast(nicu_flag as integer ) as nicu_flag\n  , cast(primary_diagnosis_code_type as TEXT ) as primary_diagnosis_code_type\n  , cast(primary_diagnosis_code as TEXT ) as primary_diagnosis_code\n  , cast(primary_diagnosis_description as TEXT ) as primary_diagnosis_description\n  , cast(ms_drg_code as TEXT ) as ms_drg_code\n  , cast(ms_drg_description as TEXT ) as ms_drg_description\n  , cast(apr_drg_code as TEXT ) as apr_drg_code\n  , cast(apr_drg_description as TEXT ) as apr_drg_description\n  , cast(total_paid_amount as numeric(28,6) ) as paid_amount\n  , cast(total_allowed_amount as numeric(28,6) ) as allowed_amount\n  , cast(total_charge_amount as numeric(28,6) ) as charge_amount\n  , cast(claim_count as  integer) as claim_count\n  , cast(inst_claim_count as  integer) as inst_claim_count\n  , cast(prof_claim_count as  integer) as prof_claim_count\n  , cast(_dbt_source_relation  as  TEXT) as source_model\n  , cast(base.data_source as TEXT ) as data_source\n  , cast('2024-10-11 23:52:28.343846+00:00' as timestamp ) as  tuva_last_run\nFROM base\ninner join dev_coco.claims_preprocessing.encounters__patient_data_source_id p on base.patient_data_source_id = p.patient_data_source_id", "relation_name": "dev_coco.core._stg_claims_encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.477865Z", "completed_at": "2024-10-11T23:52:49.489298Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.489592Z", "completed_at": "2024-10-11T23:52:49.489601Z"}], "thread_id": "Thread-6", "execution_time": 0.014451026916503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__encounter", "compiled": true, "compiled_code": "\n\nselect *\n,'claim' as encounter_source_type\n from dev_coco.core._stg_claims_encounter\nunion all\n\nselect *\n,'clinical' as encounter_source_type\n from dev_coco.core._stg_clinical_encounter\n\n", "relation_name": "dev_coco.core.encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.491368Z", "completed_at": "2024-10-11T23:52:49.496655Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.498575Z", "completed_at": "2024-10-11T23:52:49.498583Z"}], "thread_id": "Thread-10", "execution_time": 0.007863044738769531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__stg_pqi_inpatient_encounter", "compiled": true, "compiled_code": "\n\nselect \n    encounter_id\n  , data_source\n  , ms_drg_code\n  , ms_drg_description\n  , admit_source_code\n  , encounter_start_date\n  , encounter_end_date\n  , length_of_stay\n  , primary_diagnosis_code\n  , patient_id\n  , facility_id\n  , paid_amount\n  , date_part('year', encounter_start_date) as year_number\nfrom\n    dev_coco.core.encounter\nwhere \n    encounter_type = 'acute inpatient'", "relation_name": "dev_coco.ahrq_measures._stg_pqi_inpatient_encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.499906Z", "completed_at": "2024-10-11T23:52:49.532885Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.540084Z", "completed_at": "2024-10-11T23:52:49.540092Z"}], "thread_id": "Thread-7", "execution_time": 0.0443727970123291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__core_populated", "compiled": true, "compiled_code": "\n\nwith medical as (\n  select\n      'medical_claim' as table_name\n    , count(*) as record_count\n  from dev_coco.core.medical_claim\n)\n\n, pharmacy as (\n  select\n      'pharmacy_claim' as table_name\n    , count(*) as record_count\n  from dev_coco.core.pharmacy_claim\n)\n\n, eligibility as (\n  select\n      'eligibility' as table_name\n    , count(*) as record_count\n  from dev_coco.core.eligibility\n)\n\n, member_months as (\n  select\n      'member_months' as table_name\n    , count(*) as record_count\n  from dev_coco.core.member_months\n)\n\n, patient as (\n  select\n      'patient' as table_name\n    , count(*) as record_count\n  from dev_coco.core.patient\n)\n\n, encounter as (\n  select\n      'encounter' as table_name\n    , count(*) as record_count\n  from dev_coco.core.encounter\n)\n\n, condition as (\n  select\n      'condition' as table_name\n    , count(*) as record_count\n  from dev_coco.core.condition\n)\n\n, procedure_cte as (\n  select\n      'procedure' as table_name\n    , count(*) as record_count\n  from dev_coco.core.procedure\n)\n\n,final as (\nselect * from medical\nunion all\nselect * from pharmacy\nunion all\nselect * from eligibility\nunion all\nselect * from member_months\nunion all\nselect * from patient\nunion all\nselect * from encounter\nunion all\nselect * from condition\nunion all\nselect * from procedure_cte\n)\n\nselect *\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom final", "relation_name": "dev_coco.data_quality.core_populated"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.511137Z", "completed_at": "2024-10-11T23:52:49.539720Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.543540Z", "completed_at": "2024-10-11T23:52:49.543546Z"}], "thread_id": "Thread-9", "execution_time": 0.04567122459411621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__inpatient", "compiled": true, "compiled_code": "\n\nwith cte as (\n    select distinct\n        location_id\n      , npi\n      , name\n    from dev_coco.core.location\n)\n\n, final as (\n    select\n        e.*\n      , e.patient_id || '|' || e.data_source as patient_source_key\n      , e.encounter_id || '|' || e.data_source as encounter_source_key\n      , e.ms_drg_code || ' | ' || e.ms_drg_description as drgwithdescription\n      , e.primary_diagnosis_code || ' | ' || e.primary_diagnosis_description as primary_diagnosis_and_description\n      , e.admit_source_code || ' | ' || e.admit_source_description as admit_source_code_and_description\n      , e.admit_type_code || ' | ' || e.admit_type_description as admit_type_code_and_description\n      , e.discharge_disposition_code || ' | ' || e.discharge_disposition_description as discharge_code_and_description\n      , p.ccsr_parent_category\n      , p.ccsr_category\n      , p.ccsr_category_description\n      , p.ccsr_category || ' | ' || p.ccsr_category_description as ccsr_category_and_description\n      , b.body_system\n      , case \n            when e.length_of_stay <= 1 then '1. 0-1 day'\n            when e.length_of_stay <= 3 then '2. 2-3 days'\n            when e.length_of_stay <= 5 then '3. 4-5 days'\n            when e.length_of_stay <= 7 then '4. 6-7 days'\n            when e.length_of_stay <= 14 then '5. 8-14 days'\n            when e.length_of_stay <= 30 then '6. 15-30 days'\n        end as los_groups\n    from dev_coco.core.encounter as e\n    left join cte as l\n      on e.facility_id = l.location_id\n    left join dev_coco.ccsr.dx_vertical_pivot as p\n      on e.primary_diagnosis_code = p.code\n      and p.ccsr_category_rank = 1\n    left join dev_coco.ccsr._value_set_dxccsr_v2023_1_body_systems as b\n      on p.ccsr_parent_category = b.ccsr_parent_category\n    where e.encounter_type = 'acute inpatient'\n)\n\nselect * from final", "relation_name": "dev_coco.data_quality.mart_review__inpatient"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.534703Z", "completed_at": "2024-10-11T23:52:49.544336Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.566105Z", "completed_at": "2024-10-11T23:52:49.566113Z"}], "thread_id": "Thread-1", "execution_time": 0.06657981872558594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__encounter_encounter_id.d6227f8792", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    encounter_id as unique_field,\n    count(*) as n_records\n\nfrom dev_coco.core.encounter\nwhere encounter_id is not null\ngroup by encounter_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.550387Z", "completed_at": "2024-10-11T23:52:49.567866Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.570625Z", "completed_at": "2024-10-11T23:52:49.570630Z"}], "thread_id": "Thread-6", "execution_time": 0.036978960037231445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_shared_exclusion_missing_primary_dx", "compiled": true, "compiled_code": "\n\n-- Exclude encounters with missing primary diagnosis code\nselect \n    encounter_id\n  , data_source\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter\nwhere \n  primary_diagnosis_code is null", "relation_name": "dev_coco.ahrq_measures._int_pqi_shared_exclusion_missing_primary_dx"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.545099Z", "completed_at": "2024-10-11T23:52:49.568119Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.571101Z", "completed_at": "2024-10-11T23:52:49.571105Z"}], "thread_id": "Thread-5", "execution_time": 0.03790593147277832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_shared_exclusion_missing_dates", "compiled": true, "compiled_code": "\n-- Exclude encounters with missing start dates\nselect\n    encounter_id\n  , data_source\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter\nwhere \n  encounter_start_date is null", "relation_name": "dev_coco.ahrq_measures._int_pqi_shared_exclusion_missing_dates"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.555458Z", "completed_at": "2024-10-11T23:52:49.568703Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.571825Z", "completed_at": "2024-10-11T23:52:49.571828Z"}], "thread_id": "Thread-8", "execution_time": 0.037962913513183594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_shared_exclusion_transfer", "compiled": true, "compiled_code": "\n\n-- Exclude transfers from hospital, SNF, or other healthcare facility\nselect \n    encounter_id\n  , data_source\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter\nwhere \n  admit_source_code in ('4', '5', '6')", "relation_name": "dev_coco.ahrq_measures._int_pqi_shared_exclusion_transfer"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.561555Z", "completed_at": "2024-10-11T23:52:49.569568Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.572967Z", "completed_at": "2024-10-11T23:52:49.572972Z"}], "thread_id": "Thread-10", "execution_time": 0.03865504264831543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_shared_exclusion_ungroupable_drg", "compiled": true, "compiled_code": "\n\n-- Exclude encounters with ungroupable DRG\nselect \n    encounter_id\n  , data_source\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter\nwhere \n  ms_drg_code = '999'", "relation_name": "dev_coco.ahrq_measures._int_pqi_shared_exclusion_ungroupable_drg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.573434Z", "completed_at": "2024-10-11T23:52:49.764854Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.822243Z", "completed_at": "2024-10-11T23:52:49.822250Z"}], "thread_id": "Thread-4", "execution_time": 0.25570106506347656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ed_classification__int_map_primary_dx", "compiled": true, "compiled_code": "/*\nAll condition discharge diagnosis left join with probabilistic\nindicators of ED classification terminology\n*/\n\n\n\n\nwith  __dbt__cte__ed_classification__stg_encounter as (\n\n\nselect\n    encounter_id\n    , encounter_type\n    , patient_id\n    , encounter_end_date\n    , facility_id\n    , primary_diagnosis_code_type\n    , primary_diagnosis_code\n    , primary_diagnosis_description\n    , paid_amount\n    , allowed_amount\n    , charge_amount\nfrom dev_coco.core.encounter\n), condition as (\n    select * \n    from __dbt__cte__ed_classification__stg_encounter\n    where encounter_type = 'emergency department'\n)\n, icd9 as (\n  select\n     icd9 as code\n     \n     , edcnnpa\n     \n     , edcnpa\n     \n     , epct\n     \n     , noner\n     \n     , injury\n     \n     , psych\n     \n     , alcohol\n     \n     , drug\n     \n     , 1 as ed_classification_capture\n  from dev_coco.ed_classification._value_set_johnston_icd9\n)\n, icd10 as (\n  select\n     icd10 as code\n     \n     , edcnnpa\n     \n     , edcnpa\n     \n     , epct\n     \n     , noner\n     \n     , injury\n     \n     , psych\n     \n     , alcohol\n     \n     , drug\n     \n     , 1 as ed_classification_capture\n  from dev_coco.ed_classification._value_set_johnston_icd10\n)\n\nselect\n   a.*\n   \n   , icd10.edcnnpa\n   \n   , icd10.edcnpa\n   \n   , icd10.epct\n   \n   , icd10.noner\n   \n   , icd10.injury\n   \n   , icd10.psych\n   \n   , icd10.alcohol\n   \n   , icd10.drug\n   \n   , coalesce(icd10.ed_classification_capture, 0) as ed_classification_capture\nfrom condition a\nleft join icd10\n    on a.primary_diagnosis_code = icd10.code \n    and a.primary_diagnosis_code_type = 'icd-10-cm'\n\nunion all\n\nselect\n   a.*\n   \n   , icd9.edcnnpa\n   \n   , icd9.edcnpa\n   \n   , icd9.epct\n   \n   , icd9.noner\n   \n   , icd9.injury\n   \n   , icd9.psych\n   \n   , icd9.alcohol\n   \n   , icd9.drug\n   \n   , coalesce(icd9.ed_classification_capture, 0) ed_classification_capture\nfrom condition a\ninner join icd9\n    on a.primary_diagnosis_code = icd9.code \n    and a.primary_diagnosis_code_type = 'icd-9-cm'", "relation_name": "dev_coco.ed_classification._int_by_provider_parent_organization"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.585995Z", "completed_at": "2024-10-11T23:52:49.765119Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.822957Z", "completed_at": "2024-10-11T23:52:49.822961Z"}], "thread_id": "Thread-7", "execution_time": 0.25595998764038086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__readmissions__stg_core__encounter as (\n\n\nselect\n    encounter_id,\n    patient_id,\n    encounter_start_date,\n    encounter_end_date,\n    discharge_disposition_code,\n    facility_id,\n    ms_drg_code,\n    paid_amount,\n    primary_diagnosis_code,\n    '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\nwhere encounter_type = 'acute inpatient'\n) -- Staging model for the input layer:\n-- stg_encounter input layer model.\n-- This contains one row for every unique encounter in the dataset.\n\nselect\n    cast(encounter_id as TEXT) as encounter_id,\n    cast(patient_id as TEXT) as patient_id,\n    cast(encounter_start_date as date) as admit_date,\n    cast(encounter_end_date as date) as discharge_date,\n    cast(discharge_disposition_code as TEXT) as discharge_disposition_code,\n    cast(facility_id as TEXT) as facility_id,\n    cast(ms_drg_code as TEXT) as ms_drg_code,\n    cast(paid_amount as numeric(28,6)) as paid_amount,\n    cast(primary_diagnosis_code as TEXT) as primary_diagnosis_code,\n    '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom __dbt__cte__readmissions__stg_core__encounter", "relation_name": "dev_coco.readmissions._int_encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.601653Z", "completed_at": "2024-10-11T23:52:49.796767Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.823636Z", "completed_at": "2024-10-11T23:52:49.823640Z"}], "thread_id": "Thread-3", "execution_time": 0.2561793327331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0055_denominator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'office visit'\n        , 'home healthcare services'\n        , 'preventive care services established office visit, 18 and up'        \n        , 'preventive care services initial office visit, 18 and up'\n        , 'annual wellness visit'\n        , 'telephone visits'\n        , 'outpatient'\n        , 'observation'\n        , 'diabetes visit'\n        , 'ophthalmological services'\n        , 'diabetic retinopathy'\n    )\n\n)\n\n, visits_encounters as (\n\n    select patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_core__encounter encounter\n    inner join dev_coco.quality_measures._int_cbe0055__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n        and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n     )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n        from __dbt__cte__quality_measures__stg_core__procedure procs\n    inner join dev_coco.quality_measures._int_cbe0055__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join visit_codes\n            on coalesce(procs.normalized_code,procs.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n    \n    select patient_id\n    , coalesce(claim_start_date,claim_end_date) as min_date\n    , coalesce(claim_end_date,claim_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join dev_coco.quality_measures._int_cbe0055__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join  visit_codes\n        on medical_claim.hcpcs_code= visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc,cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n\n    union all\n\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n\n    union all\n    \n    select *, cast(null as TEXT) as visit_enc,cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select patient_id,min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, diabetics_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'diabetes'\n        )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , encounter_id\n        , recorded_date\n        , source_code\n        , source_code_type\n        , normalized_code\n        , normalized_code_type\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, diabetic_conditions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.encounter_id\n        , conditions.recorded_date\n        , conditions.source_code\n        , conditions.source_code_type\n    from conditions\n    inner join diabetics_codes\n        on coalesce(conditions.normalized_code_type, conditions.source_code_type) = diabetics_codes.code_system\n            and coalesce(conditions.normalized_code, conditions.source_code) = diabetics_codes.code\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.min_date\n        ) / 8760.0)  as min_age\n        , max_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as max_age\n        , qualifying_types\n    from __dbt__cte__quality_measures__stg_core__patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.death_date is null\n\n)\n\n, qualifying_patients as (\n\n    select\n        distinct\n          diabetic_conditions.patient_id\n        , patients_with_age.max_age as age\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , 1 as denominator_flag\n    from diabetic_conditions\n    left join patients_with_age\n        on diabetic_conditions.patient_id = patients_with_age.patient_id\n    cross join dev_coco.quality_measures._int_cbe0055__performance_period pp\n    where max_age >= 18 and min_age <=  75\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cbe0055_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.645733Z", "completed_at": "2024-10-11T23:52:49.821704Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.861754Z", "completed_at": "2024-10-11T23:52:49.861763Z"}], "thread_id": "Thread-2", "execution_time": 0.29346489906311035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0101_denominator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\n\n\n),  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'annual wellness visit'\n        , 'audiology visit'\n        , 'home healthcare services'\n        , 'nursing facility visit'\n        , 'occupational therapy evaluation'\n        , 'office visit'\n        , 'physical therapy evaluation'\n        , 'online assessments'\n        , 'telephone visits'  \n        , 'care services in long term residential facility'\n        , 'discharge services nursing facility'\n        , 'encounter inpatient'\n        , 'ophthalmological services'\n        , 'preventive care services established office visit, 18 and up'\n        , 'preventive care services individual counseling'\n        , 'preventive care services initial office visit, 18 and up'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, medical_claim as (\n    \n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, visits_encounters as (\n\n    select patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_core__encounter encounter\n    inner join dev_coco.quality_measures._int_cbe0101__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n            and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n    )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n    from procedures\n    inner join dev_coco.quality_measures._int_cbe0101__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join visit_codes\n        on procedures.code = visit_codes.code\n\n)\n\n, claims_encounters as (\n    \n    select \n          patient_id\n        , coalesce(claim_start_date,claim_end_date) as min_date\n        , coalesce(claim_end_date,claim_start_date) as max_date\n    from medical_claim\n    inner join dev_coco.quality_measures._int_cbe0101__performance_period  as pp \n        on coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n            and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join visit_codes\n        on medical_claim.hcpcs_code = visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc, cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n\n    union all\n\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n\n    union all\n    \n    select *, cast(null as TEXT) as visit_enc, cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select patient_id, min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n              coalesce(min(visit_enc),'')\n            , coalesce(min(proc_enc),''))\n            , coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as age\n        , max_date\n        , qualifying_types\n    from __dbt__cte__quality_measures__stg_core__patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.death_date is null\n\n)\n\n, falls_screening_code as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where code = '1100F'\n    /* \n        Patient screened for future fall risk; documentation of two or more falls in the past year \n        or any fall with injury in the past year\n    */\n)\n\n, qualifying_procedures as (\n\n    select\n          patient_id\n        , procedure_date as evidence_date\n    from procedures\n    inner join falls_screening_code\n        on procedures.code = falls_screening_code.code\n            and procedures.code_type = falls_screening_code.code_system\n            \n)\n\n, qualifying_claims as (\n\n    select\n          patient_id\n        , coalesce(claim_end_date, claim_start_date) as evidence_date\n    from medical_claim\n    inner join falls_screening_code\n        on medical_claim.hcpcs_code = falls_screening_code.code\n            and lower(falls_screening_code.code_system) = 'hcpcs'\n\n)\n\n, qualifying_cares as (\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_procedures\n\n    union all\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_claims\n\n)\n\n, qualifying_cares_past_year as (\n\n    select\n          patient_id\n        , evidence_date\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n    from qualifying_cares\n    inner join dev_coco.quality_measures._int_cbe0101__performance_period pp\n        on evidence_date between pp.performance_period_begin and pp.performance_period_end \n    /*  \n        code 1100F is reported if there are two or more falls in the last year itself,\n        so if it's reported in performance year, it indicates the falls in the last year\n    */\n\n)\n\n, qualifying_patients as (\n\n    select\n          qualifying_cares_past_year.patient_id\n        , patients_with_age.age\n        , max_date as encounter_date\n        , qualifying_cares_past_year.performance_period_begin\n        , qualifying_cares_past_year.performance_period_end\n        , qualifying_cares_past_year.measure_id\n        , qualifying_cares_past_year.measure_name\n        , qualifying_cares_past_year.measure_version\n        , 1 as denominator_flag\n    from qualifying_cares_past_year\n    left join patients_with_age\n        on qualifying_cares_past_year.patient_id = patients_with_age.patient_id\n    where age >= 65\n\n)\n\n\n, add_data_types as (\n\n    select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(encounter_date as date) as encounter_date\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , encounter_date\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cbe0101_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.681418Z", "completed_at": "2024-10-11T23:52:49.822703Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.936853Z", "completed_at": "2024-10-11T23:52:49.936861Z"}], "thread_id": "Thread-9", "execution_time": 0.3679671287536621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm130_denominator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n            'encounter to document medications'\n    )\n\n)\n\n, visits_encounters as (\n\n    select \n          patient_id\n        , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as procedure_encounter_date -- alias only to enable union later\n        , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as claims_encounter_date -- alias only to enable union later\n    from __dbt__cte__quality_measures__stg_core__encounter encounter\n    inner join dev_coco.quality_measures._int_cqm130__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n            and coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n    )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as procedure_encounter_date\n        , try_cast( null as date ) as claims_encounter_date\n    from __dbt__cte__quality_measures__stg_core__procedure procs\n    inner join dev_coco.quality_measures._int_cqm130__performance_period as pp\n        on procedure_date between pp.performance_period_begin and pp.performance_period_end\n    inner join visit_codes\n        on coalesce(procs.normalized_code,procs.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n    \n    select \n          patient_id\n        , try_cast( null as date ) as procedure_encounter_date\n        , coalesce(claim_end_date,claim_start_date) as claims_encounter_date\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join dev_coco.quality_measures._int_cqm130__performance_period as pp \n        on coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n            and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join visit_codes\n        on medical_claim.hcpcs_code = visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc, cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n\n    union all\n\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n\n    union all\n    \n    select *, cast(null as TEXT) as visit_enc, cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, multiple_encounters_by_patient as (\n\n    select\n          patient_id\n        , procedure_encounter_date\n        , claims_encounter_date\n        , case when procedure_encounter_date >= claims_encounter_date\n                then procedure_encounter_date\n            else claims_encounter_date\n          end as max_encounter_date\n        , coalesce(min(visit_enc), '') || coalesce(min(proc_enc), '') || coalesce(min(claim_enc), '') as qualifying_types\n    from all_encounters\n    group by patient_id, procedure_encounter_date, claims_encounter_date\n\n)\n\n, max_encounter_dates_by_patient as (\n\n\tselect\n\t\t  patient_id\n\t\t, max(max_encounter_date) as max_encounter_date\n\tfrom multiple_encounters_by_patient\n\tgroup by patient_id\n\n)\n\n, latest_patient_encounters as (\n\t\n\tselect\n\t\t  max_encounter_dates_by_patient.patient_id\n\t\t, max_encounter_dates_by_patient.max_encounter_date\n\t\t, procedure_encounter_date\n\t\t, claims_encounter_date\n\tfrom max_encounter_dates_by_patient\n\tinner join multiple_encounters_by_patient\n\t\ton max_encounter_dates_by_patient.patient_id = multiple_encounters_by_patient.patient_id\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , procedure_encounter_date\n        , claims_encounter_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_encounter_date\n        ) / 8760.0) as max_age\n    from __dbt__cte__quality_measures__stg_core__patient p\n    inner join latest_patient_encounters e\n        on p.patient_id = e.patient_id\n    where p.death_date is null\n\n)\n\n, qualifying_patients as (\n\n    select\n        distinct\n          patients_with_age.patient_id\n        , patients_with_age.max_age as age\n        , patients_with_age.procedure_encounter_date\n        , patients_with_age.claims_encounter_date\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , 1 as denominator_flag\n    from patients_with_age\n    cross join dev_coco.quality_measures._int_cqm130__performance_period pp\n    where max_age >= 18\n    \n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(procedure_encounter_date as date) as procedure_encounter_date\n        , cast(claims_encounter_date as date) as claims_encounter_date\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , procedure_encounter_date\n    , claims_encounter_date\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm130_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.765358Z", "completed_at": "2024-10-11T23:52:49.842949Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:49.992477Z", "completed_at": "2024-10-11T23:52:49.992485Z"}], "thread_id": "Thread-1", "execution_time": 0.4199197292327881, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm236_denominator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'office visit'\n        , 'home healthcare services'\n        , 'preventive care services established office visit, 18 and up'\n        , 'preventive care services initial office visit, 18 and up'\n        , 'annual wellness visit'\n        , 'telephone visits'\n        , 'emergency department evaluation and management visit'\n    )\n\n)\n\n, visits_encounters as (\n\n    select \n           patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_core__encounter encounter\n    inner join dev_coco.quality_measures._int_cqm236__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n        and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'outpatient'\n        , 'nonacute inpatient'\n        , 'encounter inpatient'\n        , 'acute_inpatient'\n        , 'emergency_department'\n    )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n        from __dbt__cte__quality_measures__stg_core__procedure procs\n    inner join dev_coco.quality_measures._int_cqm236__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join visit_codes\n            on coalesce(procs.normalized_code,procs.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n\n    select \n          patient_id\n        , coalesce(claim_start_date,claim_end_date) as min_date\n        , coalesce(claim_end_date,claim_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join dev_coco.quality_measures._int_cqm236__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join visit_codes\n        on medical_claim.hcpcs_code= visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc,cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n    union all\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n    union all\n    select *, cast(null as TEXT) as visit_enc,cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select\n          patient_id\n        , min(min_date) min_date\n        , max(max_date) max_date\n        , concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, hypertension_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'essential hypertension'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , encounter_id\n        , recorded_date\n        , source_code\n        , source_code_type\n        , normalized_code\n        , normalized_code_type\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, hypertension_conditions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.encounter_id\n        , conditions.recorded_date\n        , conditions.source_code\n        , conditions.source_code_type\n    from conditions\n    inner join hypertension_codes\n        on coalesce(conditions.normalized_code_type, conditions.source_code_type) = hypertension_codes.code_system\n            and coalesce(conditions.normalized_code, conditions.source_code) = hypertension_codes.code\n\n)\n\n, patients_with_age as (\n    \n    select\n          p.patient_id\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.min_date\n        ) / 8760.0)  as min_age\n        , max_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as max_age\n        , qualifying_types\n    from __dbt__cte__quality_measures__stg_core__patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.death_date is null\n\n)\n\n-- Patients 18-85 years of age who had a visit and diagnosis of essential hypertension starting before and continuing into, or starting during the first six months of the measurement period.\n, qualifying_patients as (\n\n    select\n        distinct\n          hypertension_conditions.patient_id\n        , hypertension_conditions.recorded_date\n        , patients_with_age.max_age as age\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , 1 as denominator_flag\n    from hypertension_conditions\n    left join patients_with_age\n        on hypertension_conditions.patient_id = patients_with_age.patient_id\n    cross join dev_coco.quality_measures._int_cqm236__performance_period pp\n    where max_age >= 18 and min_age <=  85\n        and hypertension_conditions.recorded_date between\n            \n\n    dateadd(\n        month,\n        -12,\n        performance_period_begin\n        )\n\n\n            and \n            \n\n    dateadd(\n        month,\n        6,\n        performance_period_begin\n        )\n\n\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm236_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.886764Z", "completed_at": "2024-10-11T23:52:50.013483Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.016287Z", "completed_at": "2024-10-11T23:52:50.016292Z"}], "thread_id": "Thread-8", "execution_time": 0.25180602073669434, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_denominator", "compiled": true, "compiled_code": "\n\n/*\nDENOMINATOR:\nPatients 45-75 years of age with a visit during the measurement period\nDENOMINATOR NOTE: To assess the age for exclusions, the patient\u2019s age on the date of the encounter\nshould be used\n*Signifies that this CPT Category I code is a non-covered service under the Medicare Part B Physician Fee\nSchedule (PFS). These non-covered services should be counted in the denominator population for MIPS\nCQMs.\nDenominator Criteria (Eligible Cases):\nPatients 45 to 75 years of age on date of encounter\nAND\nPatient encounter during the performance period (CPT or HCPCS): 99202, 99203, 99204, 99205,\n99212, 99213, 99214, 99215, 99341, 99342, 99344, 99345, 99347, 99348, 99349, 99350, 99386*, 99387*,\n99396*, 99397*, G0438, G0439\n*/\n\nwith  __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'office visit'\n        , 'home healthcare services'\n        , 'preventive care services established office visit, 18 and up'\n        , 'preventive care services initial office visit, 18 and up'\n        , 'annual wellness visit'\n        , 'telephone visits'\n        , 'online assessments'\n    )\n\n)\n\n, visits_encounters as (\n\n    select \n          patient_id\n        , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n        , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_core__encounter encounter\n    inner join dev_coco.quality_measures._int_nqf0034__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n        and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where encounter_type in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n    )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n        from __dbt__cte__quality_measures__stg_core__procedure procs\n    inner join dev_coco.quality_measures._int_nqf0034__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join visit_codes\n            on coalesce(procs.normalized_code,procs.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n\n    select patient_id\n    , coalesce(claim_start_date,claim_end_date) as min_date\n    , coalesce(claim_end_date,claim_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join dev_coco.quality_measures._int_nqf0034__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join visit_codes\n        on medical_claim.hcpcs_code= visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc,cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n    union all\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n    union all\n    select *, cast(null as TEXT) as visit_enc,cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select patient_id, min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.min_date\n        ) / 8766.0)  as min_age\n        , max_date\n        ,floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8766.0) as max_age\n        , qualifying_types\n    from __dbt__cte__quality_measures__stg_core__patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.death_date is null -- ensures deceased patients are not included\n\n)\n\nselect \n      patient_id\n    , min_age\n    , max_age\n    , qualifying_types\nfrom patients_with_age\nwhere max_age >= 45 and min_age <=  75", "relation_name": "dev_coco.quality_measures._int_nqf0034_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.836733Z", "completed_at": "2024-10-11T23:52:50.014051Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.017029Z", "completed_at": "2024-10-11T23:52:50.017034Z"}], "thread_id": "Thread-5", "execution_time": 0.2529590129852295, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm48_denominator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\n\n\n),  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'occupational therapy evaluation'\n        , 'office visit'\n        , 'outpatient'\n        , 'physical therapy evaluation'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, medical_claim as (\n    \n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, visits_encounters as (\n\n    select patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_core__encounter encounter\n    inner join dev_coco.quality_measures._int_cqm48__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n            and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n    )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n    from procedures\n    inner join dev_coco.quality_measures._int_cqm48__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join visit_codes\n        on procedures.code = visit_codes.code\n            and procedures.code_type = visit_codes.code_system\n\n)\n\n, claims_encounters as (\n    \n    select \n          patient_id\n        , coalesce(claim_start_date,claim_end_date) as min_date\n        , coalesce(claim_end_date,claim_start_date) as max_date\n    from medical_claim\n    inner join dev_coco.quality_measures._int_cqm48__performance_period  as pp \n        on coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n            and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join visit_codes\n        on medical_claim.hcpcs_code = visit_codes.code\n            and visit_codes.code_system = 'hcpcs'\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc, cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n\n    union all\n\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n\n    union all\n    \n    select *, cast(null as TEXT) as visit_enc, cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select patient_id, min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n              coalesce(min(visit_enc),'')\n            , coalesce(min(proc_enc),''))\n            , coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as age\n        , max_date\n        , qualifying_types\n    from __dbt__cte__quality_measures__stg_core__patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.sex = 'female'\n        and p.death_date is null\n\n)\n\n, qualifying_patients as (\n\n    select\n        distinct\n          patients_with_age.patient_id\n        , patients_with_age.age\n        , patients_with_age.max_date as encounter_date\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , 1 as denominator_flag\n    from patients_with_age\n    cross join dev_coco.quality_measures._int_cqm48__performance_period pp\n    where age >= 65\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(encounter_date as date) as encounter_date\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , encounter_date\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm48_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.824137Z", "completed_at": "2024-10-11T23:52:50.014296Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.017497Z", "completed_at": "2024-10-11T23:52:50.017501Z"}], "thread_id": "Thread-6", "execution_time": 0.25377702713012695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438_denominator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), patients_with_ascvd as (\n\n    select \n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , 1 as criteria\n    from dev_coco.quality_measures._int_cqm438_denominator_criteria1\n\n)\n\n, patients_with_cholesterol as (\n\n    select \n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , 2 as criteria\n    from dev_coco.quality_measures._int_cqm438_denominator_criteria2\n\n)\n\n, patients_with_diabetes as (\n\n    select \n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , 3 as criteria\n    from dev_coco.quality_measures._int_cqm438_denominator_criteria3\n\n)\n\n, visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes \n    where lower(concept_name) in (\n          'annual wellness visit'\n        , 'office visit'\n        , 'outpatient consultation'\n        , 'preventive care services established office visit, 18 and up'\n        , 'preventive care services individual counseling'\n        , 'preventive care services initial office visit, 18 and up'\n        , 'outpatient encounters for preventive care'\n    )\n\n)\n\n, visits_encounters as (\n\n    select patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_core__encounter encounter\n    inner join dev_coco.quality_measures._int_cqm438__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n        and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n    )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n    from __dbt__cte__quality_measures__stg_core__procedure procedures\n    inner join dev_coco.quality_measures._int_cqm438__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join visit_codes\n        on coalesce(procedures.normalized_code,procedures.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n    \n    select patient_id\n    , coalesce(claim_start_date,claim_end_date) as min_date\n    , coalesce(claim_end_date,claim_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join dev_coco.quality_measures._int_cqm438__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join visit_codes\n        on medical_claim.hcpcs_code= visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc,cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n\n    union all\n\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n\n    union all\n    \n    select *, cast(null as TEXT) as visit_enc, cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select patient_id,min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , floor(datediff(\n        hour,\n        birth_date,\n        performance_period_begin\n        ) / 8760.0)  as age\n    from __dbt__cte__quality_measures__stg_core__patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n            and p.death_date is null\n    cross join dev_coco.quality_measures._int_cqm438__performance_period\n\n)\n\n, qualifying_patients_from_criteria1 as (\n\n    select\n        distinct\n          patients_with_ascvd.patient_id\n        , patients_with_age.age as age\n        , patients_with_ascvd.performance_period_begin\n        , patients_with_ascvd.performance_period_end\n        , patients_with_ascvd.measure_id\n        , patients_with_ascvd.measure_name\n        , patients_with_ascvd.measure_version\n        , 1 as denominator_flag\n    from patients_with_ascvd\n    left join patients_with_age\n    on patients_with_ascvd.patient_id = patients_with_age.patient_id\n    where age is not null\n\n)\n\n, qualifying_patients_from_criteria2 as (\n\n    select\n        distinct\n          patients_with_cholesterol.patient_id\n        , patients_with_age.age as age\n        , patients_with_cholesterol.performance_period_begin\n        , patients_with_cholesterol.performance_period_end\n        , patients_with_cholesterol.measure_id\n        , patients_with_cholesterol.measure_name\n        , patients_with_cholesterol.measure_version\n        , 1 as denominator_flag\n    from patients_with_cholesterol\n    left join patients_with_age\n    on patients_with_cholesterol.patient_id = patients_with_age.patient_id\n    where age between 20 and 75\n\n)\n\n, qualifying_patients_from_criteria3 as (\n\n    select\n        distinct\n          patients_with_diabetes.patient_id\n        , patients_with_age.age as age\n        , patients_with_diabetes.performance_period_begin\n        , patients_with_diabetes.performance_period_end\n        , patients_with_diabetes.measure_id\n        , patients_with_diabetes.measure_name\n        , patients_with_diabetes.measure_version\n        , 1 as denominator_flag\n    from patients_with_diabetes\n    left join patients_with_age\n    on patients_with_diabetes.patient_id = patients_with_age.patient_id\n    where age between 40 and 75\n\n)\n\n, final_denominator as (\n    \n    select\n          patient_id\n        , age\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from qualifying_patients_from_criteria1\n\n    union all\n\n    select\n          patient_id\n        , age\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from qualifying_patients_from_criteria2\n    \n    union all\n\n    select\n          patient_id\n        , age\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from qualifying_patients_from_criteria3\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from final_denominator\n\n)\n\nselect \n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm438_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:49.967342Z", "completed_at": "2024-10-11T23:52:50.015796Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.062150Z", "completed_at": "2024-10-11T23:52:50.062160Z"}], "thread_id": "Thread-10", "execution_time": 0.27796292304992676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0041_denominator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'annual wellness visit'\n        , 'discharge services nursing facility'\n        , 'hemodialysis'\n        , 'home healthcare services'\n        , 'nursing facility visit'\n        , 'office visit'\n        , 'outpatient consultation'\n        , 'peritoneal dialysis'\n        , 'preventive care services established office visit, 18 and up'\n        , 'preventive care services group counseling'\n        , 'preventive care services individual counseling'\n        , 'preventive care services initial office visit, 18 and up'\n        , 'preventive care services, initial office visit, 0 to 17'\n        , 'preventive care, established office visit, 0 to 17'\n        , 'online assessments'\n        , 'patient provider interaction'\n        , 'telephone visits'\n    )\n\n)\n\n, visits_encounters as (\n\n    select patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_core__encounter encounter\n    inner join dev_coco.quality_measures._int_nqf0041__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n        and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n     )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n    from __dbt__cte__quality_measures__stg_core__procedure procedures\n    inner join dev_coco.quality_measures._int_nqf0041__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join visit_codes\n        on coalesce(procedures.normalized_code,procedures.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n    \n    select \n          patient_id\n        , coalesce(claim_start_date,claim_end_date) as min_date\n        , coalesce(claim_end_date,claim_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join dev_coco.quality_measures._int_nqf0041__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join visit_codes\n        on medical_claim.hcpcs_code = visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc, cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n\n    union all\n\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n\n    union all\n    \n    select *, cast(null as TEXT) as visit_enc, cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select patient_id, min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n              coalesce(min(visit_enc),'')\n            , coalesce(min(proc_enc),''))\n            , coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , min_date\n        , (datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as age_in_decimal_point\n        , max_date\n        , qualifying_types\n    from __dbt__cte__quality_measures__stg_core__patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.death_date is null\n\n)\n\n, qualifying_patients as (\n\n    select\n        distinct\n          patients_with_age.patient_id\n        , patients_with_age.age_in_decimal_point as age\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , 1 as denominator_flag\n    from patients_with_age\n    cross join dev_coco.quality_measures._int_nqf0041__performance_period pp\n    where age_in_decimal_point >= 0.5 --filters patients aged 6 months or older\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , round(cast(age as numeric(28,6)), 1) as age -- ensures age is seen in one decimal point\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0041_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.018203Z", "completed_at": "2024-10-11T23:52:50.302758Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.305207Z", "completed_at": "2024-10-11T23:52:50.305215Z"}], "thread_id": "Thread-4", "execution_time": 0.29346203804016113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0053_denominator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\n\n\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), visit_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes as value_sets\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, visits_encounters as (\n\n    select \n           patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n         , encounter_type\n    from __dbt__cte__quality_measures__stg_core__encounter as encounter\n    inner join dev_coco.quality_measures._int_nqf0053__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n        and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n        from __dbt__cte__quality_measures__stg_core__procedure procs\n    inner join dev_coco.quality_measures._int_nqf0053__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join  visit_codes\n            on coalesce(procs.normalized_code,procs.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n\n    select \n          patient_id\n        , coalesce(claim_start_date,claim_end_date) as min_date\n        , coalesce(claim_end_date,claim_start_date) as max_date\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join dev_coco.quality_measures._int_nqf0053__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join  visit_codes\n        on medical_claim.hcpcs_code= visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select\n          patient_id\n        , min_date\n        , max_date\n        , 'v' as visit_enc,cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n    union all\n    select\n          patient_id\n        , min_date\n        , max_date\n        , cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n    union all\n    select\n          patient_id\n        , min_date\n        , max_date\n        , cast(null as TEXT) as visit_enc,cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select\n          patient_id\n        , min(min_date) min_date\n        , max(max_date) max_date\n        , concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, bone_fracture_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) = 'fracture diagnoses'\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , encounter_id\n        , recorded_date\n        , source_code\n        , source_code_type\n        , normalized_code\n        , normalized_code_type\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, bone_fracture_conditions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.encounter_id\n        , conditions.recorded_date\n        , conditions.source_code\n        , conditions.source_code_type\n    from conditions\n    inner join bone_fracture_codes\n        on coalesce(conditions.normalized_code_type, conditions.source_code_type) = bone_fracture_codes.code_system\n            and coalesce(conditions.normalized_code, conditions.source_code) = bone_fracture_codes.code\n\n)\n\n, patients_with_age as (\n\n    select\n          patient.patient_id\n        , patient.sex\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.min_date\n        ) / 8760.0)  as min_age\n        , max_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as max_age\n        , qualifying_types\n    from __dbt__cte__quality_measures__stg_core__patient patient\n    inner join encounters_by_patient e\n        on patient.patient_id = e.patient_id\n    where patient.death_date is null\n\n)\n\n, qualifying_patients_w_fractures as (\n\n    select\n        distinct\n          bone_fracture_conditions.patient_id\n        , bone_fracture_conditions.recorded_date\n        , patients_with_age.max_age as age\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , 1 as denominator_flag\n    from bone_fracture_conditions\n    left join patients_with_age\n        on bone_fracture_conditions.patient_id = patients_with_age.patient_id\n    cross join dev_coco.quality_measures._int_nqf0053__performance_period pp\n    where max_age >= 50 and min_age <=  85\n        and bone_fracture_conditions.recorded_date between\n            \n\n    dateadd(\n        month,\n        -6,\n        performance_period_begin\n        )\n\n\n            and\n                pp.lookback_period_june\n        and lower(patients_with_age.sex) = 'female'\n\n)\n\n, fracture_procedures as (\n\n    select\n        procedures.*\n    from procedures\n    inner join visit_codes\n        on procedures.code = visit_codes.code\n            and procedures.code_type = visit_codes.code_system\n    inner join dev_coco.quality_measures._int_nqf0053__performance_period as pp\n        on procedures.procedure_date \n            between pp.performance_period_begin and pp.performance_period_end\n    where lower(visit_codes.concept_name) = 'fracture procedures'\n\n)\n\n, qualifying_patients_w_encounter as (\n\n    select\n        qualifying_patients_w_fractures.*\n    from qualifying_patients_w_fractures\n    inner join visits_encounters\n        on qualifying_patients_w_fractures.patient_id = visits_encounters.patient_id\n    where \n        lower(visits_encounters.encounter_type) in (\n              'acute inpatient'\n            , 'annual wellness visit'\n            , 'emergency department visit'\n            , 'emergency department'\n            , 'home healthcare services'\n            , 'office visit'\n            , 'preventive care services established office visit, 18 and up'\n            , 'preventive care services initial office visit, 18 and up'\n            , 'emergency department evaluation and management visit'\n            , 'outpatient'\n        )\n)\n\n, qualifying_patients_w_procedure as (\n\n    select\n        qualifying_patients_w_fractures.*\n    from qualifying_patients_w_fractures\n    inner join fracture_procedures\n        on qualifying_patients_w_fractures.patient_id = fracture_procedures.patient_id\n\n)\n\n, qualifying_patients as (\n\n    select\n        distinct\n        qualifying_patients_w_encounter.*\n    from qualifying_patients_w_encounter\n    left join qualifying_patients_w_procedure\n        on qualifying_patients_w_encounter.patient_id = qualifying_patients_w_procedure.patient_id\n    left join claims_encounters\n        on qualifying_patients_w_encounter.patient_id = claims_encounters.patient_id\n    where (cast(claims_encounters.place_of_service_code as TEXT) not in ('21')\n        or claims_encounters.patient_id is null)\n\n    union all\n\n    select\n        distinct\n        qualifying_patients_w_procedure.*\n    from qualifying_patients_w_procedure\n    left join qualifying_patients_w_encounter\n        on qualifying_patients_w_encounter.patient_id = qualifying_patients_w_procedure.patient_id\n    where qualifying_patients_w_encounter.patient_id is null\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(recorded_date as date) as recorded_date\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , recorded_date  \n    , age\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0053_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.074665Z", "completed_at": "2024-10-11T23:52:50.303392Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.306460Z", "completed_at": "2024-10-11T23:52:50.306465Z"}], "thread_id": "Thread-3", "execution_time": 0.29337596893310547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0097_denominator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), visit_codes as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n\n)\n\n, valid_concepts as (\n\n    select\n        concept_name\n    from dev_coco.quality_measures._value_set_concepts\n    where concept_name in (\n          'annual wellness visit'\n        , 'care services in long term residential facility'\n        , 'encounter to document medications'\n        , 'home healthcare services'\n        , 'office visit'\n        , 'outpatient'\n        , 'psychoanalysis'\n    )\n\n)\n\n, valid_visit_codes as (\n\n    select\n          visit_codes.concept_name\n        , visit_codes.code\n        , visit_codes.code_system\n    from visit_codes\n    inner join valid_concepts\n        on visit_codes.concept_name = valid_concepts.concept_name\n\n)\n\n, visits_encounters as (\n\n    select patient_id\n         , length_of_stay\n         , encounter.encounter_end_date\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_core__encounter encounter\n    inner join dev_coco.quality_measures._int_nqf0097__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n            and coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    -- all encounter types considered; inpatient encounters are filtered by length of stay being more than 0 days\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n        from __dbt__cte__quality_measures__stg_core__procedure procs\n\n    inner join dev_coco.quality_measures._int_nqf0097__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join valid_visit_codes\n            on coalesce(procs.normalized_code,procs.source_code) = valid_visit_codes.code\n\n)\n\n, claims_encounters as (\n    \n    select patient_id\n    , coalesce(claim_start_date,claim_end_date) as min_date\n    , coalesce(claim_end_date,claim_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join dev_coco.quality_measures._int_nqf0097__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join  valid_visit_codes\n        on medical_claim.hcpcs_code= valid_visit_codes.code\n\n)\n\n, all_encounters as (\n\n    select\n          patient_id\n        , min_date\n        , max_date\n        , 'v' as visit_enc\n        , cast(null as TEXT) as proc_enc\n        , cast(null as TEXT) as claim_enc\n    from visits_encounters\n\n    union all\n\n    select\n          patient_id\n        , min_date\n        , max_date\n        , cast(null as TEXT) as visit_enc\n        , 'p' as proc_enc\n        , cast(null as TEXT) as claim_enc\n    from procedure_encounters\n\n    union all\n    \n    select\n          patient_id\n        , min_date\n        , max_date\n        , cast(null as TEXT) as visit_enc\n        , cast(null as TEXT) as proc_enc\n        , 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select patient_id,min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.min_date\n        ) / 8760.0)  as min_age\n        , max_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as max_age\n        , qualifying_types\n    from __dbt__cte__quality_measures__stg_core__patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.death_date is null\n\n)\n\n, qualifying_patients as (\n\n    select\n        distinct\n          patients_with_age.patient_id\n        , patients_with_age.max_age as age\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , visits_encounters.encounter_end_date as discharge_date\n        , 1 as denominator_flag\n    from patients_with_age\n    cross join dev_coco.quality_measures._int_nqf0097__performance_period pp\n    inner join visits_encounters\n        on patients_with_age.patient_id = visits_encounters.patient_id\n    where max_age >= 18\n        and visits_encounters.length_of_stay > 0 --ensures inpatient\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(discharge_date as date) as discharge_date\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , discharge_date\n    , denominator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0097_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.049562Z", "completed_at": "2024-10-11T23:52:50.303854Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.318574Z", "completed_at": "2024-10-11T23:52:50.318625Z"}], "thread_id": "Thread-7", "execution_time": 0.3065152168273926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0059_denominator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'office visit'\n        , 'home healthcare services'\n        , 'preventive care services established office visit, 18 and up'\n        , 'preventive care services initial office visit, 18 and up'\n        , 'annual wellness visit'\n        , 'telephone visits'\n        , 'nutrition services'\n    )\n\n)\n\n, visits_encounters as (\n\n    select patient_id\n         , coalesce(encounter.encounter_start_date,encounter.encounter_end_date) as min_date\n         , coalesce(encounter.encounter_end_date,encounter.encounter_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_core__encounter encounter\n    inner join dev_coco.quality_measures._int_nqf0059__performance_period as pp\n        on coalesce(encounter.encounter_end_date,encounter.encounter_start_date) >= pp.performance_period_begin\n        and  coalesce(encounter.encounter_start_date,encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n    )\n\n)\n\n, procedure_encounters as (\n\n    select \n          patient_id\n        , procedure_date as min_date\n        , procedure_date as max_date\n        from __dbt__cte__quality_measures__stg_core__procedure procs\n    inner join dev_coco.quality_measures._int_nqf0059__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and  pp.performance_period_end\n    inner join  visit_codes\n            on coalesce(procs.normalized_code,procs.source_code) = visit_codes.code\n\n)\n\n, claims_encounters as (\n\n    select \n          patient_id\n        , coalesce(claim_start_date,claim_end_date) as min_date\n        , coalesce(claim_end_date,claim_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join dev_coco.quality_measures._int_nqf0059__performance_period  as pp on\n        coalesce(claim_end_date,claim_start_date)  >=  pp.performance_period_begin\n         and coalesce(claim_start_date,claim_end_date) <=  pp.performance_period_end\n    inner join  visit_codes\n        on medical_claim.hcpcs_code= visit_codes.code\n\n)\n\n, all_encounters as (\n    select *, 'v' as visit_enc,cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n    union all\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n    union all\n    select *, cast(null as TEXT) as visit_enc,cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n)\n\n, encounters_by_patient as (\n    select patient_id,min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n)\n\n, diabetics_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'diabetes'\n        , 'hba1c laboratory test'\n    )\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , source_code\n        , source_code_type\n        , normalized_code\n        , normalized_code_type\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, diabetic_conditions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n    from conditions\n    inner join diabetics_codes\n        on coalesce(conditions.normalized_code_type, conditions.source_code_type) = diabetics_codes.code_system\n            and coalesce(conditions.normalized_code, conditions.source_code) = diabetics_codes.code\n\n)\n\n, patients_with_age as (\n    select\n          p.patient_id\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.min_date\n        ) / 8760.0)  as min_age\n        , max_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as max_age\n        , qualifying_types\n    from __dbt__cte__quality_measures__stg_core__patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.death_date is null\n\n)\n\n, qualifying_patients as (\n\n    select\n        distinct\n          diabetic_conditions.patient_id\n        , patients_with_age.max_age as age\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , 1 as denominator_flag\n    from diabetic_conditions\n    left join patients_with_age\n        on diabetic_conditions.patient_id = patients_with_age.patient_id\n    cross join dev_coco.quality_measures._int_nqf0059__performance_period pp\n    where max_age >= 18 and min_age <=  75\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0059_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.204984Z", "completed_at": "2024-10-11T23:52:50.304553Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.326842Z", "completed_at": "2024-10-11T23:52:50.326852Z"}], "thread_id": "Thread-9", "execution_time": 0.3117189407348633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_denominator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n),  __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\n\n\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n), performance_period as (\n\n    select\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_end\n        , performance_period_begin\n        , performance_period_lookback\n    from dev_coco.quality_measures._int_nqf2372__performance_period\n\n)\n\n, patient as (\n\n    select\n          patient_id\n        , sex\n        , birth_date\n        , death_date\n    from __dbt__cte__quality_measures__stg_core__patient\n\n)\n\n, encounters as (\n\n    select\n          patient_id\n        , encounter_type\n        , encounter_start_date\n    from __dbt__cte__quality_measures__stg_core__encounter\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where concept_name in (\n          'Office Visit'\n        , 'Home Healthcare Services'\n        , 'Preventive Care Services Established Office Visit, 18 and Up'\n        , 'Preventive Care Services Initial Office Visit, 18 and Up'\n        , 'Annual Wellness Visit'\n        , 'Telephone Visits'\n        , 'Online Assessments'\n    )\n\n)\n\n, patient_with_age as (\n\n    select\n          patient.patient_id\n        , patient.sex\n        , patient.birth_date\n        , patient.death_date\n        , performance_period.measure_id\n        , performance_period.measure_name\n        , performance_period.measure_version\n        , performance_period.performance_period_begin\n        , performance_period.performance_period_end\n        , performance_period.performance_period_lookback\n        , floor(datediff(\n        hour,\n        patient.birth_date,\n        performance_period.performance_period_begin\n        ) / 8760.0) as age  -- 365*24 hours in a year\n    from patient\n         cross join performance_period\n\n)\n\n/*\n    Filter patient to living women 51 - 74 years of age\n    at the beginning of the measurement period\n*/\n, patient_filtered as (\n\n    select\n          patient_id\n        , age\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , performance_period_lookback\n        , 1 as denominator_flag\n    from patient_with_age\n    where lower(sex) = 'female'\n        and age between 51 and 74\n        and death_date is null\n\n)\n\n/*\n    Filter to qualifying visit types by claim procedures\n*/\n, visit_claims as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n    from medical_claim\n         inner join visit_codes\n            on medical_claim.hcpcs_code = visit_codes.code\n    where visit_codes.code_system = 'hcpcs'\n\n)\n\n/*\n    Filter encounters to qualifying visit type\n*/\n, visit_encounters as (\n\n    select\n          patient_id\n        , encounter_start_date\n    from encounters\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n        )\n\n)\n\n/*\n    Filter to qualifying visit types by procedure\n*/\n, visit_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n    from procedures\n         inner join visit_codes\n             on procedures.code = visit_codes.code\n             and procedures.code_type = visit_codes.code_system\n\n)\n\n/*\n    Filter to final eligible population/denominator before exclusions\n    with a qualifying visit during the measurement period\n*/\n, eligible_population as (\n\n    select\n          patient_filtered.patient_id\n        , patient_filtered.age\n        , patient_filtered.measure_id\n        , patient_filtered.measure_name\n        , patient_filtered.measure_version\n        , patient_filtered.performance_period_begin\n        , patient_filtered.performance_period_end\n        , performance_period_lookback\n        , patient_filtered.denominator_flag\n    from patient_filtered\n         left join visit_claims\n            on patient_filtered.patient_id = visit_claims.patient_id\n         left join visit_procedures\n            on patient_filtered.patient_id = visit_procedures.patient_id\n         left join visit_encounters\n            on patient_filtered.patient_id = visit_encounters.patient_id\n    where (\n        visit_claims.claim_start_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n        or visit_claims.claim_end_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n        or visit_procedures.procedure_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n        or visit_encounters.encounter_start_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n    )\n\n)\n\n, add_data_types as (\n\n    select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(performance_period_lookback as date) as performance_period_lookback\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from eligible_population\n\n)\n\n select distinct\n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , performance_period_lookback\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf2372_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.181196Z", "completed_at": "2024-10-11T23:52:50.305728Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.331718Z", "completed_at": "2024-10-11T23:52:50.331725Z"}], "thread_id": "Thread-2", "execution_time": 0.3172469139099121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0420_denominator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), visit_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'home healthcare services'\n        , 'office visit'\n        , 'encounter to document medications'\n        , 'psychological and/or neuropsychological test administration'\n    )\n\n)\n\n, visits_encounters as (\n\n    select \n          patient_id\n        , coalesce(encounter.encounter_start_date, encounter.encounter_end_date) as min_date\n        , coalesce(encounter.encounter_end_date, encounter.encounter_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_core__encounter encounter\n    inner join dev_coco.quality_measures._int_nqf0420__performance_period as pp\n        on coalesce(encounter.encounter_end_date, encounter.encounter_start_date) >= pp.performance_period_begin\n            and coalesce(encounter.encounter_start_date, encounter.encounter_end_date) <= pp.performance_period_end\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n    where   coalesce(modifier_1, '') not in ('GQ', 'GT', '95')\n        and coalesce(modifier_2, '') not in ('GQ', 'GT', '95')\n        and coalesce(modifier_3, '') not in ('GQ', 'GT', '95')\n        and coalesce(modifier_4, '') not in ('GQ', 'GT', '95')\n        and coalesce(modifier_5, '') not in ('GQ', 'GT', '95')\n\n)\n\n, claims as (\n\n    select \n          patient_id\n        , coalesce(claim_start_date,claim_end_date) as min_date\n        , coalesce(claim_end_date,claim_start_date) as max_date\n        , hcpcs_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n    where   coalesce(hcpcs_modifier_1, '') not in ('GQ', 'GT', '95')\n        and coalesce(hcpcs_modifier_2, '') not in ('GQ', 'GT', '95')\n        and coalesce(hcpcs_modifier_3, '') not in ('GQ', 'GT', '95')\n        and coalesce(hcpcs_modifier_4, '') not in ('GQ', 'GT', '95')\n        and coalesce(hcpcs_modifier_5, '') not in ('GQ', 'GT', '95')\n        and coalesce(place_of_service_code, '') not in ('02')\n        \n)\n\n, procedure_encounters as (\n\n    select \n          procedures.patient_id\n        , procedures.procedure_date as min_date\n        , procedures.procedure_date as max_date\n    from procedures\n    inner join dev_coco.quality_measures._int_nqf0420__performance_period  as pp\n        on procedure_date between pp.performance_period_begin and pp.performance_period_end\n    inner join visit_codes\n        on procedures.code = visit_codes.code\n            and procedures.code_type = visit_codes.code_system\n\n)\n\n, claims_encounters as (\n    \n    select \n          claims.patient_id\n        , claims.min_date\n        , claims.max_date\n    from claims\n    inner join dev_coco.quality_measures._int_nqf0420__performance_period as pp \n        on claims.max_date >=  pp.performance_period_begin\n            and claims.min_date <=  pp.performance_period_end\n    inner join visit_codes\n        on claims.hcpcs_code = visit_codes.code\n            and visit_codes.code_system = 'hcpcs'\n\n)\n\n, all_encounters as (\n\n    select *, 'v' as visit_enc, cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n\n    union all\n\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n\n    union all\n    \n    select *, cast(null as TEXT) as visit_enc, cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n\n)\n\n, encounters_by_patient as (\n\n    select \n          patient_id\n        , max(max_date) max_date\n        , coalesce(min(visit_enc), '') || coalesce(min(proc_enc), '') || coalesce(min(claim_enc), '') as qualifying_types\n    from all_encounters\n    group by patient_id\n\n)\n\n, patients_with_age as (\n\n    select\n          p.patient_id\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8760.0) as max_age\n        , qualifying_types\n    from __dbt__cte__quality_measures__stg_core__patient p\n    inner join encounters_by_patient e\n        on p.patient_id = e.patient_id\n    where p.death_date is null\n\n)\n\n, qualifying_patients as (\n\n    select\n        distinct\n          patient_id\n        , max_age as age\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , pp.measure_id\n        , pp.measure_name\n        , pp.measure_version\n        , 1 as denominator_flag\n    from patients_with_age\n    cross join dev_coco.quality_measures._int_nqf0420__performance_period pp\n    where max_age >= 18\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from qualifying_patients\n\n)\n\nselect \n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0420_denominator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.280369Z", "completed_at": "2024-10-11T23:52:50.305972Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.332237Z", "completed_at": "2024-10-11T23:52:50.332242Z"}], "thread_id": "Thread-1", "execution_time": 0.3155672550201416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__encounter_patient_id.a0d82e2159", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\n\n\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__encounter\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.323400Z", "completed_at": "2024-10-11T23:52:50.338375Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.341440Z", "completed_at": "2024-10-11T23:52:50.341447Z"}], "thread_id": "Thread-5", "execution_time": 0.04231119155883789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ed_classification__int_filter_encounter_with_classification", "compiled": true, "compiled_code": "/*\nFilter conditions to those that were classified and pick the classification\nwith the greatest probability (that's the greatest logic). This logic removes\nany rows that were not classified.\n*/\n\n\nselect\n   a.*\n   , case greatest(edcnnpa, edcnpa, epct, noner, injury, psych, alcohol, drug)\n          when edcnnpa then 'edcnnpa'\n          when edcnpa then 'edcnpa'\n          when epct then 'epct'\n          when noner then 'noner'\n          when injury then 'injury'\n          when psych then 'psych'\n          when alcohol then 'alcohol'\n          when drug then 'drug'\n          else 'unclassified'\n   end as classification\nfrom dev_coco.ed_classification._int_by_provider_parent_organization a\nwhere ed_classification_capture = 1", "relation_name": "dev_coco.ed_classification._int_filter_encounter_with_classification"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.306922Z", "completed_at": "2024-10-11T23:52:50.338933Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.342170Z", "completed_at": "2024-10-11T23:52:50.342175Z"}], "thread_id": "Thread-8", "execution_time": 0.08696103096008301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_shared_exclusion_union", "compiled": true, "compiled_code": "\n\n-- Missing Age Exclusion\nselect \n    denom.encounter_id\n  , denom.data_source\n  , 'missing age' as exclusion_reason\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as denom\ninner join dev_coco.ahrq_measures._int_pqi_shared_exclusions_missing_age as age\n  on denom.patient_id = age.patient_id\n  and denom.data_source = age.data_source\n\nunion all\n\n-- Missing Gender Exclusion\nselect \n    denom.encounter_id\n  , denom.data_source\n  , 'missing gender' as exclusion_reason\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as denom\ninner join dev_coco.ahrq_measures._int_pqi_shared_exclusion_missing_gender as gender\n  on denom.patient_id = gender.patient_id\n  and denom.data_source = gender.data_source\n\nunion all\n\n-- Missing Dates Exclusion\nselect \n    denom.encounter_id\n  , denom.data_source\n  , 'missing dates' as exclusion_reason\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as denom\ninner join dev_coco.ahrq_measures._int_pqi_shared_exclusion_missing_dates as dates\n  on denom.encounter_id = dates.encounter_id\n  and denom.data_source = dates.data_source\n\nunion all\n\n-- Missing Primary Diagnosis Exclusion\nselect \n    denom.encounter_id\n  , denom.data_source\n  , 'missing primary diagnosis' as exclusion_reason\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as denom\ninner join dev_coco.ahrq_measures._int_pqi_shared_exclusion_missing_primary_dx as dx\n  on denom.encounter_id = dx.encounter_id\n  and denom.data_source = dx.data_source\n\nunion all\n\n-- Transfer Exclusion\nselect \n    denom.encounter_id\n  , denom.data_source\n  , 'transfer' as exclusion_reason\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as denom\ninner join dev_coco.ahrq_measures._int_pqi_shared_exclusion_transfer as tx\n  on denom.encounter_id = tx.encounter_id\n  and denom.data_source = tx.data_source\n\nunion all\n\n-- Ungroupable DRG Exclusion\nselect \n    denom.encounter_id\n  , denom.data_source\n  , 'ungroupable DRG' as exclusion_reason\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as denom\ninner join dev_coco.ahrq_measures._int_pqi_shared_exclusion_ungroupable_drg as drg\n  on denom.encounter_id = drg.encounter_id\n  and denom.data_source = drg.data_source", "relation_name": "dev_coco.ahrq_measures._int_pqi_shared_exclusion_union"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.327370Z", "completed_at": "2024-10-11T23:52:50.339638Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.343018Z", "completed_at": "2024-10-11T23:52:50.343023Z"}], "thread_id": "Thread-6", "execution_time": 0.04083704948425293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_overlap", "compiled": true, "compiled_code": "\n\n-- Here we give a list of all pairs of encounters\n-- that have some date overlap.\n\n\nwith encounters_with_row_num as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date,\n    row_number() over (\n        partition by patient_id order by encounter_id\n\t) as row_num\nfrom dev_coco.readmissions._int_encounter\n),\n\n\ncartesian as (\nselect\n    aa.encounter_id as encounter_id_A,\n    bb.encounter_id as encounter_id_B,\n    aa.patient_id,\n    aa.admit_date as Ai,\n    aa.discharge_date as Af,\n    bb.admit_date as Bi,\n    bb.discharge_date as Bf,\n    case\n        when (aa.admit_date between bb.admit_date and bb.discharge_date) or (aa.discharge_date between bb.admit_date and bb.discharge_date) or\n             (bb.admit_date between aa.admit_date and aa.discharge_date) or (bb.discharge_date between aa.admit_date and aa.discharge_date)\n        then 1\n        else 0\n    end as overlap\n    from encounters_with_row_num aa\n    left join encounters_with_row_num bb\n    on aa.patient_id = bb.patient_id and aa.row_num < bb.row_num\n),\n\n\noverlapping_pairs\nas\n(\n    select\n        patient_id,\n        encounter_id_A,\n\tencounter_id_B\n    from cartesian\n    where overlap = 1\n)\n\n\n\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom overlapping_pairs", "relation_name": "dev_coco.readmissions._int_encounter_overlap"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.332701Z", "completed_at": "2024-10-11T23:52:50.341192Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.344569Z", "completed_at": "2024-10-11T23:52:50.344574Z"}], "thread_id": "Thread-10", "execution_time": 0.04157686233520508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_with_ccs", "compiled": true, "compiled_code": "\n\n-- Here we add a CCS diagnosis category to\n-- every encounter that we can add a CCS diagnosis category to.\n-- The CCS diagnosis category is found using\n-- the encounter's primary diagnosis code.\n\n\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_id,\n    aa.ms_drg_code,\n    aa.paid_amount,\n    aa.primary_diagnosis_code,\n\n    case\n      when bb.icd_10_cm is not null then 1\n      else 0\n    end as valid_primary_diagnosis_code_flag,\n\n    cc.ccs_diagnosis_category,\n\n    '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\n\nfrom\n    dev_coco.readmissions._int_encounter aa\n    left join dev_coco.terminology.icd_10_cm bb\n    on aa.primary_diagnosis_code = bb.icd_10_cm\n    left join dev_coco.readmissions._value_set_icd_10_cm_to_ccs cc\n    on aa.primary_diagnosis_code = cc.icd_10_cm", "relation_name": "dev_coco.readmissions._int_encounter_with_ccs"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.346365Z", "completed_at": "2024-10-11T23:52:50.396700Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.454952Z", "completed_at": "2024-10-11T23:52:50.454960Z"}], "thread_id": "Thread-4", "execution_time": 0.11639094352722168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__index_discharge_requirement", "compiled": true, "compiled_code": "\n\n-- Here we list encounter_ids that meet\n-- the discharge_disposition_code requirements to be an\n-- index admission:\n--    *** Must NOT be discharged to another acute care hospital\n--    *** Must NOT have left against medical advice\n--    *** Patient must be alive at discharge\n\n\n\nwith all_invalid_discharges as (\nselect encounter_id\nfrom dev_coco.readmissions._int_encounter\nwhere discharge_disposition_code in (\n     '02' -- Patient discharged/transferred to other short term general hospital for inpatient care.\n    ,'07' -- Patient left against medical advice\n    ,'20' -- Patient died\n    )\n)\n\n-- All discharges that meet the discharge_disposition_code\n-- requirements to be an index admission\nselect a.encounter_id, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.readmissions._int_encounter a\nleft join all_invalid_discharges b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "relation_name": "dev_coco.readmissions._int_index_discharge_requirement"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.353892Z", "completed_at": "2024-10-11T23:52:50.453633Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.456210Z", "completed_at": "2024-10-11T23:52:50.456215Z"}], "thread_id": "Thread-3", "execution_time": 0.11597681045532227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__index_time_requirement", "compiled": true, "compiled_code": "\n\n-- Here we list encounter_ids that meet\n-- the time requirement to be an index admission:\n-- The discharge date must be at least 30 days\n-- earlier than the last discharge date available\n-- in the dataset.\n\n\nwith cte as (\n  select max(discharge_date) max_discharge\n  from dev_coco.readmissions._int_encounter\n)\n\nselect encounter_id\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.readmissions._int_encounter\ncross join cte\nwhere discharge_date <= \n\n    dateadd(\n        day,\n        -30,\n        cte.max_discharge\n        )\n\n", "relation_name": "dev_coco.readmissions._int_index_time_requirement"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.364645Z", "completed_at": "2024-10-11T23:52:50.453920Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.457175Z", "completed_at": "2024-10-11T23:52:50.457180Z"}], "thread_id": "Thread-9", "execution_time": 0.11634302139282227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0055_numerator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n), denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_coco.quality_measures._int_cbe0055_denominator\n\n)\n\n, retina_test_code as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n          'diabetic retinal eye exam met'\n        , 'retinal or dilated eye exam'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, qualifying_patients as (\n\n    select \n          procedures.patient_id\n        , procedures.procedure_date as evidence_date\n    from procedures\n    inner join dev_coco.quality_measures._int_cbe0055__performance_period pp\n    on procedure_date between\n        performance_period_begin and performance_period_end\n    inner join retina_test_code\n        on procedures.code = retina_test_code.code\n            and procedures.code_type = retina_test_code.code_system\n\n)\n\n, qualifying_patients_with_denominator as (\n\n    select \n          qualifying_patients.patient_id\n        , qualifying_patients.evidence_date\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , cast('1' as integer) as numerator_flag\n    from qualifying_patients\n    inner join denominator\n    on qualifying_patients.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(null as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from qualifying_patients_with_denominator\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cbe0055_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.358314Z", "completed_at": "2024-10-11T23:52:50.454700Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.567885Z", "completed_at": "2024-10-11T23:52:50.567904Z"}], "thread_id": "Thread-7", "execution_time": 0.22742986679077148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0055_exclusions", "compiled": true, "compiled_code": "with frailty as (\n\n  select\n    *\n  from dev_coco.quality_measures._int_shared_exclusions_frailty\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cbe0055__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cbe0055__performance_period\n\n)\n\n)\n\n, valid_hospice_palliative as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_hospice_palliative\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cbe0055__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cbe0055__performance_period\n\n)\n\n)\n\n, valid_institutional_snp as (\n\n  select \n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_institutional_snp\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cbe0055__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cbe0055__performance_period\n\n)\n\n)\n\n, valid_dementia_exclusions as (\n\n  select\n      source.patient_id\n    , source.exclusion_date\n    , source.exclusion_reason\n    , source.exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_dementia source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where (\n    source.dispensing_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cbe0055__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cbe0055__performance_period\n\n)\n    or source.paid_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cbe0055__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cbe0055__performance_period\n\n)\n    )\n\n)\n\n-- advanced illness start\n, advanced_illness_exclusion as (\n\n  select\n    source.*\n  from dev_coco.quality_measures._int_shared_exclusions_advanced_illness as source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where source.exclusion_date\n    between\n      \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cbe0055__performance_period\n\n)\n        )\n\n\n      and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cbe0055__performance_period\n\n)\n\n)\n\n, acute_inpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'acute_inpatient'\n\n)\n\n, nonacute_outpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'nonacute_outpatient'\n\n)\n\n, acute_inpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from acute_inpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, nonacute_outpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from nonacute_outpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, valid_advanced_illness_exclusions as (\n\n    select\n          acute_inpatient_advanced_illness.patient_id\n        , acute_inpatient_advanced_illness.exclusion_date\n        , acute_inpatient_advanced_illness.exclusion_reason\n        , acute_inpatient_advanced_illness.exclusion_type\n    from acute_inpatient_advanced_illness\n    left join acute_inpatient_counts\n      on acute_inpatient_advanced_illness.patient_id = acute_inpatient_counts.patient_id\n    where acute_inpatient_counts.encounter_count >= 1\n\n    union all\n\n    select\n        nonacute_outpatient_advanced_illness.patient_id\n      , nonacute_outpatient_advanced_illness.exclusion_date\n      , nonacute_outpatient_advanced_illness.exclusion_reason\n      , nonacute_outpatient_advanced_illness.exclusion_type\n    from nonacute_outpatient_advanced_illness\n    left join nonacute_outpatient_counts\n      on nonacute_outpatient_advanced_illness.patient_id = nonacute_outpatient_counts.patient_id\n    where nonacute_outpatient_counts.encounter_count >= 2\n\n\n)\n-- advanced illness end\n\n, exclusions as (\n\n  select * from valid_advanced_illness_exclusions\n  union all\n  select * from valid_dementia_exclusions\n  union all\n  select * from valid_hospice_palliative\n  union all\n  select * from valid_institutional_snp\n\n)\n\n, combined_exclusions as (\n\n  select \n      exclusions.*\n    , denominator.age\n  from exclusions\n  inner join dev_coco.quality_measures._int_cbe0055_denominator as denominator\n      on exclusions.patient_id = denominator.patient_id\n\n)\n\n, valid_exclusions as (\n\n  select\n    *\n  from combined_exclusions\n  where exclusion_type != 'hospice_palliative'\n    and age >= 66\n\n  union all\n\n  select\n    *\n  from combined_exclusions\n  where exclusion_type = 'hospice_palliative'\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , 1 as exclusion_flag\n    from valid_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cbe0055_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.421783Z", "completed_at": "2024-10-11T23:52:50.456686Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.687402Z", "completed_at": "2024-10-11T23:52:50.687413Z"}], "thread_id": "Thread-1", "execution_time": 0.3440408706665039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0101_numerator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n), denominator as (\n\n    select \n          patient_id\n        , encounter_date\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_coco.quality_measures._int_cbe0101_denominator\n\n)\n\n, fallcare_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where code = '0518F' -- Falls plan of care documented\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, qualifying_procedures as (\n\n    select\n          patient_id\n        , procedure_date as evidence_date\n    from procedures\n    inner join fallcare_codes\n        on procedures.code = fallcare_codes.code\n            and procedures.code_type = fallcare_codes.code_system\n            \n)\n\n, qualifying_claims as (\n\n    select\n          patient_id\n        , coalesce(claim_end_date, claim_start_date) as evidence_date\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join fallcare_codes\n        on medical_claim.hcpcs_code = fallcare_codes.code\n            and lower(fallcare_codes.code_system) = 'hcpcs'\n\n)\n\n, qualifying_cares as (\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_procedures\n\n    union all\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_claims\n\n)\n\n, combined_qualifying_patients as (\n\n    select\n          qualifying_cares.patient_id\n        , qualifying_cares.evidence_date\n        , cast(null as TEXT) as evidence_value\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , 1 as numerator_flag\n    from qualifying_cares\n    inner join denominator\n        on qualifying_cares.patient_id = denominator.patient_id\n    where evidence_date between\n        \n\n    dateadd(\n        year,\n        -1,\n        denominator.encounter_date\n        )\n\n\n        and \n        denominator.encounter_date -- within last 12 months of falls screening visit\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from combined_qualifying_patients\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cbe0101_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.391279Z", "completed_at": "2024-10-11T23:52:50.456933Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.706184Z", "completed_at": "2024-10-11T23:52:50.706195Z"}], "thread_id": "Thread-2", "execution_time": 0.36360764503479004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0101_exclusions", "compiled": true, "compiled_code": "with  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n), denominator as (\n    \n    select\n        patient_id\n    from dev_coco.quality_measures._int_cbe0101_denominator\n\n)\n\n, exclusion_code as (\n\n    select\n        code\n      , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where code = '0518F'\n    -- further 1P modifier are only excluded\n)\n\n, hospice_palliative as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_shared_exclusions_hospice_palliative\n    where exclusion_date between (\n\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cbe0101__performance_period\n\n) and (\n\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cbe0101__performance_period\n\n)\n\n)\n\n, valid_hospice as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from hospice_palliative\n    where lower(exclusion_reason) in (\n            'hospice encounter'\n          , 'hospice care ambulatory'\n          , 'hospice diagnosis'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n        , modifier_1\n        , modifier_2\n        , modifier_3\n        , modifier_4\n        , modifier_5\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, exclusion_procedures as (\n\n    select\n          patient_id\n        , procedure_date as exclusion_date\n        , 'Limited Mobility' as exclusion_reason\n    from procedures\n    inner join exclusion_code\n        on procedures.code = exclusion_code.code\n            and procedures.code_type = exclusion_code.code_system\n    where '1P' in (modifier_1, modifier_2, modifier_3, modifier_4, modifier_5)\n            \n)\n\n, exclusion_claims as (\n\n    select\n          patient_id\n        , coalesce(claim_end_date, claim_start_date) as exclusion_date\n        , 'Limited mobility' as exclusion_reason\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join exclusion_code\n        on medical_claim.hcpcs_code = exclusion_code.code\n            and lower(exclusion_code.code_system) = 'hcpcs'\n    where '1P' in (hcpcs_modifier_1, hcpcs_modifier_2, hcpcs_modifier_3, hcpcs_modifier_4, hcpcs_modifier_5)\n\n)\n\n, exclusion_patients as (\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from valid_hospice\n\n    union all\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from exclusion_procedures\n\n    union all\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from exclusion_claims\n\n)\n\n, combined_exclusions as (\n\n    select\n        exclusion_patients.patient_id\n      , exclusion_patients.exclusion_date\n      , exclusion_patients.exclusion_reason\n    from exclusion_patients\n    inner join denominator\n      on exclusion_patients.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(1 as integer) as exclusion_flag\n    from combined_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cbe0101_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.457660Z", "completed_at": "2024-10-11T23:52:50.755213Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.757914Z", "completed_at": "2024-10-11T23:52:50.757920Z"}], "thread_id": "Thread-5", "execution_time": 0.3675038814544678, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm130_exclusions", "compiled": true, "compiled_code": "with  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n), exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n            'medical reason'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , claim_id\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition\n    where recorded_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cqm130__performance_period\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cqm130__performance_period\n)\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n    where procedure_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cqm130__performance_period\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cqm130__performance_period\n)\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n    where coalesce(claim_end_date, claim_start_date) between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cqm130__performance_period\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cqm130__performance_period\n)\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name as concept_name\n    from conditions\n    inner join exclusion_codes\n      on conditions.code = exclusion_codes.code\n        and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name as concept_name\n    from procedures\n    inner join exclusion_codes\n      on procedures.code = exclusion_codes.code\n        and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , coalesce(medical_claim.claim_end_date, medical_claim.claim_start_date) as exclusion_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name as concept_name\n    from medical_claim\n    inner join exclusion_codes\n      on medical_claim.hcpcs_code = exclusion_codes.code\n        and exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, patients_with_exclusions as (\n    \n    select \n          patient_id\n        , recorded_date as exclusion_date\n        , concept_name as exclusion_reason\n    from condition_exclusions\n\n    union all\n\n    select \n          patient_id\n        , procedure_date as exclusion_date\n        , concept_name as exclusion_reason\n    from procedure_exclusions\n\n    union all\n\n    select\n          patient_id\n        , exclusion_date\n        , concept_name as exclusion_reason\n    from med_claim_exclusions\n\n)\n\n, valid_exclusions as (\n\n  select \n        patients_with_exclusions.patient_id\n      , patients_with_exclusions.exclusion_date\n      , patients_with_exclusions.exclusion_reason  \n  from patients_with_exclusions\n  inner join dev_coco.quality_measures._int_cqm130_denominator as denominator\n      on patients_with_exclusions.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(1 as integer) as exclusion_flag\n    from valid_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm130_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.475963Z", "completed_at": "2024-10-11T23:52:50.755787Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.758919Z", "completed_at": "2024-10-11T23:52:50.758923Z"}], "thread_id": "Thread-8", "execution_time": 0.36803412437438965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm130_numerator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n), denominator as (\n\n    select\n          patient_id\n        , procedure_encounter_date\n        , claims_encounter_date\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_coco.quality_measures._int_cqm130_denominator\n\n)\n\n, medication_code as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n          'eligible clinician attests to documenting current medications'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, documenting_meds_procedures as (\n\n    select\n          patient_id\n        , procedure_date\n    from procedures\n    inner join medication_code\n      on procedures.code = medication_code.code\n        and procedures.code_type = medication_code.code_system\n\n)\n\n, documenting_meds_claims as (\n\n    select\n          patient_id\n        , coalesce(claim_end_date,claim_start_date) as encounter_date\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join medication_code\n        on medical_claim.hcpcs_code = medication_code.code\n          and medication_code.code_system = 'hcpcs'\n\n)\n\n, qualifying_procedure as (\n\n    select \n          documenting_meds_procedures.patient_id\n        , documenting_meds_procedures.procedure_date as encounter_date\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n    from documenting_meds_procedures\n    inner join denominator\n      on documenting_meds_procedures.patient_id = denominator.patient_id\n        and documenting_meds_procedures.procedure_date = denominator.procedure_encounter_date\n\n)\n\n, qualifying_claims as (\n    \n    select \n          documenting_meds_claims.patient_id\n        , documenting_meds_claims.encounter_date\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n    from documenting_meds_claims\n    inner join denominator\n      on documenting_meds_claims.patient_id = denominator.patient_id\n        and documenting_meds_claims.encounter_date = denominator.claims_encounter_date\n\n)\n\n, qualifying_cares as (\n\n    select\n          patient_id\n        , encounter_date\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , cast(1 as integer) as numerator_flag\n    from qualifying_procedure\n\n    union all\n\n    select\n          patient_id\n        , encounter_date\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , cast(1 as integer) as numerator_flag\n    from qualifying_claims\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(encounter_date as date) as evidence_date\n        , cast(null as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n      from qualifying_cares\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm130_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.615134Z", "completed_at": "2024-10-11T23:52:50.756421Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.759641Z", "completed_at": "2024-10-11T23:52:50.759647Z"}], "thread_id": "Thread-6", "execution_time": 0.3504786491394043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm236_exclude_procedures_observations", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n), denominator as (\n\n    select\n          patient_id\n        , age\n        , performance_period_begin\n        , performance_period_end\n    from dev_coco.quality_measures._int_cqm236_denominator\n\n)\n\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'dialysis services'\n        , 'end stage renal disease'\n        , 'esrd monthly outpatient services'\n        , 'kidney transplant'\n        , 'kidney transplant recipient'\n        , 'pregnancy'\n    )\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, exclusions_unioned as (\n\n    select\n          patient_id\n        , recorded_date as exclusion_date\n        , concept_name as exclusion_reason\n    from condition_exclusions\n\n    union all\n\n    select\n          patient_id\n        , procedure_date as exclusion_date\n        , concept_name as exclusion_reason\n    from procedure_exclusions\n\n)\n\n, excluded_patients as (\n\n    select\n          exclusions_unioned.patient_id\n        , exclusions_unioned.exclusion_date\n        , exclusions_unioned.exclusion_reason\n        , case\n            when exclusion_reason = 'pregnancy' then 1\n            else 0\n          end as is_pregnant\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.age\n    from exclusions_unioned\n    inner join denominator\n        on exclusions_unioned.patient_id = denominator.patient_id\n\n)\n\n, exclusions_filtered as (\n\n    select\n          patient_id\n        , age\n        , exclusion_date\n        , exclusion_reason\n    from excluded_patients\n    where is_pregnant = 1\n        and exclusion_date between performance_period_begin and performance_period_end\n    \n    union all\n\n    select\n          patient_id\n        , age\n        , exclusion_date\n        , exclusion_reason\n    from excluded_patients\n    where is_pregnant = 0\n        and exclusion_date between performance_period_begin and performance_period_end\n          or (exclusion_date between \n\n    dateadd(\n        year,\n        -1,\n        performance_period_begin\n        )\n\n\n            and performance_period_end)\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , age\n    , 'measure specific exclusion for observation procedure' as exclusion_type\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom\n    exclusions_filtered", "relation_name": "dev_coco.quality_measures._int_cqm236_exclude_procedures_observations"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.621481Z", "completed_at": "2024-10-11T23:52:50.758653Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.820797Z", "completed_at": "2024-10-11T23:52:50.820809Z"}], "thread_id": "Thread-10", "execution_time": 0.3740968704223633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm236_numerator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_type\n    , length_of_stay\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter\n\n\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , observation_date\n    , result\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , normalized_description\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.observation\n\n\n),  __dbt__cte__quality_measures__stg_core__lab_result as (\n\n\nselect\n      patient_id\n    , result\n    , result_date\n    , collection_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.lab_result\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n), controlled_bp_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'most recent systolic blood pressure < 140 mmhg'  --G8752 hcpcs\n        , 'most recent diastolic blood pressure < 90 mmhg'  --G8754 hcpcs\n    )\n    \n)\n\n, denominator as (\n\n    select\n          patient_id\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n    from dev_coco.quality_measures._int_cqm236_denominator\n\n)\n\n, encounters as (\n\n    select\n          patient_id\n        , encounter_type\n        , encounter_start_date\n        , encounter_end_date\n    from __dbt__cte__quality_measures__stg_core__encounter\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , normalized_code\n        , normalized_description\n        , result\n    from __dbt__cte__quality_measures__stg_core__observation\n    where lower(normalized_description) in \n        (\n              'systolic blood pressure'\n            , 'diastolic blood pressure'\n        )\n        and normalized_code not in (\n              '99473' -- Self-measured blood pressure using a device validated for clinical accuracy; patient education/training and device calibration\n            , '99474' -- Separate self-measurements of two readings one minute apart, twice daily over a 30-day period (minimum of 12 readings), collection of data reported by the patient and/or caregiver to the physician or other qualified health care professional, with report of average systolic and diastolic pressures and subsequent communication of a treatment plan to the patient\n        )\n\n)\n\n, labs as (\n\n    select \n          patient_id\n        , result_date\n        , collection_date\n        , result\n        , normalized_code\n    from __dbt__cte__quality_measures__stg_core__lab_result\n    where normalized_code in \n    ('8480-6' --systolic\n    ,'8462-4') --diastolic\n    and\n    normalized_code_type = 'loinc'\n\n)\n\n, all_procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, all_medical_claims as (\n    \n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, controlled_bp_procedures as (\n\n    select\n          all_procedures.patient_id\n        , all_procedures.procedure_date as evidence_date\n        , controlled_bp_codes.code\n    from all_procedures\n    inner join controlled_bp_codes\n        on all_procedures.code_type = controlled_bp_codes.code_system\n            and all_procedures.code = controlled_bp_codes.code\n\n)\n\n, controlled_bp_medical_claims as (\n\n    select\n          all_medical_claims.patient_id\n        , coalesce(all_medical_claims.claim_end_date, all_medical_claims.claim_start_date) as evidence_date\n        , controlled_bp_codes.code\n    from all_medical_claims\n    inner join controlled_bp_codes\n        on all_medical_claims.hcpcs_code = controlled_bp_codes.code\n            and controlled_bp_codes.code_system = 'hcpcs'\n\n)\n\n, controlled_bp_patients_proc_claims as (\n\n    select\n          patient_id\n        , evidence_date\n        , code\n    from controlled_bp_procedures\n\n    union all\n    \n    select\n          patient_id\n        , evidence_date\n        , code\n    from controlled_bp_medical_claims\n\n)\n\n, controlled_bp_within_range_proc_claims as (\n\n    select\n          controlled_bp_patients_proc_claims.patient_id\n        , controlled_bp_patients_proc_claims.evidence_date\n        , controlled_bp_patients_proc_claims.code\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n    from controlled_bp_patients_proc_claims\n    inner join denominator\n        on controlled_bp_patients_proc_claims.patient_id = denominator.patient_id\n            and controlled_bp_patients_proc_claims.evidence_date between\n                denominator.performance_period_begin and denominator.performance_period_end\n\n)\n\n, procedure_claims_w_encounters as (\n\n    select\n          controlled_bp_within_range_proc_claims.patient_id\n        , controlled_bp_within_range_proc_claims.evidence_date\n        , controlled_bp_within_range_proc_claims.code\n        , case\n            when lower(encounters.encounter_type) in (\n                  'emergency department'\n                , 'acute inpatient'\n            )\n            then 0\n            else 1\n          end as is_valid_procedure_claims\n        , controlled_bp_within_range_proc_claims.measure_id\n        , controlled_bp_within_range_proc_claims.measure_name\n        , controlled_bp_within_range_proc_claims.measure_version\n        , controlled_bp_within_range_proc_claims.performance_period_begin\n        , controlled_bp_within_range_proc_claims.performance_period_end\n    from controlled_bp_within_range_proc_claims\n    left join encounters\n        on controlled_bp_within_range_proc_claims.patient_id = encounters.patient_id\n        and controlled_bp_within_range_proc_claims.evidence_date between \n            encounters.encounter_start_date and encounters.encounter_end_date \n    \n)\n\n, valid_procedures_and_claims as (\n\n    select\n          patient_id\n        , evidence_date\n        , code\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n    from procedure_claims_w_encounters\n    where is_valid_procedure_claims = 1\n\n)\n\n, systolic_bp_from_procedure_claims as (\n\n    select\n          patient_id\n        , evidence_date\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n    from valid_procedures_and_claims\n    where code = 'G8752' --systolic\n\n)\n\n, diastolic_bp_from_procedure_claims as (\n\n    select\n          patient_id\n        , evidence_date\n    from valid_procedures_and_claims\n    where code = 'G8754' --diastolic\n\n)\n\n, qualifying_controlled_bp_proc_claims as (\n\n    select\n          systolic_bp_from_procedure_claims.patient_id\n        , systolic_bp_from_procedure_claims.evidence_date\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n    from systolic_bp_from_procedure_claims\n    inner join diastolic_bp_from_procedure_claims\n        on systolic_bp_from_procedure_claims.patient_id = diastolic_bp_from_procedure_claims.patient_id\n            and systolic_bp_from_procedure_claims.evidence_date = diastolic_bp_from_procedure_claims.evidence_date\n\n)\n\n, observations_within_range as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , observations.normalized_code\n        , observations.normalized_description\n        , observations.result\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n    from observations\n    inner join denominator\n        on observations.patient_id = denominator.patient_id\n        and observations.observation_date between \n            denominator.performance_period_begin and denominator.performance_period_end\n\n)\n\n, labs_within_range as (\n\n    select\n          labs.patient_id\n        , labs.normalized_code\n        , coalesce(labs.result_date, labs.collection_date) as observation_date\n        , labs.result\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n    from labs\n    inner join denominator\n        on labs.patient_id = denominator.patient_id\n        and coalesce(labs.result_date,labs.collection_date) between \n            denominator.performance_period_begin and denominator.performance_period_end\n\n)\n\n, observations_with_encounters as (\n\n    select\n          observations_within_range.patient_id\n        , observations_within_range.observation_date\n        , observations_within_range.normalized_description\n        , observations_within_range.result\n        , observations_within_range.normalized_code\n        , case\n            when lower(encounters.encounter_type) in (\n                  'emergency department'\n                , 'acute inpatient'\n            )\n            then 0\n            else 1\n          end as is_valid_encounter_observation\n        , observations_within_range.measure_id\n        , observations_within_range.measure_name\n        , observations_within_range.measure_version\n        , observations_within_range.performance_period_begin\n        , observations_within_range.performance_period_end\n    from observations_within_range\n    left join encounters\n        on observations_within_range.patient_id = encounters.patient_id\n        and observations_within_range.observation_date between \n            encounters.encounter_start_date and encounters.encounter_end_date\n\n)\n\n, labs_with_encounters as (\n\n    select\n          labs_within_range.patient_id\n        , labs_within_range.normalized_code\n        , labs_within_range.observation_date\n        , labs_within_range.result\n        , case\n            when lower(encounters.encounter_type) in (\n                  'emergency department'\n                , 'acute inpatient'\n            )\n            then 0\n            else 1\n          end as is_valid_encounter_labs\n        , labs_within_range.measure_id\n        , labs_within_range.measure_name\n        , labs_within_range.measure_version\n        , labs_within_range.performance_period_begin\n        , labs_within_range.performance_period_end\n    from labs_within_range\n    left join encounters\n        on labs_within_range.patient_id = encounters.patient_id\n        and labs_within_range.observation_date between\n            encounters.encounter_start_date and encounters.encounter_end_date\n            \n)\n\n, obs_and_labs as (\n\n    select\n          patient_id\n        , observation_date\n        \n        , cast(result as float) as bp_reading\n        \n        , normalized_description\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , normalized_code\n    from observations_with_encounters\n    where is_valid_encounter_observation = 1\n\n    union all\n\n    select\n          patient_id\n        , observation_date\n        \n            , cast(result as float) as bp_reading\n        \n        , cast(null as TEXT) as normalized_description\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , normalized_code\n    from labs_with_encounters labs\n    where is_valid_encounter_labs = 1\n\n)\n\n, systolic_bp as (\n\n    select\n          patient_id\n        , observation_date\n        , bp_reading\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , row_number() over(partition by patient_id order by observation_date desc, bp_reading asc) as rn\n    from obs_and_labs\n    where lower(normalized_description) = 'systolic blood pressure'\n    or\n    normalized_code = '8480-6'\n\n)\n\n, diastolic_bp as (\n\n    select\n          patient_id\n        , observation_date\n        , bp_reading\n        , row_number() over(partition by patient_id order by observation_date desc, bp_reading asc) as rn\n    from obs_and_labs\n    where lower(normalized_description) = 'diastolic blood pressure'\n    or\n    normalized_code = '8462-4'\n\n)\n\n, least_recent_systolic_bp as (\n\n    select\n          patient_id\n        , observation_date\n        , bp_reading as systolic_bp\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n    from systolic_bp\n    where rn = 1\n\n)\n\n, least_recent_diastolic_bp as (\n\n    select\n          patient_id\n        , observation_date\n        , bp_reading as diastolic_bp\n    from diastolic_bp\n    where rn = 1\n\n)\n\n, patients_with_bp_readings as (\n\n    select\n          least_recent_systolic_bp.patient_id\n        , least_recent_systolic_bp.systolic_bp\n        , least_recent_diastolic_bp.diastolic_bp\n        , least_recent_systolic_bp.observation_date\n        , least_recent_systolic_bp.measure_id\n        , least_recent_systolic_bp.measure_name\n        , least_recent_systolic_bp.measure_version\n        , least_recent_systolic_bp.performance_period_begin\n        , least_recent_systolic_bp.performance_period_end\n    from least_recent_systolic_bp\n    inner join least_recent_diastolic_bp\n        on least_recent_systolic_bp.patient_id = least_recent_diastolic_bp.patient_id\n            and least_recent_systolic_bp.observation_date = least_recent_diastolic_bp.observation_date\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , observation_date\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , case\n            when systolic_bp < 140.0 and diastolic_bp < 90.0\n            then 1\n            else 0\n          end as numerator_flag\n    from patients_with_bp_readings\n\n    union all\n\n    select\n          patient_id\n        , evidence_date as observation_date\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , 1 as numerator_flag\n    from qualifying_controlled_bp_proc_claims\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(observation_date as date) as observation_date\n        , cast(numerator_flag as integer) as numerator_flag\n    from numerator\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , observation_date\n    , numerator_flag\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm236_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.760635Z", "completed_at": "2024-10-11T23:52:50.924858Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.969209Z", "completed_at": "2024-10-11T23:52:50.969217Z"}], "thread_id": "Thread-4", "execution_time": 0.21488308906555176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclusions", "compiled": true, "compiled_code": "with frailty as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n  from dev_coco.quality_measures._int_shared_exclusions_frailty\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0034__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0034__performance_period\n\n)\n\n)\n\n, denominator as (\n\n  select\n      patient_id\n    , max_age as age\n  from dev_coco.quality_measures._int_nqf0034_denominator\n\n)\n-- advanced illness start\n, advanced_illness_exclusion as (\n\n  select\n    source.*\n  from dev_coco.quality_measures._int_shared_exclusions_advanced_illness as source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where source.exclusion_date\n    between\n      \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0034__performance_period\n\n)\n        )\n\n\n      and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0034__performance_period\n\n)\n\n)\n\n, acute_inpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'acute_inpatient'\n\n)\n\n, nonacute_outpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'nonacute_outpatient'\n\n)\n\n, acute_inpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from acute_inpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, nonacute_outpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from nonacute_outpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, valid_advanced_illness_exclusions as (\n\n    select\n          acute_inpatient_advanced_illness.patient_id\n        , acute_inpatient_advanced_illness.exclusion_date\n        , acute_inpatient_advanced_illness.exclusion_reason\n        , acute_inpatient_advanced_illness.exclusion_type\n    from acute_inpatient_advanced_illness\n    left join acute_inpatient_counts\n      on acute_inpatient_advanced_illness.patient_id = acute_inpatient_counts.patient_id\n    where acute_inpatient_counts.encounter_count >= 1\n\n    union all\n\n    select\n        nonacute_outpatient_advanced_illness.patient_id\n      , nonacute_outpatient_advanced_illness.exclusion_date\n      , nonacute_outpatient_advanced_illness.exclusion_reason\n      , nonacute_outpatient_advanced_illness.exclusion_type\n    from nonacute_outpatient_advanced_illness\n    left join nonacute_outpatient_counts\n      on nonacute_outpatient_advanced_illness.patient_id = nonacute_outpatient_counts.patient_id\n    where nonacute_outpatient_counts.encounter_count >= 2\n\n\n)\n-- advanced illness end\n\n, valid_dementia_exclusions as (\n\n  select\n      source.patient_id\n    , source.exclusion_date\n    , source.exclusion_reason\n    , source.exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_dementia source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where (\n    source.dispensing_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0034__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0034__performance_period\n\n)\n    or source.paid_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0034__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0034__performance_period\n\n)\n    )\n\n)\n\n, valid_hospice_palliative as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_hospice_palliative\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0034__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0034__performance_period\n\n)\n    and lower(exclusion_reason) in \n  (\n        'palliative care encounter'\n      , 'palliative care intervention'\n      , 'hospice care ambulatory'\n      , 'hospice encounter'\n  )\n\n)\n\n, valid_institutional_snp as (\n\n  select \n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_institutional_snp\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0034__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0034__performance_period\n\n)\n\n)\n\n, measure_specific_colectomy_colorectal_cancer_exclusion as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_coco.quality_measures._int_nqf0034_exclude_colectomy_cancer\n\n)\n\n, exclusions as (\n\n    select *\n    from valid_advanced_illness_exclusions\n  \n    union all\n\n    select *\n    from valid_dementia_exclusions\n\n    union all\n\n    select *\n    from valid_hospice_palliative\n\n    union all\n\n    select *\n    from valid_institutional_snp\n\n    union all\n\n    select *\n    from valid_dementia_exclusions\n\n    union all\n\n    select *\n    from measure_specific_colectomy_colorectal_cancer_exclusion\n\n)\n\n, combined_exclusions as (\n\n  select \n      exclusions.*\n    , denominator.age\n  from exclusions\n  inner join denominator\n      on exclusions.patient_id = denominator.patient_id\n\n)\n\n, valid_exclusions as (\n\n  select * from combined_exclusions\n  where exclusion_type not in (\n      'measure specific exclusion for historical record of colectomy cancer'\n    , 'hospice_palliative'\n    ) \n    and age >= 66\n\n  union all\n\n  select * from combined_exclusions --age irrelvant exclusions\n  where exclusion_type in (\n      'measure specific exclusion for historical record of colectomy cancer'\n    , 'hospice_palliative'\n    ) \n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , 1 as exclusion_flag\n    from valid_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0034_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.770405Z", "completed_at": "2024-10-11T23:52:50.968475Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:50.971503Z", "completed_at": "2024-10-11T23:52:50.971509Z"}], "thread_id": "Thread-3", "execution_time": 0.2167491912841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_numerator", "compiled": true, "compiled_code": "\n\n\n/*\nPatients with one or more screenings for colorectal cancer. Appropriate screenings are defined by any one of the\nfollowing criteria:\n- Fecal occult blood test (FOBT) during the measurement period\n- Flexible sigmoidoscopy during the measurement period or the four years prior to the measurement period\n- Colonoscopy during the measurement period or the nine years prior to the measurement period\n- Computed tomography (CT) colonography during the measurement period or the four years prior to the\nmeasurement period.\n- Fecal immunochemical DNA test (FIT-DNA) during the measurement period or the two years prior to the\nmeasurement period.\n\n*/\n\nwith  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , observation_date\n    , result\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , normalized_description\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.observation\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_core__lab_result as (\n\n\nselect\n      patient_id\n    , result\n    , result_date\n    , collection_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.lab_result\n\n\n), denominator as (\n\n    select\n          patient_id\n    from dev_coco.quality_measures._int_nqf0034_denominator\n\n)\n\n, screening_codes as (\n\n    select\n        code\n      , case code_system\n          when 'SNOMEDCT' then 'snomed-ct'\n          when 'ICD9CM' then 'icd-9-cm'\n          when 'ICD10CM' then 'icd-10-cm'\n          when 'CPT' then 'hcpcs'\n          when 'ICD10PCS' then 'icd-10-pcs'\n        else lower(code_system) \n        end as code_system\n      , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n          'fecal occult blood test (fobt)' -- mp\n        , 'flexible sigmoidoscopy' --mp+4\n        , 'colonoscopy' -- mp+9\n        , 'ct colonography' -- mp+4\n        , 'sdna fit test' -- mp+2\n    )\n\n)\n\n, screening_periods  as (\n\n    select \n          code\n        , code_system\n        , concept_name\n        , case concept_name\n            when 'Fecal Occult Blood Test (FOBT)' then pp.performance_period_begin --mp\n            when 'Flexible Sigmoidoscopy' then pp.performance_period_begin_4yp --mp+4\n            when 'Colonoscopy' then pp.performance_period_begin_9yp -- mp+9\n            when 'CT Colonography' then pp.performance_period_begin_4yp -- mp+4\n            when 'sDNA FIT Test' then pp.performance_period_begin_2yp -- mp+2\n          else pp.performance_period_begin \n          end as effective_performance_period_begin\n        , performance_period_end\n    from screening_codes\n    inner join dev_coco.quality_measures._int_nqf0034__performance_period pp\n        on 1 = 1\n    \n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce(\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, labs as (\n\n    select  \n      patient_id\n    , result_date\n    , collection_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    from __dbt__cte__quality_measures__stg_core__lab_result\n\n)\n\n, qualifying_claims as (\n\n    select\n          medical_claim.patient_id\n        , coalesce( medical_claim.claim_start_date, medical_claim.claim_end_date) as claim_date\n    , screening_codes.concept_name\n    from medical_claim\n    inner join screening_periods\n        on medical_claim.claim_start_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n        or medical_claim.claim_end_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n    inner join screening_codes\n            on medical_claim.hcpcs_code = screening_codes.code\n    where screening_codes.code_system in ('hcpcs', 'cpt' )\n\n)\n\n, qualifying_observations as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , screening_codes.concept_name\n    from observations\n    inner join screening_periods\n        on observations.observation_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n     inner join screening_codes\n         on observations.code = screening_codes.code\n         and observations.code_type = screening_codes.code_system\n)\n\n, qualifying_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , screening_codes.concept_name\n    from procedures\n    inner join screening_periods\n        on procedures.procedure_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n     inner join screening_codes\n         on procedures.code = screening_codes.code\n         and procedures.code_type = screening_codes.code_system\n\n)\n\n, normalized_code_labs as (\n  select\n      patient_id\n    , coalesce(collection_date, result_date) as lab_date\n    , screening_codes.concept_name\n  from labs\n  inner join screening_periods\n    on coalesce(labs.collection_date, labs.result_date) >= screening_periods.effective_performance_period_begin\n    and coalesce(labs.collection_date, labs.result_date) <= screening_periods.performance_period_end\n  inner join screening_codes\n    on labs.normalized_code = screening_codes.code\n    and labs.normalized_code_type = screening_codes.code_system\n)\n\n, source_code_labs as (\n\n  select\n      patient_id\n    , coalesce(collection_date, result_date) as lab_date\n    , screening_codes.concept_name\n  from labs\n  inner join screening_periods\n    on coalesce(labs.collection_date, labs.result_date) >= screening_periods.effective_performance_period_begin\n    and coalesce(labs.collection_date, labs.result_date) <= screening_periods.performance_period_end\n  inner join screening_codes\n    on labs.source_code = screening_codes.code\n    and labs.source_code_type = screening_codes.code_system\n\n)\n\n, qualifying_labs_union as (\n\n  select \n        patient_id\n      , lab_date\n      , concept_name\n  from normalized_code_labs\n\n  union all\n\n  select \n        patient_id\n      , lab_date\n      , concept_name\n  from source_code_labs\n\n)\n\n, qualifying_labs as (\n\n  select distinct\n        patient_id\n      , lab_date\n      , concept_name\n  from qualifying_labs_union\n\n)\n\n, qualifying_events as (\n\n    select\n          patient_id\n        , claim_date as evidence_date\n        , concept_name as evidence\n    from qualifying_claims\n\n    union all\n\n    select\n          patient_id\n        , observation_date as evidence_date\n        , concept_name as evidence\n    from qualifying_observations\n\n    union all\n\n    select\n          patient_id\n        , procedure_date as evidence_date\n        , concept_name as evidence\n    from qualifying_procedures\n\n    union all\n\n    select\n          patient_id\n        , lab_date as evidence_date\n        , concept_name as evidence\n    from qualifying_labs\n\n)\n\nselect\n      cast( qualifying_events.patient_id as TEXT) as patient_id\n    , cast( evidence_date as date) as evidence_date\n    , cast( evidence as TEXT) as evidence\nfrom qualifying_events\ninner join denominator\n    on qualifying_events.patient_id = denominator.patient_id", "relation_name": "dev_coco.quality_measures._int_nqf0034_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.840927Z", "completed_at": "2024-10-11T23:52:50.970055Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.005891Z", "completed_at": "2024-10-11T23:52:51.005899Z"}], "thread_id": "Thread-7", "execution_time": 0.2489640712738037, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438_numerator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_pharmacy_claim as (\n\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , days_supply\n    , paid_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.pharmacy_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__medication as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , prescribing_date  \n    , dispensing_date\n    , source_code_type\n    , source_code\n    , ndc_code\n    , rxnorm_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medication\n\n\n), denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_coco.quality_measures._int_cqm438_denominator\n\n)\n\n, statin_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n          'high intensity statin therapy'\n        , 'low intensity statin therapy'\n        , 'moderate intensity statin therapy'\n        , 'statin therapy'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, procedure_statin_related as (\n\n    select \n          procedures.patient_id\n        , procedures.procedure_date as evidence_date\n    from procedures\n    inner join statin_codes\n        on procedures.code = statin_codes.code\n            and procedures.code_type = statin_codes.code_system\n\n)\n\n, pharmacy_claims_statin_related as (\n\n    select\n        patient_id\n      , dispensing_date as evidence_date\n      , ndc_code\n    from __dbt__cte__quality_measures__stg_pharmacy_claim as pharmacy_claims\n    inner join statin_codes\n    on pharmacy_claims.ndc_code = statin_codes.code\n        and lower(statin_codes.code_system) = 'ndc'\n\n)\n\n, medication_statin_related as (\n\n    select\n          patient_id\n        , coalesce(dispensing_date, prescribing_date) as evidence_date\n        , source_code\n        , source_code_type\n    from __dbt__cte__quality_measures__stg_core__medication as medications\n    inner join statin_codes\n        on medications.source_code = statin_codes.code\n        and medications.source_code_type = statin_codes.code_system\n        \n)\n\n, qualifying_patients as (\n\n    select\n          procedure_statin_related.patient_id\n        , procedure_statin_related.evidence_date\n    from procedure_statin_related\n\n    union all\n\n    select\n          pharmacy_claims_statin_related.patient_id\n        , pharmacy_claims_statin_related.evidence_date\n    from pharmacy_claims_statin_related\n\n    union all\n\n    select\n          medication_statin_related.patient_id\n        , medication_statin_related.evidence_date\n    from medication_statin_related\n\n)\n\n, qualifying_patients_with_denominator as (\n\n    select \n          qualifying_patients.patient_id\n        , qualifying_patients.evidence_date\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , cast(1 as integer) as numerator_flag\n    from qualifying_patients\n    inner join denominator\n    on qualifying_patients.patient_id = denominator.patient_id\n    and evidence_date between \n            denominator.performance_period_begin and \n                denominator.performance_period_end\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(null as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from qualifying_patients_with_denominator\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm438_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.899775Z", "completed_at": "2024-10-11T23:52:50.970378Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.006386Z", "completed_at": "2024-10-11T23:52:51.006390Z"}], "thread_id": "Thread-1", "execution_time": 0.24805903434753418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm48_exclusions", "compiled": true, "compiled_code": "with valid_hospice_exclusions as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n  from dev_coco.quality_measures._int_shared_exclusions_hospice_palliative\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cqm48__performance_period\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cqm48__performance_period\n)\n    and lower(exclusion_reason) in (\n            'hospice encounter'\n    )\n\n)\n\n, combined_exclusions as (\n\n  select\n      valid_hospice_exclusions.patient_id\n    , valid_hospice_exclusions.exclusion_date\n    , valid_hospice_exclusions.exclusion_reason\n  from valid_hospice_exclusions\n  inner join dev_coco.quality_measures._int_cqm48_denominator as denominator\n      on valid_hospice_exclusions.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(1 as integer) as exclusion_flag\n    from combined_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm48_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.829140Z", "completed_at": "2024-10-11T23:52:50.970932Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.019485Z", "completed_at": "2024-10-11T23:52:51.019494Z"}], "thread_id": "Thread-9", "execution_time": 0.2628500461578369, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438_exclusions", "compiled": true, "compiled_code": "with  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , observation_date\n    , result\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , normalized_description\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.observation\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_core__medication as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , prescribing_date  \n    , dispensing_date\n    , source_code_type\n    , source_code\n    , ndc_code\n    , rxnorm_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medication\n\n\n),  __dbt__cte__quality_measures__stg_pharmacy_claim as (\n\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , days_supply\n    , paid_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.pharmacy_claim\n\n\n), exclusion_codes as (\n\n    select\n          code\n        , case code_system\n            when 'SNOMEDCT' then 'snomed-ct'\n            when 'ICD9CM' then 'icd-9-cm'\n            when 'ICD10CM' then 'icd-10-cm'\n            when 'CPT' then 'hcpcs'\n            when 'ICD10PCS' then 'icd-10-pcs'\n          else lower(code_system) end as code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n            'rhabdomyolysis'\n          , 'breastfeeding'\n          , 'liver disease'\n          , 'hepatitis a'\n          , 'hepatitis b'\n          , 'documentation of medical reason for no statin therapy'\n          , 'statin allergen'\n          , 'end stage renal disease'\n          , 'statin associated muscle symptoms'\n          , 'medical reason'\n    )\n\n)\n\n, valid_hospice_palliative as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_hospice_palliative\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cqm438__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cqm438__performance_period\n\n)\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition\n    where recorded_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cqm438__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cqm438__performance_period\n\n)\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n    where coalesce(claim_end_date, claim_start_date) between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cqm438__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cqm438__performance_period\n\n)\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n    where observation_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cqm438__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cqm438__performance_period\n\n)\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n    where procedure_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cqm438__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cqm438__performance_period\n\n)\n\n)\n\n, medications as (\n    \n    select\n        patient_id\n      , coalesce(prescribing_date, dispensing_date) as exclusion_date\n      , source_code\n      , source_code_type\n    from __dbt__cte__quality_measures__stg_core__medication\n\n)\n\n, pharmacy_claims as (\n\n    select\n        patient_id\n      , dispensing_date\n      , ndc_code\n    from __dbt__cte__quality_measures__stg_pharmacy_claim \n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name as concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name as concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name as concept_name\n    from observations\n    inner join exclusion_codes\n        on observations.code = exclusion_codes.code\n        and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name as concept_name\n    from procedures\n    inner join exclusion_codes\n        on procedures.code = exclusion_codes.code\n          and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, medication_exclusions as (\n\n    select\n          medications.patient_id\n        , medications.exclusion_date\n        , exclusion_codes.concept_name as concept_name\n    from medications\n    inner join exclusion_codes\n        on medications.source_code = exclusion_codes.code\n          and medications.source_code_type = exclusion_codes.code_system\n\n)\n\n, pharmacy_claims_exclusions as (\n\n    select\n          pharmacy_claims.patient_id\n        , pharmacy_claims.dispensing_date\n        , exclusion_codes.concept_name as concept_name\n    from pharmacy_claims\n    inner join exclusion_codes\n        on pharmacy_claims.ndc_code = exclusion_codes.code\n        and lower(exclusion_codes.code_system) = 'ndc'\n\n)\n\n, patients_with_exclusions as(\n    \n    select \n          patient_id\n        , recorded_date as exclusion_date\n        , concept_name as exclusion_reason\n    from condition_exclusions\n\n    union all\n\n    select \n          patient_id\n        , coalesce(claim_end_date, claim_start_date) as exclusion_date\n        , concept_name as exclusion_reason\n    from med_claim_exclusions\n\n    union all\n\n    select \n          patient_id\n        , observation_date as exclusion_date\n        , concept_name as exclusion_reason\n    from observation_exclusions\n\n    union all\n\n    select \n          patient_id\n        , procedure_date as exclusion_date\n        , concept_name as exclusion_reason\n    from procedure_exclusions\n\n    union all\n\n    select \n          patient_id\n        , exclusion_date\n        , concept_name as exclusion_reason\n    from medication_exclusions\n\n    union all\n\n    select\n          patient_id\n        , dispensing_date as exclusion_date\n        , concept_name as exclusion_reason\n    from pharmacy_claims_exclusions\n\n    union all\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from valid_hospice_palliative\n\n)\n\n, valid_exclusions as (\n\n  select \n        patients_with_exclusions.patient_id\n      , patients_with_exclusions.exclusion_date\n      , patients_with_exclusions.exclusion_reason  \n  from patients_with_exclusions\n  inner join dev_coco.quality_measures._int_cqm438_denominator as denominator\n      on patients_with_exclusions.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(1 as integer) as exclusion_flag\n    from valid_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm438_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.937826Z", "completed_at": "2024-10-11T23:52:50.978292Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.069660Z", "completed_at": "2024-10-11T23:52:51.069667Z"}], "thread_id": "Thread-2", "execution_time": 0.31038475036621094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm48_numerator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n), denominator as (\n\n    select \n          patient_id\n        , encounter_date\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_coco.quality_measures._int_cqm48_denominator\n\n)\n\n, involuntary_urination_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n            'presence or absence of urinary incontinence assessed'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, qualifying_procedures as (\n\n    select\n          patient_id\n        , procedure_date as evidence_date\n    from procedures\n    inner join involuntary_urination_codes\n        on procedures.code = involuntary_urination_codes.code\n            and procedures.code_type = involuntary_urination_codes.code_system\n            \n)\n\n, qualifying_claims as (\n\n    select\n          patient_id\n        , coalesce(claim_end_date, claim_start_date) as evidence_date\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join involuntary_urination_codes\n        on medical_claim.hcpcs_code = involuntary_urination_codes.code\n            and lower(involuntary_urination_codes.code_system) = 'hcpcs'\n\n)\n\n, qualifying_cares as (\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_procedures\n\n    union all\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_claims\n\n)\n\n, combined_qualifying_patients as (\n\n    select\n          qualifying_cares.patient_id\n        , qualifying_cares.evidence_date\n        , cast(null as TEXT) as evidence_value\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , 1 as numerator_flag\n    from qualifying_cares\n    inner join denominator\n        on qualifying_cares.patient_id = denominator.patient_id\n    where evidence_date between\n        \n\n    dateadd(\n        year,\n        -1,\n        denominator.encounter_date\n        )\n\n\n        and \n        denominator.encounter_date -- within last 12 months of visit\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from combined_qualifying_patients\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm48_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:50.972002Z", "completed_at": "2024-10-11T23:52:51.120295Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.131286Z", "completed_at": "2024-10-11T23:52:51.131293Z"}], "thread_id": "Thread-5", "execution_time": 0.2525482177734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0041_exclusions", "compiled": true, "compiled_code": "with  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n), denominator as (\n    \n    select\n        patient_id\n    from dev_coco.quality_measures._int_nqf0041_denominator\n\n)\n\n, exclusion_codes as (\n\n  select \n      code\n    , code_system\n    , concept_name\n  from dev_coco.quality_measures._value_set_codes\n  where lower(concept_name) in (\n        'influenza immunization not ordered or administered reason documented'\n    )\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n    where procedure_date between (\n\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0041__performance_period\n\n) and (\n\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0041__performance_period\n\n)\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n    where coalesce(claim_end_date, claim_start_date) between (\n\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0041__performance_period\n\n) and (\n\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0041__performance_period\n\n)\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name as concept_name\n    from procedures\n    inner join exclusion_codes\n        on procedures.code = exclusion_codes.code\n          and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , coalesce(medical_claim.claim_end_date, medical_claim.claim_start_date) as exclusion_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name as concept_name\n    from medical_claim\n    inner join exclusion_codes\n      on medical_claim.hcpcs_code = exclusion_codes.code\n        and exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, hospice_palliative as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n        , exclusion_type\n    from dev_coco.quality_measures._int_shared_exclusions_hospice_palliative\n    where exclusion_date between (\n\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0041__performance_period\n\n) and (\n\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0041__performance_period\n\n)\n\n)\n\n, valid_hospice_palliative as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n        , exclusion_type\n    from hospice_palliative\n    where exclusion_reason in (\n          'hospice care ambulatory'\n        , 'hospice encounter'\n    )\n\n)\n\n, valid_exclusions as (\n\n    select\n        patient_id\n      , procedure_date as exclusion_date\n      , concept_name as exclusion_reason\n    from procedure_exclusions\n\n    union all\n\n    select\n        patient_id\n      , exclusion_date\n      , concept_name as exclusion_reason\n    from med_claim_exclusions\n\n    union all\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from valid_hospice_palliative\n\n)\n\n, combined_exclusions as (\n\n    select\n        valid_exclusions.patient_id\n      , valid_exclusions.exclusion_date\n      , valid_exclusions.exclusion_reason\n    from valid_exclusions\n    inner join denominator\n      on valid_exclusions.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(1 as integer) as exclusion_flag\n    from combined_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0041_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.006842Z", "completed_at": "2024-10-11T23:52:51.130427Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.141284Z", "completed_at": "2024-10-11T23:52:51.141290Z"}], "thread_id": "Thread-8", "execution_time": 0.2039339542388916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0041_numerator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n), denominator as (\n\n    select \n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_coco.quality_measures._int_nqf0041_denominator\n\n)\n\n, influenza_vaccination_code as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'influenza vaccination'\n        , 'influenza vaccine'\n        , 'influenza virus laiv immunization'\n        , 'influenza virus laiv procedure'\n    )\n\n)\n\n, procedure_vaccination as (\n\n    select\n        patient_id\n      , procedure_date\n    from __dbt__cte__quality_measures__stg_core__procedure as procedures\n    inner join influenza_vaccination_code\n        on coalesce(procedures.normalized_code, procedures.source_code) = influenza_vaccination_code.code\n            and coalesce(procedures.normalized_code_type, procedures.source_code_type) = influenza_vaccination_code.code_system\n\n)\n\n, claims_vaccination as (\n    \n    select \n          patient_id\n        , coalesce(claim_start_date,claim_end_date) as min_date\n        , coalesce(claim_end_date,claim_start_date) as max_date\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join influenza_vaccination_code\n        on medical_claim.hcpcs_code = influenza_vaccination_code.code\n\n)\n\n, qualifying_procedures as (\n\n    select\n          procedure_vaccination.patient_id\n        , procedure_vaccination.procedure_date as evidence_date\n    from procedure_vaccination\n    inner join dev_coco.quality_measures._int_nqf0041__performance_period pp\n        on procedure_date between \n            pp.lookback_period_august and\n                pp.performance_period_end\n\n)\n\n, qualifying_claims as (\n\n    select \n          claims_vaccination.patient_id\n        , claims_vaccination.max_date as evidence_date\n    from claims_vaccination\n    inner join dev_coco.quality_measures._int_nqf0041__performance_period pp\n        on max_date between\n            pp.lookback_period_august and\n                pp.performance_period_end\n\n)\n\n, qualified_patients as (\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_procedures\n\n    union all\n\n    select\n          patient_id\n        , evidence_date\n    from qualifying_claims\n\n)\n\n, combined_qualifying_patients as (\n\n    select\n          qualified_patients.patient_id\n        , qualified_patients.evidence_date\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , 1 as numerator_flag\n    from qualified_patients\n    inner join denominator\n        on qualified_patients.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(null as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from combined_qualifying_patients\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0041_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.032031Z", "completed_at": "2024-10-11T23:52:51.131020Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.142025Z", "completed_at": "2024-10-11T23:52:51.142031Z"}], "thread_id": "Thread-6", "execution_time": 0.192155122756958, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0053_exclude_procedures_medications", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_pharmacy_claim as (\n\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , days_supply\n    , paid_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.pharmacy_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__medication as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , prescribing_date  \n    , dispensing_date\n    , source_code_type\n    , source_code\n    , ndc_code\n    , rxnorm_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medication\n\n\n), denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n    from dev_coco.quality_measures._int_nqf0053_denominator\n\n)\n\n, value_sets as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, pharmacy_claims as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code\n    from __dbt__cte__quality_measures__stg_pharmacy_claim\n\n)\n\n, medications as (\n\n    select\n        patient_id\n      , encounter_id\n      , prescribing_date\n      , dispensing_date\n      , source_code\n      , source_code_type\n    from __dbt__cte__quality_measures__stg_core__medication\n\n)\n\n, bone_density_test_codes as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from value_sets\n    where lower(concept_name) in (\n          'bone mineral density test'\n        , 'bone mineral density tests cpt'\n        , 'bone mineral density tests hcpcs'\n        , 'bone mineral density tests icd10pcs'\n        , 'dexa dual energy xray absorptiometry, bone density'\n    )\n\n)\n\n, osteoporosis_medication_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from value_sets\n    where lower(concept_name) in \n        ( \n          'osteoporosis medications for urology care'\n        , 'osteoporosis medication'\n        , 'bisphosphonates'\n        )\n\n)\n\n, bone_density_test_procedures as (\n\n    select\n          procedures.*\n        , bone_density_test_codes.concept_name\n    from procedures\n    inner join bone_density_test_codes\n        on procedures.code = bone_density_test_codes.code\n            and procedures.code_type = bone_density_test_codes.code_system\n\n)\n\n, osteoporosis_pharmacy_claims as (\n\n    select\n        pharmacy_claims.patient_id\n      , pharmacy_claims.dispensing_date\n      , pharmacy_claims.ndc_code\n      , osteoporosis_medication_codes.concept_name\n    from pharmacy_claims\n    inner join osteoporosis_medication_codes\n        on pharmacy_claims.ndc_code = osteoporosis_medication_codes.code\n            and lower(osteoporosis_medication_codes.code_system) = 'ndc'\n            \n)\n\n, osteoporosis_medications as (\n\n    select\n        medications.patient_id\n      , medications.encounter_id\n      , medications.prescribing_date\n      , medications.dispensing_date\n      , medications.source_code\n      , medications.source_code_type\n      , osteoporosis_medication_codes.concept_name\n    from medications\n    inner join osteoporosis_medication_codes\n        on medications.source_code = osteoporosis_medication_codes.code\n            and medications.source_code_type = osteoporosis_medication_codes.code_system\n\n)\n\n, valid_osteoporosis_medications_procedures as (\n\n    select\n          denominator.patient_id\n        , osteoporosis_pharmacy_claims.concept_name as exclusion_reason\n        , osteoporosis_pharmacy_claims.dispensing_date as exclusion_date\n    from denominator\n    inner join osteoporosis_pharmacy_claims\n        on denominator.patient_id = osteoporosis_pharmacy_claims.patient_id\n    where osteoporosis_pharmacy_claims.dispensing_date\n        between\n            \n\n    dateadd(\n        month,\n        -12,\n        denominator.performance_period_begin\n        )\n\n\n            and denominator.performance_period_begin\n    \n    union all\n\n    select\n          denominator.patient_id\n        , osteoporosis_medications.concept_name as exclusion_reason\n        , coalesce(osteoporosis_medications.prescribing_date, osteoporosis_medications.dispensing_date) as exclusion_date\n    from denominator\n    inner join osteoporosis_medications\n        on denominator.patient_id = osteoporosis_medications.patient_id\n            and coalesce(osteoporosis_medications.prescribing_date, osteoporosis_medications.dispensing_date)\n            between\n                \n\n    dateadd(\n        month,\n        -12,\n        denominator.performance_period_begin\n        )\n\n\n                and denominator.performance_period_begin\n\n)\n\n, valid_tests_performed as (\n\n    select\n          denominator.patient_id\n        , bone_density_test_procedures.concept_name as exclusion_reason\n        , procedure_date as exclusion_date\n    from denominator\n    inner join bone_density_test_procedures\n        on denominator.patient_id = bone_density_test_procedures.patient_id\n    where bone_density_test_procedures.procedure_date\n        between \n            \n\n    dateadd(\n        year,\n        -2,\n        denominator.performance_period_begin\n        )\n\n\n            and denominator.performance_period_begin\n\n)\n\n, valid_exclusions as (\n\n    select * from valid_tests_performed\n\n    union all\n\n    select * from valid_osteoporosis_medications_procedures\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , 'measure specific exclusion for procedure medication' as exclusion_type\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom\n    valid_exclusions", "relation_name": "dev_coco.quality_measures._int_nqf0053_exclude_procedures_medications"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.075854Z", "completed_at": "2024-10-11T23:52:51.132943Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.162170Z", "completed_at": "2024-10-11T23:52:51.162178Z"}], "thread_id": "Thread-10", "execution_time": 0.19249796867370605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0053_numerator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_pharmacy_claim as (\n\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , days_supply\n    , paid_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.pharmacy_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__medication as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , prescribing_date  \n    , dispensing_date\n    , source_code_type\n    , source_code\n    , ndc_code\n    , rxnorm_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medication\n\n\n), denominator as (\n\n    select \n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , recorded_date\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_coco.quality_measures._int_nqf0053_denominator\n\n)\n\n, value_sets as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    \n)\n\n, osteo_procedure_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from value_sets\n    where lower(concept_name) in (\n          'bone mineral density test'\n        , 'bone mineral density tests cpt'\n        , 'bone mineral density tests icd10pcs'\n        , 'bone mineral density tests hcpcs'\n        , 'dexa dual energy xray absorptiometry, bone density'\n        , 'central dual energy x-ray absorptiometry (dxa)'\n        , 'spinal densitometry x-ray' \n        , 'ultrasonography for densitometry' \n        , 'ct bone density axial'\n        , 'peripheral dual-energy x-ray absorptiometry (dxa)'\n        , 'osteoporosis medication'\n    )\n\n)\n\n, procedures_osteo_related as (\n\n    select\n        patient_id\n      , procedure_date\n    from __dbt__cte__quality_measures__stg_core__procedure as procs\n    inner join osteo_procedure_codes\n        on coalesce(procs.normalized_code, procs.source_code) = osteo_procedure_codes.code\n        and coalesce(procs.normalized_code_type, procs.source_code_type) = osteo_procedure_codes.code_system\n\n)\n\n, qualifying_procedures as (\n\n    select\n          procedures_osteo_related.patient_id\n        , procedures_osteo_related.procedure_date\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , denominator.recorded_date\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n    from procedures_osteo_related\n    inner join denominator\n        on procedures_osteo_related.patient_id = denominator.patient_id\n        and \n            procedures_osteo_related.procedure_date between\n            denominator.recorded_date \n            and\n            \n\n    dateadd(\n        month,\n        6,\n        denominator.recorded_date\n        )\n\n \n\n)\n\n, denominator_patients_disqualified_from_procedure as (\n    \n    select \n          denominator.patient_id\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , denominator.recorded_date\n        , denominator.performance_period_begin\n        , denominator.performance_period_end  \n    from denominator\n    left join qualifying_procedures \n    on denominator.patient_id = qualifying_procedures.patient_id\n    where qualifying_procedures.patient_id is null\n\n)\n\n-- pharmacy_claim begin\n\n, osteo_rx_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from value_sets\n    where lower(concept_name) \n        in \n        ( \n          'osteoporosis medications for urology care'\n        , 'osteoporosis medication'\n        , 'bisphosphonates'\n        )\n\n)\n\n, pharmacy_claims_osteo_related as (\n\n    select\n        patient_id\n      , dispensing_date\n      , ndc_code  \n    from __dbt__cte__quality_measures__stg_pharmacy_claim as pharmacy_claims\n    inner join osteo_rx_codes\n    on pharmacy_claims.ndc_code = osteo_rx_codes.code\n        and lower(osteo_rx_codes.code_system) = 'ndc'\n\n)\n\n, qualifying_pharmacy_claims as (\n\n    select \n          pharmacy_claims_osteo_related.patient_id\n        , pharmacy_claims_osteo_related.dispensing_date\n        , pharmacy_claims_osteo_related.ndc_code\n        , denominator_patients_disqualified_from_procedure.measure_id\n        , denominator_patients_disqualified_from_procedure.measure_name\n        , denominator_patients_disqualified_from_procedure.measure_version\n        , denominator_patients_disqualified_from_procedure.recorded_date\n        , denominator_patients_disqualified_from_procedure.performance_period_begin\n        , denominator_patients_disqualified_from_procedure.performance_period_end\n    from pharmacy_claims_osteo_related\n    inner join denominator_patients_disqualified_from_procedure\n        on pharmacy_claims_osteo_related.patient_id = denominator_patients_disqualified_from_procedure.patient_id\n        and pharmacy_claims_osteo_related.dispensing_date \n            between             \n            denominator_patients_disqualified_from_procedure.recorded_date \n                and \n                \n\n    dateadd(\n        month,\n        6,\n        denominator_patients_disqualified_from_procedure.recorded_date\n        )\n\n\n)\n\n-- medication begin\n\n, medication_osteo_related as (\n\n    select\n        patient_id\n      , encounter_id\n      , prescribing_date\n      , dispensing_date\n      , source_code\n      , source_code_type\n      , ndc_code\n      , rxnorm_code\n    from __dbt__cte__quality_measures__stg_core__medication as medications\n    inner join osteo_rx_codes\n        on medications.source_code = osteo_rx_codes.code\n        and medications.source_code_type = osteo_rx_codes.code_system\n\n)\n\n, qualifying_medications as (\n\n    select\n          medication_osteo_related.patient_id\n        , medication_osteo_related.encounter_id\n        , denominator_patients_disqualified_from_procedure.measure_id\n        , denominator_patients_disqualified_from_procedure.measure_name\n        , denominator_patients_disqualified_from_procedure.measure_version\n        , denominator_patients_disqualified_from_procedure.recorded_date\n        , denominator_patients_disqualified_from_procedure.performance_period_begin\n        , denominator_patients_disqualified_from_procedure.performance_period_end\n    from medication_osteo_related\n    inner join denominator_patients_disqualified_from_procedure\n        on medication_osteo_related.patient_id = denominator_patients_disqualified_from_procedure.patient_id\n            and coalesce(medication_osteo_related.prescribing_date, medication_osteo_related.dispensing_date) between \n                denominator_patients_disqualified_from_procedure.recorded_date \n                and \n                \n\n    dateadd(\n        month,\n        6,\n        denominator_patients_disqualified_from_procedure.recorded_date\n        )\n\n\n\n)\n\n, numerator as (\n\n    select\n          qualifying_procedures.patient_id\n        , qualifying_procedures.performance_period_begin\n        , qualifying_procedures.performance_period_end\n        , qualifying_procedures.measure_id\n        , qualifying_procedures.measure_name\n        , qualifying_procedures.measure_version\n        , recorded_date as evidence_date\n        , 1 as numerator_flag\n    from qualifying_procedures\n\n    union all\n\n    select \n          qualifying_pharmacy_claims.patient_id\n        , qualifying_pharmacy_claims.performance_period_begin\n        , qualifying_pharmacy_claims.performance_period_end\n        , qualifying_pharmacy_claims.measure_id\n        , qualifying_pharmacy_claims.measure_name\n        , qualifying_pharmacy_claims.measure_version\n        , recorded_date as evidence_date\n        , 1 as numerator_flag\n    from qualifying_pharmacy_claims\n\n    union all\n\n    select \n          qualifying_medications.patient_id\n        , qualifying_medications.performance_period_begin\n        , qualifying_medications.performance_period_end\n        , qualifying_medications.measure_id\n        , qualifying_medications.measure_name\n        , qualifying_medications.measure_version\n        , recorded_date as evidence_date\n        , 1 as numerator_flag\n    from qualifying_medications\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(null as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from numerator\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0053_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.133174Z", "completed_at": "2024-10-11T23:52:51.184101Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.318761Z", "completed_at": "2024-10-11T23:52:51.318770Z"}], "thread_id": "Thread-4", "execution_time": 0.24329209327697754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0059_exclusions", "compiled": true, "compiled_code": "with frailty as (\n\n  select\n    *\n  from dev_coco.quality_measures._int_shared_exclusions_frailty\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0059__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0059__performance_period\n\n)\n\n)\n-- advanced illness start\n, advanced_illness_exclusion as (\n\n  select\n    source.*\n  from dev_coco.quality_measures._int_shared_exclusions_advanced_illness as source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where source.exclusion_date\n    between\n      \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0059__performance_period\n\n)\n        )\n\n\n      and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0059__performance_period\n\n)\n\n)\n\n, acute_inpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'acute_inpatient'\n\n)\n\n, nonacute_outpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'nonacute_outpatient'\n\n)\n\n, acute_inpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from acute_inpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, nonacute_outpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from nonacute_outpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, valid_advanced_illness_exclusions as (\n\n    select\n          acute_inpatient_advanced_illness.patient_id\n        , acute_inpatient_advanced_illness.exclusion_date\n        , acute_inpatient_advanced_illness.exclusion_reason\n        , acute_inpatient_advanced_illness.exclusion_type\n    from acute_inpatient_advanced_illness\n    left join acute_inpatient_counts\n      on acute_inpatient_advanced_illness.patient_id = acute_inpatient_counts.patient_id\n    where acute_inpatient_counts.encounter_count >= 1\n\n    union all\n\n    select\n        nonacute_outpatient_advanced_illness.patient_id\n      , nonacute_outpatient_advanced_illness.exclusion_date\n      , nonacute_outpatient_advanced_illness.exclusion_reason\n      , nonacute_outpatient_advanced_illness.exclusion_type\n    from nonacute_outpatient_advanced_illness\n    left join nonacute_outpatient_counts\n      on nonacute_outpatient_advanced_illness.patient_id = nonacute_outpatient_counts.patient_id\n    where nonacute_outpatient_counts.encounter_count >= 2\n\n\n)\n-- advanced illness end\n\n, valid_dementia_exclusions as (\n\n  select\n      source.patient_id\n    , source.exclusion_date\n    , source.exclusion_reason\n    , source.exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_dementia source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where (\n    source.dispensing_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0059__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0059__performance_period\n\n)\n    or source.paid_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0059__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0059__performance_period\n\n)\n    )\n\n)\n\n, valid_hospice_palliative as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_hospice_palliative\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0059__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0059__performance_period\n\n)\n\n)\n\n, valid_institutional_snp as (\n\n  select \n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_institutional_snp\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0059__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0059__performance_period\n\n)\n\n)\n\n, exclusions as (\n\n  select * from valid_advanced_illness_exclusions\n  union all\n  select * from valid_dementia_exclusions\n  union all\n  select * from valid_hospice_palliative\n  union all\n  select * from valid_institutional_snp\n\n)\n\n, combined_exclusions as (\n\n  select \n      exclusions.*\n    , denominator.age\n  from exclusions\n  inner join dev_coco.quality_measures._int_nqf0059_denominator as denominator\n      on exclusions.patient_id = denominator.patient_id\n\n)\n\n, valid_exclusions as (\n\n  select\n    *\n  from combined_exclusions\n  where exclusion_type != 'hospice_palliative'\n    and age >= 66\n\n  union all\n\n  select\n    *\n  from combined_exclusions\n  where exclusion_type = 'hospice_palliative'\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , 1 as exclusion_flag\n    from valid_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0059_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.143351Z", "completed_at": "2024-10-11T23:52:51.310914Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.319859Z", "completed_at": "2024-10-11T23:52:51.319864Z"}], "thread_id": "Thread-3", "execution_time": 0.1905043125152588, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0059_numerator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__lab_result as (\n\n\nselect\n      patient_id\n    , result\n    , result_date\n    , collection_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.lab_result\n\n\n), denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_coco.quality_measures._int_nqf0059_denominator\n\n)\n\n, hba1c_test_code as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    From dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in  (\n        'hba1c laboratory test'\n    )\n\n)\n\n, labs as (\n\n    select\n        patient_id\n        , result\n        , result_date\n        , collection_date\n        , source_code_type\n        , source_code\n        , normalized_code_type\n        , normalized_code\n    from __dbt__cte__quality_measures__stg_core__lab_result\n\n)\n\n, qualifying_labs as (\n\n    select\n      labs.patient_id\n    , labs.result as evidence_value\n    , coalesce(collection_date,result_date) as evidence_date\n    , hba1c_test_code.concept_name\n    , row_number() over(partition by labs.patient_id order by coalesce(collection_date,result_date) desc) as rn\n    from labs\n    inner join hba1c_test_code\n        on coalesce(labs.normalized_code, labs.source_code) = hba1c_test_code.code\n            and coalesce(labs.normalized_code_type, labs.source_code_type) = hba1c_test_code.code_system\n    left join denominator\n        on labs.patient_id = denominator.patient_id\n    where coalesce(collection_date,result_date) <= denominator.performance_period_end\n   \n        and regexp_like(result, '^[+-]?([0-9]*[.])?[0-9]+$')\n    \n\n)\n\n, recent_readings as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from qualifying_labs\n    where rn = 1\n\n)\n\n, qualifying_patients as (\n\n    select\n          denominator.*\n        , recent_readings.evidence_date\n        , recent_readings.evidence_value\n    from denominator\n    left join recent_readings\n        on denominator.patient_id = recent_readings.patient_id\n\n)\n\n, test_not_performed as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , evidence_date\n        , evidence_value\n        , 1 as numerator_flag\n    from qualifying_patients\n    where\n        (evidence_date not between performance_period_begin and performance_period_end)\n        or evidence_date is null\n\n)\n\n, valid_patients as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , evidence_date\n        , evidence_value\n        , case\n            when cast(evidence_value as numeric(28,6)) > 9.0 then 1\n            else 0\n          end as numerator_flag\n    from qualifying_patients\n    where evidence_date between performance_period_begin and performance_period_end\n\n)\n\n, numerator as (\n\n    select * from valid_patients\n\n    union all\n\n    select * from test_not_performed\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from numerator\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0059_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.177928Z", "completed_at": "2024-10-11T23:52:51.319266Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.351600Z", "completed_at": "2024-10-11T23:52:51.351609Z"}], "thread_id": "Thread-7", "execution_time": 0.22095799446105957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0097_exclusions", "compiled": true, "compiled_code": "with valid_hospice_exclusions as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_hospice_palliative\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0097__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0097__performance_period\n\n)\n    and lower(exclusion_reason) in (\n            'hospice encounter'\n    )\n\n)\n\n, combined_exclusions as (\n\n  select \n      valid_hospice_exclusions.patient_id\n    , valid_hospice_exclusions.exclusion_date\n    , valid_hospice_exclusions.exclusion_reason\n    , valid_hospice_exclusions.exclusion_type\n  from valid_hospice_exclusions\n  inner join dev_coco.quality_measures._int_nqf0097_denominator as denominator\n      on valid_hospice_exclusions.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , 1 as exclusion_flag\n    from combined_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0097_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.184385Z", "completed_at": "2024-10-11T23:52:51.320439Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.352794Z", "completed_at": "2024-10-11T23:52:51.352800Z"}], "thread_id": "Thread-1", "execution_time": 0.22110319137573242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0097_numerator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n), denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , discharge_date\n    from dev_coco.quality_measures._int_nqf0097_denominator\n\n)\n\n, reconciliation_codes as (\n\n    select\n          concept_name\n        , code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n        'medication reconciliation post discharge'\n    )\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, reconciliation_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n    from procedures\n    inner join reconciliation_codes\n        on procedures.code = reconciliation_codes.code\n            and procedures.code_type = reconciliation_codes.code_system\n\n)\n\n, qualifying_patients_with_denominator as (\n\n    select\n        denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , reconciliation_procedures.procedure_date as evidence_date\n        , 1 as numerator_flag\n    from denominator\n    inner join reconciliation_procedures\n        on denominator.patient_id = reconciliation_procedures.patient_id\n    where datediff(\n        day,\n        denominator.discharge_date,\n        reconciliation_procedures.procedure_date\n        ) between 0 and 30\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(null as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n    from qualifying_patients_with_denominator\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0097_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.195987Z", "completed_at": "2024-10-11T23:52:51.321370Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.372130Z", "completed_at": "2024-10-11T23:52:51.372139Z"}], "thread_id": "Thread-9", "execution_time": 0.24012303352355957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy", "compiled": true, "compiled_code": "\n\n/*\n    Women who had a bilateral mastectomy or who have a history of a bilateral\n    mastectomy or for whom there is evidence of a right and a left\n    unilateral mastectomy\n*/\n\nwith  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , encounter_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.condition\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , observation_date\n    , result\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , normalized_description\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.observation\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n), denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n    from dev_coco.quality_measures._int_nqf2372_denominator\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where concept_name in (\n          'Bilateral Mastectomy'\n        , 'History of bilateral mastectomy'\n        , 'Status Post Left Mastectomy'\n        , 'Status Post Right Mastectomy'\n        , 'Unilateral Mastectomy Left'\n        , 'Unilateral Mastectomy Right'\n        , 'Unilateral Mastectomy, Unspecified Laterality'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n         inner join exclusion_codes\n             on conditions.code = exclusion_codes.code\n             and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, all_mastectomy as (\n\n    select\n          denominator.patient_id\n        , condition_exclusions.recorded_date as exclusion_date\n        , condition_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join condition_exclusions\n            on denominator.patient_id = condition_exclusions.patient_id\n\n    union all\n\n    select\n          denominator.patient_id\n        , observation_exclusions.observation_date as exclusion_date\n        , observation_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join observation_exclusions\n            on denominator.patient_id = observation_exclusions.patient_id\n\n    union all\n\n    select\n          denominator.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , procedure_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join procedure_exclusions\n            on denominator.patient_id = procedure_exclusions.patient_id\n\n)\n\n/*\n    Women who had a bilateral mastectomy or who have a history of a bilateral\n    mastectomy\n*/\n, bilateral_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n          'Bilateral Mastectomy'\n        , 'History of bilateral mastectomy'\n    )\n\n)\n\n, right_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n          'Status Post Right Mastectomy'\n        , 'Unilateral Mastectomy Right'\n    )\n\n)\n\n, left_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n          'Status Post Left Mastectomy'\n        , 'Unilateral Mastectomy Left'\n    )\n\n)\n\n, unspecified_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n        'Unilateral Mastectomy, Unspecified Laterality'\n    )\n\n)\n\n/*\n    Women for whom there is evidence of a right AND a left unilateral mastectomy\n    or unspecific mastectomies on different dates\n*/\n, unilateral_mastectomy as (\n\n    select\n          right_mastectomy.patient_id\n        , right_mastectomy.exclusion_date\n        , right_mastectomy.exclusion_reason\n    from right_mastectomy\n         inner join left_mastectomy\n            on right_mastectomy.patient_id = left_mastectomy.patient_id\n\n    union all\n\n    select\n          unspecified_mastectomy.patient_id\n        , unspecified_mastectomy.exclusion_date\n        , unspecified_mastectomy.exclusion_reason\n    from unspecified_mastectomy\n         inner join unspecified_mastectomy as self_join\n            on unspecified_mastectomy.patient_id = self_join.patient_id\n            and unspecified_mastectomy.exclusion_date <> self_join.exclusion_date\n\n)\n\n, unioned as (\n\n    select * from bilateral_mastectomy\n    union all\n    select * from unilateral_mastectomy\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom unioned", "relation_name": "dev_coco.quality_measures._int_nqf2372_exclude_mastectomy"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.208570Z", "completed_at": "2024-10-11T23:52:51.326977Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.396694Z", "completed_at": "2024-10-11T23:52:51.396700Z"}], "thread_id": "Thread-2", "execution_time": 0.26414012908935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_numerator", "compiled": true, "compiled_code": "\n\n/*\n    Eligible population from the denominator model before exclusions\n*/\nwith  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      patient_id\n    , encounter_id\n    , observation_date\n    , result\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , normalized_description\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.observation\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n), denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , performance_period_lookback\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_coco.quality_measures._int_nqf2372_denominator\n\n)\n\n, mammography_codes as (\n\n    select\n          code\n        , code_system\n    from dev_coco.quality_measures._value_set_codes\n    where concept_name = 'Mammography'\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce(\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, qualifying_claims as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n    from medical_claim\n         inner join mammography_codes\n            on medical_claim.hcpcs_code = mammography_codes.code\n    where mammography_codes.code_system = 'hcpcs'\n\n)\n\n, qualifying_observations as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n    from observations\n         inner join mammography_codes\n             on observations.code = mammography_codes.code\n             and observations.code_type = mammography_codes.code_system\n)\n\n, qualifying_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n    from procedures\n         inner join mammography_codes\n             on procedures.code = mammography_codes.code\n             and procedures.code_type = mammography_codes.code_system\n\n)\n\n/*\n    Check if patients in the eligible population have had a screening,\n    diagnostic, film, digital or digital breast tomosynthesis (3D)\n    mammography results documented and reviewed.\n*/\n\n, patients_with_mammograms as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.performance_period_lookback\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when qualifying_claims.claim_start_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_claims.claim_start_date\n            when qualifying_claims.claim_end_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_claims.claim_end_date\n            when qualifying_observations.observation_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_observations.observation_date\n            when qualifying_procedures.procedure_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_procedures.procedure_date\n            else null\n          end as evidence_date\n        , case\n            when qualifying_claims.claim_start_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            when qualifying_claims.claim_end_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            when qualifying_observations.observation_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            when qualifying_procedures.procedure_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            else 0\n          end as numerator_flag\n    from denominator\n         left join qualifying_claims\n            on denominator.patient_id = qualifying_claims.patient_id\n        left join qualifying_observations\n            on denominator.patient_id = qualifying_observations.patient_id\n        left join qualifying_procedures\n            on denominator.patient_id = qualifying_procedures.patient_id\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(numerator_flag as integer) as numerator_flag\n    from patients_with_mammograms\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , numerator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf2372_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.321627Z", "completed_at": "2024-10-11T23:52:51.403255Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.407252Z", "completed_at": "2024-10-11T23:52:51.407263Z"}], "thread_id": "Thread-5", "execution_time": 0.223768949508667, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0420_exclusions", "compiled": true, "compiled_code": "with  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n), denominator as (\n  \n    select\n        patient_id\n    from dev_coco.quality_measures._int_nqf0420_denominator\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'patient is not eligible for a pain assessment'\n      )\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n    where procedure_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0420__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0420__performance_period\n\n)\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n    where coalesce(claim_end_date, claim_start_date) between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0420__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0420__performance_period\n\n)\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name as concept_name\n    from procedures\n    inner join exclusion_codes\n        on procedures.code = exclusion_codes.code\n          and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , coalesce(medical_claim.claim_end_date, medical_claim.claim_start_date) as exclusion_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name as concept_name\n    from medical_claim\n    inner join exclusion_codes\n      on medical_claim.hcpcs_code = exclusion_codes.code\n        and exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, patients_with_exclusions as(\n    \n    select\n        patient_id\n      , exclusion_date\n      , concept_name as exclusion_reason\n    from med_claim_exclusions\n\n    union all\n\n    select \n          patient_id\n        , procedure_date as exclusion_date\n        , concept_name as exclusion_reason\n    from procedure_exclusions\n\n)\n\n, valid_exclusions as (\n\n  select \n        patients_with_exclusions.patient_id\n      , patients_with_exclusions.exclusion_date\n      , patients_with_exclusions.exclusion_reason  \n  from patients_with_exclusions\n  inner join denominator\n      on patients_with_exclusions.patient_id = denominator.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(1 as integer) as exclusion_flag\n    from valid_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0420_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.359597Z", "completed_at": "2024-10-11T23:52:51.406190Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.422136Z", "completed_at": "2024-10-11T23:52:51.422150Z"}], "thread_id": "Thread-6", "execution_time": 0.10414576530456543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ed_classification__summary", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__ed_classification__stg_patient as (\n\n\nselect\n    patient_id\n    , sex\n    , birth_date\n    , race\n    , state\n    , zip_code\n    , latitude\n    , longitude\nfrom dev_coco.core.patient\n) select\n    class.encounter_id\n    , cat.classification_name as ed_classification_description\n    , cat.classification_order as ed_classification_order\n    , class.patient_id\n    , class.encounter_end_date\n    , date_part('year', class.encounter_end_date) || \n\n    case when 2 = 0\n        then ''\n    else\n        right(\n            '00' || date_part('month', class.encounter_end_date),\n            2\n        )\n    end as year_month\n    , class.primary_diagnosis_code\n    , class.primary_diagnosis_description\n    , class.paid_amount\n    , class.allowed_amount\n    , class.charge_amount\n    , class.facility_id\n    , fac_prov.provider_organization_name as facility_name\n    , practice_state as facility_state\n    , practice_city as facility_city\n    , practice_zip_code as facility_zip_code\n    , pat.sex as patient_sex\n    , floor(datediff(\n        hour,\n        pat.birth_date,\n        class.encounter_end_date\n        ) / 8766.0) as patient_age\n    , zip_code as patient_zip_code\n    , latitude as patient_latitude\n    , longitude as patient_longitude\n    , race as patient_race\nfrom dev_coco.ed_classification._int_filter_encounter_with_classification class\ninner join dev_coco.ed_classification._value_set_categories cat\n    on class.classification = cat.classification\nleft join dev_coco.terminology.provider fac_prov \n    on class.facility_id = fac_prov.npi\nleft join __dbt__cte__ed_classification__stg_patient pat\n    on class.patient_id = pat.patient_id", "relation_name": "dev_coco.ed_classification.summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.353253Z", "completed_at": "2024-10-11T23:52:51.406861Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.423202Z", "completed_at": "2024-10-11T23:52:51.423209Z"}], "thread_id": "Thread-8", "execution_time": 0.1056978702545166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0420_numerator", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , encounter_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , modifier_1\n    , modifier_2\n    , modifier_3\n    , modifier_4\n    , modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.medical_claim\n\n\n), denominator as (\n\n    select \n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from dev_coco.quality_measures._int_nqf0420_denominator\n\n)\n\n, pain_assessment_code as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from dev_coco.quality_measures._value_set_codes\n    where lower(concept_name) in (\n          'pain assessment documented'\n    )\n\n)\n\n, procedures as (\n\n    select\n        patient_id\n      , procedure_date\n      , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, pain_assessment_procedures as (\n\n    select \n          procedures.patient_id\n        , procedures.procedure_date as evidence_date\n    from procedures\n    inner join pain_assessment_code\n        on procedures.code = pain_assessment_code.code\n            and procedures.code_type = pain_assessment_code.code_system\n\n)\n\n, pain_assessment_claims as (\n\n    select\n          patient_id\n        , coalesce(claim_end_date, claim_start_date) as evidence_date\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join pain_assessment_code\n        on medical_claim.hcpcs_code = pain_assessment_code.code\n            and lower(pain_assessment_code.code_system) = 'hcpcs'\n\n)\n\n, time_unbounded_qualifying_patients as (\n\n    select\n          patient_id\n        , evidence_date\n    from pain_assessment_procedures\n    \n    union all\n\n    select\n          patient_id\n        , evidence_date\n    from pain_assessment_claims\n\n)\n\n, qualifying_patients_with_denominator as (\n\n    select \n          time_unbounded_qualifying_patients.patient_id\n        , time_unbounded_qualifying_patients.evidence_date\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , 1 as numerator_flag\n    from time_unbounded_qualifying_patients\n    inner join denominator\n        on time_unbounded_qualifying_patients.patient_id = denominator.patient_id\n            and time_unbounded_qualifying_patients.evidence_date between\n                denominator.performance_period_begin and denominator.performance_period_end\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(null as TEXT) as evidence_value\n        , cast(numerator_flag as integer) as numerator_flag\n      from qualifying_patients_with_denominator\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , evidence_value\n    , numerator_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0420_numerator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.398012Z", "completed_at": "2024-10-11T23:52:51.410224Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.436834Z", "completed_at": "2024-10-11T23:52:51.436845Z"}], "thread_id": "Thread-10", "execution_time": 0.11740684509277344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_01_exclusions", "compiled": true, "compiled_code": "\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_shared_exclusion_union", "relation_name": "dev_coco.ahrq_measures._int_pqi_01_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.414194Z", "completed_at": "2024-10-11T23:52:51.460702Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.513405Z", "completed_at": "2024-10-11T23:52:51.513415Z"}], "thread_id": "Thread-4", "execution_time": 0.11627388000488281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_03_exclusions", "compiled": true, "compiled_code": "\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_shared_exclusion_union", "relation_name": "dev_coco.ahrq_measures._int_pqi_03_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.424230Z", "completed_at": "2024-10-11T23:52:51.493843Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.514941Z", "completed_at": "2024-10-11T23:52:51.514947Z"}], "thread_id": "Thread-3", "execution_time": 0.11149477958679199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_05_exclusions", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__ahrq_measures__stg_pqi_condition as (\n\n\nselect \n    normalized_code_type\n  , normalized_code\n  , encounter_id\n  , data_source\nfrom \n    dev_coco.core.condition\n), resp_an as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'cystic fibrosis' as exclusion_reason\n    from __dbt__cte__ahrq_measures__stg_pqi_condition as c\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi\n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'cystic_fibrosis_and_anomalies_of_the_respiratory_system'\n      and pqi_number = '05'\n    where c.encounter_id is not null\n),\n\nunion_cte as (\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from dev_coco.ahrq_measures._int_pqi_shared_exclusion_union\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from resp_an\n)\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "dev_coco.ahrq_measures._int_pqi_05_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.438310Z", "completed_at": "2024-10-11T23:52:51.513938Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.526707Z", "completed_at": "2024-10-11T23:52:51.526717Z"}], "thread_id": "Thread-7", "execution_time": 0.12032818794250488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_07_exclusions", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__ahrq_measures__stg_pqi_procedure as (\n\n\nselect \n    normalized_code_type\n  , normalized_code\n  , encounter_id\n  , data_source\nfrom \n    dev_coco.core.procedure\n),  __dbt__cte__ahrq_measures__stg_pqi_condition as (\n\n\nselect \n    normalized_code_type\n  , normalized_code\n  , encounter_id\n  , data_source\nfrom \n    dev_coco.core.condition\n), cardiac as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'cardiac procedure' as exclusion_reason\n    from __dbt__cte__ahrq_measures__stg_pqi_procedure as c\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-pcs'\n      and pqi.value_set_name = 'cardiac_procedure_codes'\n      and pqi_number = 'appendix_b'\n    where c.encounter_id is not null\n),\n\nckd as (\n    select distinct\n        encounter_id\n      , data_source\n    from __dbt__cte__ahrq_measures__stg_pqi_condition as c\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'exclusion_kidney_disease_diagnosis_codes'\n      and pqi_number = '07'\n    where c.encounter_id is not null\n),\n\naccess as (\n    select distinct\n        encounter_id\n      , data_source\n    from __dbt__cte__ahrq_measures__stg_pqi_procedure as c\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-pcs'\n      and pqi.value_set_name = 'exclusion_dialysis_access_procedure_codes'\n      and pqi.pqi_number = '07'\n    where c.encounter_id is not null\n),\n\ncombine as (\n    select\n        c.encounter_id\n      , c.data_source\n      , 'ckd' as exclusion_reason\n    from __dbt__cte__ahrq_measures__stg_pqi_condition as c\n    inner join ckd \n      on c.encounter_id = ckd.encounter_id\n      and c.data_source = ckd.data_source\n    inner join access as a \n      on c.encounter_id = a.encounter_id\n      and c.data_source = a.data_source\n),\n\nunion_cte as (\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from dev_coco.ahrq_measures._int_pqi_shared_exclusion_union\n    \n    union all\n    \n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from cardiac\n    \n    union all\n    \n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from combine\n)\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "dev_coco.ahrq_measures._int_pqi_07_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.461230Z", "completed_at": "2024-10-11T23:52:51.515670Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.527979Z", "completed_at": "2024-10-11T23:52:51.527987Z"}], "thread_id": "Thread-1", "execution_time": 0.11856389045715332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_08_exclusions", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__ahrq_measures__stg_pqi_procedure as (\n\n\nselect \n    normalized_code_type\n  , normalized_code\n  , encounter_id\n  , data_source\nfrom \n    dev_coco.core.procedure\n), cardiac as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'cardiac procedure' as exclusion_reason\n    from __dbt__cte__ahrq_measures__stg_pqi_procedure as c\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-pcs'\n      and pqi.value_set_name = 'cardiac_procedure_codes'\n      and pqi.pqi_number = 'appendix_b'\n    where c.encounter_id is not null\n),\n\nunion_cte as (\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from dev_coco.ahrq_measures._int_pqi_shared_exclusion_union\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from cardiac\n)\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "dev_coco.ahrq_measures._int_pqi_08_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.467468Z", "completed_at": "2024-10-11T23:52:51.519200Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.540230Z", "completed_at": "2024-10-11T23:52:51.540239Z"}], "thread_id": "Thread-9", "execution_time": 0.13042497634887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_11_exclusions", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__ahrq_measures__stg_pqi_condition as (\n\n\nselect \n    normalized_code_type\n  , normalized_code\n  , encounter_id\n  , data_source\nfrom \n    dev_coco.core.condition\n),  __dbt__cte__ahrq_measures__stg_pqi_procedure as (\n\n\nselect \n    normalized_code_type\n  , normalized_code\n  , encounter_id\n  , data_source\nfrom \n    dev_coco.core.procedure\n), sickle_cell as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'sickle cell' as exclusion_reason\n    from __dbt__cte__ahrq_measures__stg_pqi_condition as c\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'sickle_cell_anemia_or_hb-s_disease_diagnosis_codes'\n      and pqi.pqi_number = '11'\n    where c.encounter_id is not null\n),\n\nimmune_dx as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'immunocompromised diagnosis' as exclusion_reason\n    from __dbt__cte__ahrq_measures__stg_pqi_condition as c\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'immunocompromised_state_diagnosis_codes'\n      and pqi.pqi_number = 'appendix_c'\n    where c.encounter_id is not null\n),\n\nimmune_px as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'immunocompromised procedure' as exclusion_reason\n    from __dbt__cte__ahrq_measures__stg_pqi_procedure as c\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-pcs'\n      and pqi.value_set_name = 'immunocompromised_state_procedure_codes'\n      and pqi.pqi_number = 'appendix_c'\n    where c.encounter_id is not null\n),\n\nunion_cte as (\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from dev_coco.ahrq_measures._int_pqi_shared_exclusion_union\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from sickle_cell\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from immune_dx\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from immune_px\n)\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "dev_coco.ahrq_measures._int_pqi_11_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.494126Z", "completed_at": "2024-10-11T23:52:51.524194Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.555231Z", "completed_at": "2024-10-11T23:52:51.555240Z"}], "thread_id": "Thread-2", "execution_time": 0.14483880996704102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_12_exclusions", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__ahrq_measures__stg_pqi_condition as (\n\n\nselect \n    normalized_code_type\n  , normalized_code\n  , encounter_id\n  , data_source\nfrom \n    dev_coco.core.condition\n),  __dbt__cte__ahrq_measures__stg_pqi_procedure as (\n\n\nselect \n    normalized_code_type\n  , normalized_code\n  , encounter_id\n  , data_source\nfrom \n    dev_coco.core.procedure\n), kidney as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'kidney' as exclusion_reason\n    from __dbt__cte__ahrq_measures__stg_pqi_condition as c\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'kidney_or_urinary_tract_disorder_diagnosis_codes'\n      and pqi.pqi_number = '12'\n    where c.encounter_id is not null\n),\n\nimmune_dx as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'immunocompromised diagnosis' as exclusion_reason\n    from __dbt__cte__ahrq_measures__stg_pqi_condition as c\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'immunocompromised_state_diagnosis_codes'\n      and pqi.pqi_number = 'appendix_c'\n    where c.encounter_id is not null\n),\n\nimmune_px as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'immunocompromised procedure' as exclusion_reason\n    from __dbt__cte__ahrq_measures__stg_pqi_procedure as c\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-pcs'\n      and pqi.value_set_name = 'immunocompromised_state_procedure_codes'\n      and pqi.pqi_number = 'appendix_c'\n    where c.encounter_id is not null\n),\n\nunion_cte as (\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from dev_coco.ahrq_measures._int_pqi_shared_exclusion_union\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from kidney\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from immune_dx\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from immune_px\n)\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "dev_coco.ahrq_measures._int_pqi_12_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.519815Z", "completed_at": "2024-10-11T23:52:51.556499Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.564371Z", "completed_at": "2024-10-11T23:52:51.564378Z"}], "thread_id": "Thread-5", "execution_time": 0.1041100025177002, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_14_exclusions", "compiled": true, "compiled_code": "\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_shared_exclusion_union", "relation_name": "dev_coco.ahrq_measures._int_pqi_14_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.528574Z", "completed_at": "2024-10-11T23:52:51.563306Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.566248Z", "completed_at": "2024-10-11T23:52:51.566252Z"}], "thread_id": "Thread-6", "execution_time": 0.05423402786254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_15_exclusions", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__ahrq_measures__stg_pqi_condition as (\n\n\nselect \n    normalized_code_type\n  , normalized_code\n  , encounter_id\n  , data_source\nfrom \n    dev_coco.core.condition\n), resp_an as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'cystic fibrosis' as exclusion_reason\n    from __dbt__cte__ahrq_measures__stg_pqi_condition as c\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'cystic_fibrosis_and_anomalies_of_the_respiratory_system_diagnosis_codes'\n      and pqi.pqi_number = '15'\n    where c.encounter_id is not null\n),\n\nunion_cte as (\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from dev_coco.ahrq_measures._int_pqi_shared_exclusion_union\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from resp_an\n)\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "dev_coco.ahrq_measures._int_pqi_15_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.540763Z", "completed_at": "2024-10-11T23:52:51.563564Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.566695Z", "completed_at": "2024-10-11T23:52:51.566699Z"}], "thread_id": "Thread-8", "execution_time": 0.05427885055541992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_16_exclusions", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__ahrq_measures__stg_pqi_condition as (\n\n\nselect \n    normalized_code_type\n  , normalized_code\n  , encounter_id\n  , data_source\nfrom \n    dev_coco.core.condition\n), amputation as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'amputation' as exclusion_reason\n    from __dbt__cte__ahrq_measures__stg_pqi_condition as c\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'traumatic_amputation_of_the_lower_extremity_diagnosis_codes'\n      and pqi.pqi_number = '16'\n    where c.encounter_id is not null\n),\n\npregnancy as (\n    select distinct\n        encounter_id\n      , data_source\n      , 'pregnancy' as exclusion_reason\n    from __dbt__cte__ahrq_measures__stg_pqi_condition as c\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi \n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'mdc_14_principal_diagnosis_codes'\n      and pqi.pqi_number = 'appendix_f'\n    where c.encounter_id is not null\n),\n\nunion_cte as (\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from dev_coco.ahrq_measures._int_pqi_shared_exclusion_union\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from amputation\n\n    union all\n\n    select\n        encounter_id\n      , data_source\n      , exclusion_reason\n    from pregnancy\n)\n\nselect\n    encounter_id\n  , data_source\n  , exclusion_reason\n  , row_number() over (\n      partition by encounter_id, data_source \n      order by exclusion_reason\n    ) as exclusion_number\n   , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "dev_coco.ahrq_measures._int_pqi_16_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.556746Z", "completed_at": "2024-10-11T23:52:51.565747Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.578149Z", "completed_at": "2024-10-11T23:52:51.578156Z"}], "thread_id": "Thread-10", "execution_time": 0.06392240524291992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__readmission_crude", "compiled": true, "compiled_code": "\n\n-- Here we calculate readmissions using all encounters\n-- that have valid admit and discharge dates and no overlap.\n-- This is meant to give a crude sense of the readmission\n-- rate without taking into account all the CMS HWR logic.\n\n\nwith encounter_info as (\nselect\n    enc.encounter_id,\n    enc.patient_id,\n    enc.admit_date,\n    enc.discharge_date\nfrom dev_coco.readmissions._int_encounter enc\nleft join dev_coco.readmissions._int_encounter_overlap over_a\n    on enc.encounter_id = over_a.encounter_id_A\nleft join dev_coco.readmissions._int_encounter_overlap over_b\n    on enc.encounter_id = over_b.encounter_id_B\nwhere\n    admit_date is not null\n    and\n    discharge_date is not null\n    and\n    admit_date <= discharge_date\nand over_a.encounter_id_A is null and over_b.encounter_id_B is null\n    ),\n\n\nencounter_sequence as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_seq\nfrom encounter_info\n),\n\n\nreadmission_calc as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    case\n        when bb.encounter_id is not null then 1\n\telse 0\n    end as had_readmission_flag,\n    datediff(\n        day,\n        bb.admit_date,\n        aa.discharge_date\n        ) as days_to_readmit,\n    case\n        when (datediff(\n        day,\n        bb.admit_date,\n        aa.discharge_date\n        )) <= 30  then 1\n\telse 0\n    end as readmit_30_flag\nfrom encounter_sequence aa left join encounter_sequence bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_seq + 1 = bb.encounter_seq\n)\n\n\n\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom readmission_calc", "relation_name": "dev_coco.readmissions._int_readmission_crude"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.567129Z", "completed_at": "2024-10-11T23:52:51.585032Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.606381Z", "completed_at": "2024-10-11T23:52:51.606390Z"}], "thread_id": "Thread-4", "execution_time": 0.050694942474365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_data_quality", "compiled": true, "compiled_code": "\n\n-- Here we list all encounters from the stg_encounter table\n-- with data quality flags that may disqualify them from\n-- being used for readmission measures \n\n\n-- Flag several potential data quality issues\n-- with all encounters.\n-- Every encounter_id from the stg_encounter model\n-- will be here. This CTE should have the same\n-- number of rows as the stg_encounter model, i.e.,\n-- there is a one to one correspondence between the\n-- rows in stg_encounter and this CTE.\nwith encounter_data_quality_issues as (\nselect\n    aa.encounter_id,\n    case\n        when aa.admit_date is null then 1\n\telse 0\n    end as missing_admit_date_flag,\n    case\n        when aa.discharge_date is null then 1\n\telse 0\n    end as missing_discharge_date_flag,\n    case\n        when aa.admit_date > aa.discharge_date then 1\n\telse 0\n    end as admit_after_discharge_flag,\n    case\n        when aa.discharge_disposition_code is null then 1\n\telse 0\n    end as missing_discharge_disposition_code_flag,\n    case\n        when\n\t    (aa.discharge_disposition_code is not null)\n\t    and\n\t    (bb.discharge_disposition_code is null) then 1\n\telse 0\n    end as invalid_discharge_disposition_code_flag,\n    case\n      when aa.primary_diagnosis_code is null then 1\n      else 0\n    end as missing_primary_diagnosis_flag,\n    case\n        when aa.valid_primary_diagnosis_code_flag = 0 then 1\n\telse 0\n    end as invalid_primary_diagnosis_code_flag,\n    case\n        when aa.ccs_diagnosis_category is null  then 1\n\telse 0\n    end as no_diagnosis_ccs_flag,\n    aa.ccs_diagnosis_category as diagnosis_ccs,\n    case\n        when aa.encounter_id in (select distinct encounter_id_A\n\t                         from dev_coco.readmissions._int_encounter_overlap )\n\t     or\n\t     aa.encounter_id in (select distinct encounter_id_B\n\t                         from dev_coco.readmissions._int_encounter_overlap )\n\tthen 1\n\telse 0\n    end as overlaps_with_another_encounter_flag,\n    case\n        when aa.ms_drg_code is null then 1\n\telse 0\n    end as missing_ms_drg_flag,\n    case\n        when cc.ms_drg_code is null then 1\n\telse 0\n    end as invalid_ms_drg_flag\n\nfrom dev_coco.readmissions._int_encounter_with_ccs aa\n     left join dev_coco.terminology.discharge_disposition bb\n     on aa.discharge_disposition_code = bb.discharge_disposition_code\n     left join dev_coco.terminology.ms_drg cc\n     on aa.ms_drg_code = cc.ms_drg_code\n),\n\n\n-- Here we add a disqualified_encounter_flag.\n-- This disqualified_encounter_flag = 1\n-- when any of the critical data quality flags\n-- from the above CTE are equal to 1.\nall_data_quality_flags as (\nselect\n    encounter_id,\n    diagnosis_ccs,\n    case\n        when\n\t    (missing_admit_date_flag = 1)\n\t    or\n\t    (missing_discharge_date_flag = 1)\n\t    or\n\t    (admit_after_discharge_flag = 1)\n\t    or\n\t    (missing_discharge_disposition_code_flag = 1)\n\t    or\n\t    (invalid_discharge_disposition_code_flag = 1)\n\t    or\n\t    (missing_primary_diagnosis_flag = 1)\n\t    or\n\t    (invalid_primary_diagnosis_code_flag = 1)\n\t    or\n\t    (no_diagnosis_ccs_flag = 1)\n\t    or\n\t    (overlaps_with_another_encounter_flag = 1)\n\t    or\n\t    (missing_ms_drg_flag = 1)\n\t    or\n\t    (invalid_ms_drg_flag = 1)\n\t    then 1\n\telse 0\n    end as disqualified_encounter_flag,\n    missing_admit_date_flag,\n    missing_discharge_date_flag,\n    admit_after_discharge_flag,\n    missing_discharge_disposition_code_flag,\n    invalid_discharge_disposition_code_flag,\n    missing_primary_diagnosis_flag,\n    invalid_primary_diagnosis_code_flag,\n    no_diagnosis_ccs_flag,\n    overlaps_with_another_encounter_flag,\n    missing_ms_drg_flag,\n    invalid_ms_drg_flag\nfrom encounter_data_quality_issues\n)    \n\n\n\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom all_data_quality_flags", "relation_name": "dev_coco.readmissions._int_encounter_data_quality"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.572738Z", "completed_at": "2024-10-11T23:52:51.598960Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.607302Z", "completed_at": "2024-10-11T23:52:51.607307Z"}], "thread_id": "Thread-3", "execution_time": 0.045660972595214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_specialty_cohort", "compiled": true, "compiled_code": "\n\n-- Here we list the specialty cohort for each encounter that has\n-- an associated specialty cohort.\n-- There are 5 possible specialty cohorts:\n--      [1] Medicine\n--      [2] Surgery/Gynecology\n--      [3] Cardiology\n--      [4] Cardiovascular\n--      [5] Neurology\n-- An encounter that has an ICD-10-PCS procedure code or a\n-- CCS procedure category that corresponds to the\n-- 'Surgery/Gynecology' cohort will always be in that cohort.\n-- For encounters that are not in the 'Surgery/Gynecology' cohort,\n-- we then check to see if they are in one of the other 4 cohorts.\n\n--ranking to eventually assign a cohort to encounters in multiple cohorts\nwith cohort_ranks as (\n    select 'Surgery/Gynecology' as cohort, 1 as c_rank\n    union all\n    select 'Cardiorespiratory' as cohort, 2 as c_rank\n    union all\n    select 'Cardiovascular' as cohort, 3 as c_rank\n    union all\n    select 'Neurology' as cohort, 4 as c_rank\n    union all\n    select 'Medicine' as cohort, 5 as c_rank\n)\n\n\n--get all encounter ids in any procedure or diagnosis based cohorts\n, all_encounter_cohorts as (\n\n    --encounter ids in procedure based cohorts\n        select procs.encounter_id, 1 as c_rank\n        from dev_coco.readmissions._int_procedure_ccs procs\n        left join dev_coco.readmissions._value_set_surgery_gynecology_cohort sgc\n            on procs.procedure_code = sgc.icd_10_pcs\n        left join dev_coco.readmissions._value_set_specialty_cohort sgsc\n            on procs.ccs_procedure_category = sgsc.ccs and sgsc.specialty_cohort = 'Surgery/Gynecology'\n        where sgc.icd_10_pcs is not null or sgsc.ccs is not null\n\n    union all\n\n    --encounter ids in diagnosis based cohorts\n    select diag.encounter_id, cohort_ranks.c_rank\n    from dev_coco.readmissions._int_encounter_with_ccs diag\n    inner join dev_coco.readmissions._value_set_specialty_cohort sc\n        on diag.ccs_diagnosis_category = sc.ccs and sc.procedure_or_diagnosis = 'Diagnosis'\n    inner join cohort_ranks\n        on sc.specialty_cohort = cohort_ranks.cohort\n)\n\n\n-- getting one cohort per encounter\n, main_encounter_cohort as (\n    select encounter_id, min(c_rank) as main_c_rank\n    from all_encounter_cohorts\n    group by encounter_id\n\n)\n\n\n--getting all encounters, with labeled cohorts, if no cohort cohort is \"medicine\"\nselect enc.encounter_id, coalesce(cohort_ranks.cohort, 'Medicine') as specialty_cohort, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.readmissions._int_encounter enc\nleft join main_encounter_cohort mec\n    on enc.encounter_id = mec.encounter_id\nleft join cohort_ranks\n    on mec.main_c_rank = cohort_ranks.c_rank", "relation_name": "dev_coco.readmissions._int_encounter_specialty_cohort"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.579645Z", "completed_at": "2024-10-11T23:52:51.607038Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.615705Z", "completed_at": "2024-10-11T23:52:51.615711Z"}], "thread_id": "Thread-7", "execution_time": 0.05171489715576172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__exclusion", "compiled": true, "compiled_code": "\n\n-- Here we list encounter_ids that are excluded\n-- from being index admissions because they\n-- belong to one of these categories:\n--       [1] Medical Treatment of Cancer\n--       [2] Rehabilitation\n--       [3] Psychiatric\n\n\n-- encounter_ids for encounters that should be\n-- excluded because they belong to one of the\n-- exclusion categories\nwith exclusions as (\nselect distinct encounter_id\nfrom dev_coco.readmissions._int_encounter_with_ccs\nwhere\n(ccs_diagnosis_category is not null)\nand\n(\nccs_diagnosis_category in\n    (select distinct ccs_diagnosis_category\n     from dev_coco.readmissions._value_set_exclusion_ccs_diagnosis_category )\n)\n)\n\n\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom exclusions", "relation_name": "dev_coco.readmissions._int_exclusion"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.585320Z", "completed_at": "2024-10-11T23:52:51.607740Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.616500Z", "completed_at": "2024-10-11T23:52:51.616505Z"}], "thread_id": "Thread-1", "execution_time": 0.051396846771240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__planned_encounter", "compiled": true, "compiled_code": "\n\n-- Here we list encounter_ids for all encounters\n-- that are planned.\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a procedure category\n-- that is only present for planned encounters \nwith always_planned_px as (\nselect distinct pccs.encounter_id\nfrom dev_coco.readmissions._int_procedure_ccs pccs\ninner join dev_coco.readmissions._value_set_always_planned_ccs_procedure_category apc\n    on pccs.ccs_procedure_category = apc.ccs_procedure_category\n),\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a diagnosis category\n-- that is only present for planned encounters\nalways_planned_dx as (\nselect distinct encounter_id\nfrom dev_coco.readmissions._int_encounter_with_ccs dccs\ninner join dev_coco.readmissions._value_set_always_planned_ccs_diagnosis_category apd\n    on dccs.ccs_diagnosis_category = apd.ccs_diagnosis_category\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on one of their CCS procedure categories.\n-- For these encounters to actually be planned, we must further\n-- require that they are NOT acute encounters\npotentially_planned_px_ccs as (\nselect distinct encounter_id\nfrom dev_coco.readmissions._int_procedure_ccs pccs\ninner join dev_coco.readmissions._value_set_potentially_planned_ccs_procedure_category pcs\n    on pccs.ccs_procedure_category = pcs.ccs_procedure_category\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on their ICD-10-PCS procedure codes.\n-- For these encounters to actually be planned, we must further\n-- require that they are NOT acute encounters\npotentially_planned_px_icd_10_pcs as (\nselect distinct encounter_id\nfrom dev_coco.readmissions._int_procedure_ccs pcs\ninner join  dev_coco.readmissions._value_set_potentially_planned_icd_10_pcs pps\n    on pcs.procedure_code = pps.icd_10_pcs\n),\n\n\n-- encounter_ids for encounters that are acute based\n-- on their primary diagnosis code or their CCS diagnosis category\nacute_encounters as (\nselect distinct encounter_id\nfrom dev_coco.readmissions._int_encounter_with_ccs dccs\nleft join dev_coco.readmissions._value_set_acute_diagnosis_icd_10_cm adi\n    on dccs.primary_diagnosis_code = adi.icd_10_cm\nleft join dev_coco.readmissions._value_set_acute_diagnosis_ccs adc\n    on dccs.ccs_diagnosis_category = adc.ccs_diagnosis_category\nwhere adi.icd_10_cm is not null or adc.ccs_diagnosis_category is not null\n),\n\n\n-- encounter_ids for encounters that are:\n--           [1] potentially planned, based on one of\n--               their CCS procedure categories or\n--               their ICD-10-PCS procedure codes\n--           [2] not acute, based on their primary diagnosis code\n--               or their CCS diagnosis category\n-- These encounters are therefore confirmed to be planned\npotentially_planned_that_are_actually_planned as (\nselect distinct ppp.encounter_id\nfrom (\n    select * from potentially_planned_px_ccs\n        union all\n    select * from potentially_planned_px_icd_10_pcs) ppp\nleft join acute_encounters\n    on ppp.encounter_id = acute_encounters.encounter_id\nwhere acute_encounters.encounter_id is null\n\n)\n\n\n-- Aggregate of all encounter_ids for planned encounters\n\nselect * , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from always_planned_px\n\nunion distinct\n\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from always_planned_dx\n\nunion distinct\n\nselect *, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run from potentially_planned_that_are_actually_planned", "relation_name": "dev_coco.readmissions._int_planned_encounter"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.593167Z", "completed_at": "2024-10-11T23:52:51.608938Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.633470Z", "completed_at": "2024-10-11T23:52:51.633478Z"}], "thread_id": "Thread-9", "execution_time": 0.06809687614440918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0055_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_coco.quality_measures._int_cbe0055_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_coco.quality_measures._int_cbe0055_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_cbe0055_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cbe0055_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.599554Z", "completed_at": "2024-10-11T23:52:51.615421Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.634330Z", "completed_at": "2024-10-11T23:52:51.634335Z"}], "thread_id": "Thread-2", "execution_time": 0.0684211254119873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cbe0101_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_coco.quality_measures._int_cbe0101_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_coco.quality_measures._int_cbe0101_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_cbe0101_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cbe0101_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.609183Z", "completed_at": "2024-10-11T23:52:51.635136Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.643855Z", "completed_at": "2024-10-11T23:52:51.643861Z"}], "thread_id": "Thread-5", "execution_time": 0.0592350959777832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm130_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_coco.quality_measures._int_cqm130_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_coco.quality_measures._int_cqm130_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_cqm130_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm130_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.626355Z", "completed_at": "2024-10-11T23:52:51.642778Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.651103Z", "completed_at": "2024-10-11T23:52:51.651110Z"}], "thread_id": "Thread-8", "execution_time": 0.045430898666381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_long", "compiled": true, "compiled_code": "with denominator as (\n\n    select\n          patient_id\n    from dev_coco.quality_measures._int_nqf0034_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n    from dev_coco.quality_measures._int_nqf0034_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_nqf0034_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , (\n    select id\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0034'\n    )  as measure_id\n        , (\n\n    select name\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0034'\n\n    )  as measure_name\n        , (\n    select version\nfrom dev_coco.quality_measures._value_set_measures\nwhere id = 'NQF0034'\n\n    )  as measure_version\n    from denominator\n    inner join dev_coco.quality_measures._int_nqf0034__performance_period pp\n        on 1 = 1\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, add_rownum as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , row_number() over(\n            partition by\n                  patient_id\n                , performance_period_begin\n                , performance_period_end\n                , measure_id\n                , measure_name\n              order by\n                  case when evidence_date is null then 1 else 0 end,\n                  evidence_date desc\n                , case when exclusion_date is null then 1 else 0 end,\n                  exclusion_date desc\n          ) as row_num\n    from measure_flags\n\n)\n\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from add_rownum\n    where row_num = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , cast(null as TEXT) as evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0034_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.617203Z", "completed_at": "2024-10-11T23:52:51.643025Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.651800Z", "completed_at": "2024-10-11T23:52:51.651805Z"}], "thread_id": "Thread-6", "execution_time": 0.04644513130187988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm236_exclusions", "compiled": true, "compiled_code": "with frailty as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n  from dev_coco.quality_measures._int_shared_exclusions_frailty\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cqm236__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cqm236__performance_period\n\n)\n\n)\n\n, denominator as (\n\n  select\n      patient_id\n    , age\n  from dev_coco.quality_measures._int_cqm236_denominator\n\n)\n-- advanced illness start\n, advanced_illness_exclusion as (\n\n  select\n    source.*\n  from dev_coco.quality_measures._int_shared_exclusions_advanced_illness as source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where source.exclusion_date\n    between\n      \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cqm236__performance_period\n\n)\n        )\n\n\n      and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cqm236__performance_period\n\n)\n\n)\n\n, acute_inpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'acute_inpatient'\n\n)\n\n, nonacute_outpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'nonacute_outpatient'\n\n)\n\n, acute_inpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from acute_inpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, nonacute_outpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from nonacute_outpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, valid_advanced_illness_exclusions as (\n\n    select\n          acute_inpatient_advanced_illness.patient_id\n        , acute_inpatient_advanced_illness.exclusion_date\n        , acute_inpatient_advanced_illness.exclusion_reason\n        , acute_inpatient_advanced_illness.exclusion_type\n    from acute_inpatient_advanced_illness\n    left join acute_inpatient_counts\n      on acute_inpatient_advanced_illness.patient_id = acute_inpatient_counts.patient_id\n    where acute_inpatient_counts.encounter_count >= 1\n\n    union all\n\n    select\n        nonacute_outpatient_advanced_illness.patient_id\n      , nonacute_outpatient_advanced_illness.exclusion_date\n      , nonacute_outpatient_advanced_illness.exclusion_reason\n      , nonacute_outpatient_advanced_illness.exclusion_type\n    from nonacute_outpatient_advanced_illness\n    left join nonacute_outpatient_counts\n      on nonacute_outpatient_advanced_illness.patient_id = nonacute_outpatient_counts.patient_id\n    where nonacute_outpatient_counts.encounter_count >= 2\n\n\n)\n-- advanced illness end\n\n, valid_dementia_exclusions as (\n\n  select\n      source.patient_id\n    , source.exclusion_date\n    , source.exclusion_reason\n    , source.exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_dementia source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where (\n    source.dispensing_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cqm236__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cqm236__performance_period\n\n)\n    or source.paid_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cqm236__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cqm236__performance_period\n\n)\n    )\n\n)\n\n, valid_hospice_palliative as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_hospice_palliative\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cqm236__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cqm236__performance_period\n\n)\n\n)\n\n, valid_institutional_snp as (\n\n  select \n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_institutional_snp\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_cqm236__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_cqm236__performance_period\n\n)\n\n)\n\n, measure_specific_procedure_observation_exclusion as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n    , age\n  from dev_coco.quality_measures._int_cqm236_exclude_procedures_observations\n\n)\n\n, exclusions as (\n\n    select *\n    from valid_advanced_illness_exclusions\n  \n    union all\n\n    select *\n    from valid_dementia_exclusions\n\n    union all\n\n    select *\n    from valid_hospice_palliative\n\n    union all\n\n    select *\n    from valid_institutional_snp\n\n    union all\n\n    select *\n    from valid_dementia_exclusions\n\n)\n\n, combined_exclusions as (\n\n  select \n      exclusions.*\n    , denominator.age\n  from exclusions\n  inner join denominator\n      on exclusions.patient_id = denominator.patient_id\n\n)\n\n, frailty_exclusion_older_than_80 as (\n\n  select\n      frailty.patient_id\n    , frailty.exclusion_date\n    , frailty.exclusion_reason\n    , 'measure specific exclusion for patients older than 80' as exclusion_type\n    , denominator.age\n  from frailty\n  inner join denominator\n  on frailty.patient_id = denominator.patient_id\n    where denominator.age >= 81\n\n)\n\n, valid_exclusions as (\n\n  select * from combined_exclusions\n  where exclusion_type != 'hospice_palliative'\n    and age >= 66\n\n  union all\n\n  select * from combined_exclusions\n  where exclusion_type = 'hospice_palliative'\n\n  union all\n\n  select * from frailty_exclusion_older_than_80\n\n  union all\n\n  select * from measure_specific_procedure_observation_exclusion\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , 1 as exclusion_flag\n    from valid_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm236_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.636085Z", "completed_at": "2024-10-11T23:52:51.651569Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.659971Z", "completed_at": "2024-10-11T23:52:51.659978Z"}], "thread_id": "Thread-10", "execution_time": 0.052049875259399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm438_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_coco.quality_measures._int_cqm438_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_coco.quality_measures._int_cqm438_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_cqm438_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm438_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.645169Z", "completed_at": "2024-10-11T23:52:51.660819Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.685671Z", "completed_at": "2024-10-11T23:52:51.685679Z"}], "thread_id": "Thread-4", "execution_time": 0.05172991752624512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm48_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_coco.quality_measures._int_cqm48_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_coco.quality_measures._int_cqm48_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_cqm48_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm48_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.653160Z", "completed_at": "2024-10-11T23:52:51.684765Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.696006Z", "completed_at": "2024-10-11T23:52:51.696016Z"}], "thread_id": "Thread-3", "execution_time": 0.060729026794433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0041_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_coco.quality_measures._int_nqf0041_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_coco.quality_measures._int_nqf0041_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_nqf0041_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0041_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.661362Z", "completed_at": "2024-10-11T23:52:51.695689Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.711912Z", "completed_at": "2024-10-11T23:52:51.711923Z"}], "thread_id": "Thread-7", "execution_time": 0.06845688819885254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0053_exclusions_stage_1", "compiled": true, "compiled_code": "with frailty as (\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from dev_coco.quality_measures._int_shared_exclusions_frailty\n    where exclusion_date between (\n  select\n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0053__performance_period\n\n) and (\n  select\n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0053__performance_period\n\n)\n\n)\n\n, frailty_within_defined_window as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n  from dev_coco.quality_measures._int_shared_exclusions_frailty\n  where exclusion_date between\n    \n\n    dateadd(\n        month,\n        -6,\n        (\n  select\n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0053__performance_period\n\n)\n        )\n\n\n    and (\n  select\n    lookback_period_december\n  from dev_coco.quality_measures._int_nqf0053__performance_period\n\n)\n\n)\n\n, valid_hospice_palliative as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n        , exclusion_type\n    from dev_coco.quality_measures._int_shared_exclusions_hospice_palliative\n    where exclusion_date between (\n  select\n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0053__performance_period\n\n) and (\n  select\n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0053__performance_period\n\n)\n\n)\n\n, exclusion_procedure_and_medication as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n        , exclusion_type\n    from dev_coco.quality_measures._int_nqf0053_exclude_procedures_medications\n\n)\n\n, valid_institutional_snp as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_institutional_snp\n  where exclusion_date between\n    \n\n    dateadd(\n        month,\n        -6,\n        (\n  select\n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0053__performance_period\n\n)\n        )\n\n\n\n  and (\n  select\n    lookback_period_december\n  from dev_coco.quality_measures._int_nqf0053__performance_period\n\n)\n\n)\n\n, valid_dementia_exclusions as (\n\n  select\n      source.patient_id\n    , source.exclusion_date\n    , source.exclusion_reason\n    , source.exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_dementia source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where (\n    source.dispensing_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select\n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0053__performance_period\n\n)\n        )\n\n\n          and (\n  select\n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0053__performance_period\n\n)\n    or source.paid_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select\n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0053__performance_period\n\n)\n        )\n\n\n          and (\n  select\n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0053__performance_period\n\n)\n    )\n\n)\n\n-- advanced illness start\n, advanced_illness_exclusion as (\n\n  select\n    source.*\n  from dev_coco.quality_measures._int_shared_exclusions_advanced_illness as source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where source.exclusion_date\n    between\n      \n\n    dateadd(\n        year,\n        -1,\n        (\n  select\n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf0053__performance_period\n\n)\n        )\n\n\n      and (\n  select\n    performance_period_end\n  from dev_coco.quality_measures._int_nqf0053__performance_period\n\n)\n\n)\n\n, acute_inpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'acute_inpatient'\n\n)\n\n, nonacute_outpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'nonacute_outpatient'\n\n)\n\n, acute_inpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from acute_inpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, nonacute_outpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from nonacute_outpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, valid_advanced_illness_exclusions as (\n\n    select\n          acute_inpatient_advanced_illness.patient_id\n        , acute_inpatient_advanced_illness.exclusion_date\n        , acute_inpatient_advanced_illness.exclusion_reason\n        , acute_inpatient_advanced_illness.exclusion_type\n    from acute_inpatient_advanced_illness\n    left join acute_inpatient_counts\n      on acute_inpatient_advanced_illness.patient_id = acute_inpatient_counts.patient_id\n    where acute_inpatient_counts.encounter_count >= 1\n\n    union all\n\n    select\n        nonacute_outpatient_advanced_illness.patient_id\n      , nonacute_outpatient_advanced_illness.exclusion_date\n      , nonacute_outpatient_advanced_illness.exclusion_reason\n      , nonacute_outpatient_advanced_illness.exclusion_type\n    from nonacute_outpatient_advanced_illness\n    left join nonacute_outpatient_counts\n      on nonacute_outpatient_advanced_illness.patient_id = nonacute_outpatient_counts.patient_id\n    where nonacute_outpatient_counts.encounter_count >= 2\n\n\n)\n-- advanced illness end\n\n, frailty_patients_within_defined_window as (\n\n    select\n          frailty_within_defined_window.patient_id\n        , frailty_within_defined_window.exclusion_date\n        , frailty_within_defined_window.exclusion_reason\n        , 'measure specific exclusion for defined window' as exclusion_type\n    from frailty_within_defined_window\n\n)\n\n, exclusions as (\n\n    select * from valid_advanced_illness_exclusions\n\n    union all\n\n    select * from valid_dementia_exclusions\n\n    union all\n\n    select * from valid_institutional_snp\n\n    union all\n\n    select * from valid_hospice_palliative\n\n    union all\n\n    select * from exclusion_procedure_and_medication\n\n    union all\n\n    select * from frailty_patients_within_defined_window\n\n)\n\nselect\n      *\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom exclusions", "relation_name": "dev_coco.quality_measures._int_nqf0053_exclusions_stage_1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.678275Z", "completed_at": "2024-10-11T23:52:51.696940Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.713394Z", "completed_at": "2024-10-11T23:52:51.713399Z"}], "thread_id": "Thread-9", "execution_time": 0.06859111785888672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0097_long", "compiled": true, "compiled_code": "\n\n/* selecting the full patient population as the grain of this table */\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_coco.quality_measures._int_nqf0097_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_coco.quality_measures._int_nqf0097_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_nqf0097_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0097_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.672079Z", "completed_at": "2024-10-11T23:52:51.697192Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.713880Z", "completed_at": "2024-10-11T23:52:51.713884Z"}], "thread_id": "Thread-1", "execution_time": 0.06939435005187988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0059_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_coco.quality_measures._int_nqf0059_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_coco.quality_measures._int_nqf0059_numerator\n    where numerator_flag = 1\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_nqf0059_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0059_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.686158Z", "completed_at": "2024-10-11T23:52:51.712440Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.720048Z", "completed_at": "2024-10-11T23:52:51.720057Z"}], "thread_id": "Thread-2", "execution_time": 0.0678548812866211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclusions", "compiled": true, "compiled_code": "with frailty as (\n\n  select\n    *\n  from dev_coco.quality_measures._int_shared_exclusions_frailty\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf2372__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf2372__performance_period\n\n)\n\n)\n\n, valid_mastectomy_patients as (\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n    from dev_coco.quality_measures._int_nqf2372_exclude_mastectomy\n)\n\n, valid_hospice_palliative as (\n\n  select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_hospice_palliative\n  where lower(exclusion_reason) in \n  (\n        'palliative care encounter'\n      , 'palliative care intervention'\n      , 'hospice care ambulatory'\n      , 'hospice encounter'\n  )\n  and\n  exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf2372__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf2372__performance_period\n\n)\n\n)\n\n, valid_institutional_snp as (\n\n  select \n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_institutional_snp\n  where exclusion_date between (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf2372__performance_period\n\n) and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf2372__performance_period\n\n)\n\n)\n\n, valid_dementia_exclusions as (\n\n  select\n      source.patient_id\n    , source.exclusion_date\n    , source.exclusion_reason\n    , source.exclusion_type\n  from dev_coco.quality_measures._int_shared_exclusions_dementia source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where (\n    source.dispensing_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf2372__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf2372__performance_period\n\n)\n    or source.paid_date\n      between \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf2372__performance_period\n\n)\n        )\n\n\n          and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf2372__performance_period\n\n)\n    )\n\n)\n\n-- advanced illness start\n, advanced_illness_exclusion as (\n\n  select\n    source.*\n  from dev_coco.quality_measures._int_shared_exclusions_advanced_illness as source\n  inner join frailty\n    on source.patient_id = frailty.patient_id\n  where source.exclusion_date\n    between\n      \n\n    dateadd(\n        year,\n        -1,\n        (\n  select \n    performance_period_begin\n  from dev_coco.quality_measures._int_nqf2372__performance_period\n\n)\n        )\n\n\n      and (\n  select \n    performance_period_end\n  from dev_coco.quality_measures._int_nqf2372__performance_period\n\n)\n\n)\n\n, acute_inpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'acute_inpatient'\n\n)\n\n, nonacute_outpatient_advanced_illness as (\n\n  select\n    *\n  from advanced_illness_exclusion\n  where patient_type = 'nonacute_outpatient'\n\n)\n\n, acute_inpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from acute_inpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, nonacute_outpatient_counts as (\n\n    select\n          patient_id\n        , exclusion_type\n        , count(distinct exclusion_date) as encounter_count\n    from nonacute_outpatient_advanced_illness\n    group by patient_id, exclusion_type\n\n)\n\n, valid_advanced_illness_exclusions as (\n\n    select\n          acute_inpatient_advanced_illness.patient_id\n        , acute_inpatient_advanced_illness.exclusion_date\n        , acute_inpatient_advanced_illness.exclusion_reason\n        , acute_inpatient_advanced_illness.exclusion_type\n    from acute_inpatient_advanced_illness\n    left join acute_inpatient_counts\n      on acute_inpatient_advanced_illness.patient_id = acute_inpatient_counts.patient_id\n    where acute_inpatient_counts.encounter_count >= 1\n\n    union all\n\n    select\n        nonacute_outpatient_advanced_illness.patient_id\n      , nonacute_outpatient_advanced_illness.exclusion_date\n      , nonacute_outpatient_advanced_illness.exclusion_reason\n      , nonacute_outpatient_advanced_illness.exclusion_type\n    from nonacute_outpatient_advanced_illness\n    left join nonacute_outpatient_counts\n      on nonacute_outpatient_advanced_illness.patient_id = nonacute_outpatient_counts.patient_id\n    where nonacute_outpatient_counts.encounter_count >= 2\n\n)\n-- advanced illness end\n\n, valid_mastectomy_patients_with_exclusion_type as (\n\n    select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n      , 'mastectomy_performed' as exclusion_type\n    from valid_mastectomy_patients\n)\n\n, exclusions as (\n\n    select * from valid_advanced_illness_exclusions\n\n    union all\n\n    select * from valid_dementia_exclusions\n\n    union all\n\n    select * from valid_institutional_snp\n\n    union all\n\n    select * from valid_hospice_palliative\n\n)\n\n, combined_exclusions as (\n\n    select \n      exclusions.*\n    , denominator.age\n    from exclusions\n    inner join dev_coco.quality_measures._int_nqf2372_denominator denominator\n      on exclusions.patient_id = denominator.patient_id\n\n)\n\n, valid_exclusions as (\n\n  select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n      , exclusion_type\n  from combined_exclusions\n  where exclusion_type != 'hospice_palliative' \n    and age >= 66\n\n  union all\n\n  select\n        patient_id\n      , exclusion_date\n      , exclusion_reason\n      , exclusion_type\n  from combined_exclusions\n  where exclusion_type = 'hospice_palliative'\n\n)\n\n, valid_exclusions_with_mastectomy as (\n\n    select *\n    from valid_exclusions\n\n    union all\n\n    select *\n    from valid_mastectomy_patients_with_exclusion_type\n\n)\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , 1 as exclusion_flag\n    from valid_exclusions_with_mastectomy\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf2372_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.704342Z", "completed_at": "2024-10-11T23:52:51.720587Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.727961Z", "completed_at": "2024-10-11T23:52:51.727969Z"}], "thread_id": "Thread-8", "execution_time": 0.04361891746520996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0420_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_coco.quality_measures._int_nqf0420_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_coco.quality_measures._int_nqf0420_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_nqf0420_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0420_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.698126Z", "completed_at": "2024-10-11T23:52:51.721169Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.729067Z", "completed_at": "2024-10-11T23:52:51.729073Z"}], "thread_id": "Thread-5", "execution_time": 0.05747389793395996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__ed_classification", "compiled": true, "compiled_code": "\n\nWITH cte AS\n(\n    SELECT DISTINCT location_id, npi, name\n    FROM dev_coco.core.location\n)\n\nSELECT\n    e.encounter_id,\n    case when s.encounter_id is null then 'Not Classified' else s.ed_classification_description end as ed_classification_description,\n    CASE\n        when s.encounter_id is null then 'Non-Avoidable'\n        when cast(s.ed_classification_order as int) <= 3 then s.ed_classification_description\n        ELSE 'Non-Avoidable' END AS avoidable_category,\n    e.paid_amount,\n    e.primary_diagnosis_code,\n    e.primary_diagnosis_description,\n    e.primary_diagnosis_code || ' | ' || e.primary_diagnosis_description as primary_diagnosis_and_description,\n    p.ccsr_parent_category,\n    p.ccsr_category,\n    p.ccsr_category_description,\n    p.ccsr_category || ' | ' || p.ccsr_category_description as ccsr_parent_category_and_description,\n    b.body_system,\n    e.facility_id,\n    e.allowed_amount,\n    e.charge_amount,\n    e.data_source,\n    e.length_of_stay,\n    e.discharge_disposition_code || ' | ' || e.discharge_disposition_description as discharge_code_and_description,\n    e.patient_id || ' | ' || e.data_source as patient_source_key,\n    e.facility_name,\n    e.encounter_start_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.encounter e\nleft join dev_coco.ed_classification.summary s on e.encounter_id = s.encounter_id\nleft join cte on e.facility_id = cte.location_id\nleft join dev_coco.ccsr.dx_vertical_pivot as p\n  on e.primary_diagnosis_code = p.code\n  and p.ccsr_category_rank = 1\nleft join dev_coco.ccsr._value_set_dxccsr_v2023_1_body_systems b on p.ccsr_parent_category = b.ccsr_parent_category\nwhere e.encounter_type = 'emergency department'", "relation_name": "dev_coco.data_quality.mart_review__ed_classification"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.714353Z", "completed_at": "2024-10-11T23:52:51.728466Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.736564Z", "completed_at": "2024-10-11T23:52:51.736572Z"}], "thread_id": "Thread-6", "execution_time": 0.051277875900268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_01_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_coco.ahrq_measures._value_set_pqi as pqi\n  on e.primary_diagnosis_code = pqi.code\n  and pqi.value_set_name = 'diabetes_with_short-term_complications_diagnosis_codes'\n  and pqi.pqi_number = '01'\ninner join dev_coco.ahrq_measures._int_pqi_01_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_coco.ahrq_measures._int_pqi_01_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_coco.ahrq_measures._int_pqi_01_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.721432Z", "completed_at": "2024-10-11T23:52:51.735311Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.742695Z", "completed_at": "2024-10-11T23:52:51.742703Z"}], "thread_id": "Thread-10", "execution_time": 0.04617905616760254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_03_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_coco.ahrq_measures._value_set_pqi as pqi\n  on e.primary_diagnosis_code = pqi.code\n  and pqi.value_set_name = 'diabetes_with_long-term_complications_diagnosis_codes'\n  and pqi.pqi_number = '03'\ninner join dev_coco.ahrq_measures._int_pqi_03_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_coco.ahrq_measures._int_pqi_03_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_coco.ahrq_measures._int_pqi_03_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.730213Z", "completed_at": "2024-10-11T23:52:51.749877Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.764645Z", "completed_at": "2024-10-11T23:52:51.764653Z"}], "thread_id": "Thread-4", "execution_time": 0.045607805252075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_05_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_coco.ahrq_measures._int_pqi_05_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_coco.ahrq_measures._value_set_pqi as copd\n  on e.primary_diagnosis_code = copd.code\n  and copd.value_set_name = 'chronic_obstructive_pulmonary_disorder'\n  and copd.pqi_number = '05'\nleft join dev_coco.ahrq_measures._value_set_pqi asthma\n  on e.primary_diagnosis_code = asthma.code\n  and asthma.value_set_name = 'asthma'\n  and asthma.pqi_number = '05'\nleft join dev_coco.ahrq_measures._int_pqi_05_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null\n  and (\n    asthma.code is not null \n    or copd.code is not null\n    )", "relation_name": "dev_coco.ahrq_measures._int_pqi_05_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.737070Z", "completed_at": "2024-10-11T23:52:51.759174Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.765848Z", "completed_at": "2024-10-11T23:52:51.765854Z"}], "thread_id": "Thread-3", "execution_time": 0.04504704475402832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_07_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_coco.ahrq_measures._value_set_pqi as hyp\n  on e.primary_diagnosis_code = hyp.code\n  and hyp.value_set_name = 'hypertension_diagnosis_codes'\n  and hyp.pqi_number = '07'\ninner join dev_coco.ahrq_measures._int_pqi_07_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_coco.ahrq_measures._int_pqi_07_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_coco.ahrq_measures._int_pqi_07_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.743200Z", "completed_at": "2024-10-11T23:52:51.765143Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.787596Z", "completed_at": "2024-10-11T23:52:51.787603Z"}], "thread_id": "Thread-7", "execution_time": 0.060426950454711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_08_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_coco.ahrq_measures._value_set_pqi as hyp\n  on e.primary_diagnosis_code = hyp.code\n  and hyp.value_set_name = 'heart_failure_diagnosis_codes'\n  and hyp.pqi_number = '08'\ninner join dev_coco.ahrq_measures._int_pqi_08_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_coco.ahrq_measures._int_pqi_08_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_coco.ahrq_measures._int_pqi_08_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.754523Z", "completed_at": "2024-10-11T23:52:51.766295Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.788633Z", "completed_at": "2024-10-11T23:52:51.788638Z"}], "thread_id": "Thread-1", "execution_time": 0.05878019332885742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_12_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_coco.ahrq_measures._value_set_pqi as hyp\n  on e.primary_diagnosis_code = hyp.code\n  and hyp.value_set_name = 'urinary_tract_infection_diagnosis_codes'\n  and hyp.pqi_number = '12'\ninner join dev_coco.ahrq_measures._int_pqi_12_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_coco.ahrq_measures._int_pqi_12_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_coco.ahrq_measures._int_pqi_12_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.750120Z", "completed_at": "2024-10-11T23:52:51.766537Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.789100Z", "completed_at": "2024-10-11T23:52:51.789104Z"}], "thread_id": "Thread-9", "execution_time": 0.059564828872680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_11_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_coco.ahrq_measures._value_set_pqi as hyp\n  on e.primary_diagnosis_code = hyp.code\n  and hyp.value_set_name = 'community_acquired_bacterial_pneumonia_diagnosis_codes'\n  and hyp.pqi_number = '11'\ninner join dev_coco.ahrq_measures._int_pqi_11_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_coco.ahrq_measures._int_pqi_11_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_coco.ahrq_measures._int_pqi_11_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.759435Z", "completed_at": "2024-10-11T23:52:51.777983Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.795948Z", "completed_at": "2024-10-11T23:52:51.795956Z"}], "thread_id": "Thread-2", "execution_time": 0.060151100158691406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_14_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_coco.ahrq_measures._value_set_pqi as hyp\n  on e.primary_diagnosis_code = hyp.code\n  and hyp.value_set_name = 'uncontrolled_diabetes_diagnosis_codes'\n  and hyp.pqi_number = '14'\ninner join dev_coco.ahrq_measures._int_pqi_14_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_coco.ahrq_measures._int_pqi_14_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_coco.ahrq_measures._int_pqi_14_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.766797Z", "completed_at": "2024-10-11T23:52:51.802300Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.808555Z", "completed_at": "2024-10-11T23:52:51.808561Z"}], "thread_id": "Thread-8", "execution_time": 0.059808969497680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_15_num", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_coco.ahrq_measures._value_set_pqi as hyp\n  on e.primary_diagnosis_code = hyp.code\n  and hyp.value_set_name = 'asthma_diagnosis_codes'\n  and hyp.pqi_number = '15'\ninner join dev_coco.ahrq_measures._int_pqi_15_denom as denom\n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\nleft join dev_coco.ahrq_measures._int_pqi_15_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_coco.ahrq_measures._int_pqi_15_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.771519Z", "completed_at": "2024-10-11T23:52:51.807825Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.809888Z", "completed_at": "2024-10-11T23:52:51.809892Z"}], "thread_id": "Thread-5", "execution_time": 0.06038784980773926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__int_pqi_16_num", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__ahrq_measures__stg_pqi_condition as (\n\n\nselect \n    normalized_code_type\n  , normalized_code\n  , encounter_id\n  , data_source\nfrom \n    dev_coco.core.condition\n),  __dbt__cte__ahrq_measures__stg_pqi_procedure as (\n\n\nselect \n    normalized_code_type\n  , normalized_code\n  , encounter_id\n  , data_source\nfrom \n    dev_coco.core.procedure\n), diagnosis as (\n    select distinct\n        c.encounter_id\n      , c.data_source\n    from __dbt__cte__ahrq_measures__stg_pqi_condition as c\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi\n      on c.normalized_code = pqi.code\n      and c.normalized_code_type = 'icd-10-cm'\n      and pqi.value_set_name = 'diabetes_diagnosis_codes'\n      and pqi_number = '16'\n    where c.encounter_id is not null\n),\n\n\nprocedures as (\n    select distinct\n        p.encounter_id\n      , p.data_source\n    from __dbt__cte__ahrq_measures__stg_pqi_procedure as p\n    inner join diagnosis as d \n      on p.encounter_id = d.encounter_id\n      and d.data_source = p.data_source\n    inner join dev_coco.ahrq_measures._value_set_pqi as pqi\n      on p.normalized_code = pqi.code\n      and p.normalized_code_type = 'icd-10-pcs'\n      and pqi.value_set_name = 'lower-extremity_amputation_procedure_codes'\n      and pqi_number = '16'\n)\n\nselect\n    e.data_source\n  , e.patient_id\n  , e.year_number\n  , e.encounter_id\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._stg_pqi_inpatient_encounter as e\ninner join dev_coco.ahrq_measures._int_pqi_16_denom as denom \n  on e.patient_id = denom.patient_id\n  and e.data_source = denom.data_source\n  and e.year_number = denom.year_number\n    inner join procedures as p\n  on e.encounter_id = p.encounter_id\n  and e.data_source = p.data_source\nleft join dev_coco.ahrq_measures._int_pqi_16_exclusions as shared\n  on e.encounter_id = shared.encounter_id\n  and e.data_source = shared.data_source\nwhere shared.encounter_id is null", "relation_name": "dev_coco.ahrq_measures._int_pqi_16_num"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.789647Z", "completed_at": "2024-10-11T23:52:51.809331Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.816962Z", "completed_at": "2024-10-11T23:52:51.816968Z"}], "thread_id": "Thread-6", "execution_time": 0.05298495292663574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__pqi_exclusion_long", "compiled": true, "compiled_code": "\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 1 as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_01_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 3 as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_03_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 5 as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_05_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 7 as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_07_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 8 as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_08_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 11 as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_11_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 12 as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_12_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 14 as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_14_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 15 as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_15_exclusions as e\n\nunion all\n\nselect\n    e.data_source\n  , e.encounter_id\n  , e.exclusion_reason\n  , e.exclusion_number\n  , 16 as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_16_exclusions as e", "relation_name": "dev_coco.ahrq_measures.pqi_exclusion_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.802900Z", "completed_at": "2024-10-11T23:52:51.816381Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.822598Z", "completed_at": "2024-10-11T23:52:51.822604Z"}], "thread_id": "Thread-10", "execution_time": 0.05718183517456055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__index_admission", "compiled": true, "compiled_code": "\n\n-- Here we list all index admissions for the hospital wide readmissions\n-- measure.\n-- These represent encounter_ids that meet the requirements to be an\n-- index admission for the HWR measure.\n-- These are the requirements for a hospitalization to be an index admission\n-- for the HWR measure:\n--\n--     Time Requirement: The discharge data must be at least 30 days\n--                       earlier than the last dischareg date available\n--                       in the dataset.\n-- \n--     Discharge Requirements: The patient must not be discharged to another\n--                             acute care hospital; the patient must not have\n--                             left against medical advice; and the patient\n--                             must be alive at discharge.\n--\n--     Diagnosis Requirements: Exclude encounters where based on the CCS\n--     (exclusions)            diagnosis category we know the encounter was\n--                             for medical treatment of cancer, rehabilitation,\n--                             or psychiatric reasons.\n\n\n\nselect distinct a.encounter_id, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.readmissions._int_encounter a\ninner join dev_coco.readmissions._int_index_time_requirement b\n    on a.encounter_id = b.encounter_id\ninner join dev_coco.readmissions._int_index_discharge_requirement c\n    on a.encounter_id = c.encounter_id\nleft join dev_coco.readmissions._int_exclusion d\n    on a.encounter_id = d.encounter_id\nwhere d.encounter_id is null", "relation_name": "dev_coco.readmissions._int_index_admission"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.810338Z", "completed_at": "2024-10-11T23:52:51.830003Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.831137Z", "completed_at": "2024-10-11T23:52:51.831143Z"}], "thread_id": "Thread-4", "execution_time": 0.029221057891845703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_cqm236_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_coco.quality_measures._int_cqm236_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , observation_date\n    from dev_coco.quality_measures._int_cqm236_numerator\n    where numerator_flag = 1\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_cqm236_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.observation_date\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.observation_date is null then 1 else 0 end,\n                  numerator.observation_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , observation_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(observation_date as date) as evidence_date\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , cast(null as TEXT) as evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_cqm236_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.817438Z", "completed_at": "2024-10-11T23:52:51.830798Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.832176Z", "completed_at": "2024-10-11T23:52:51.832180Z"}], "thread_id": "Thread-3", "execution_time": 0.024785757064819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0053_exclusions", "compiled": true, "compiled_code": "\n\nwith\n\ncombined_exclusions as (\n\n  select\n      exclusions.*\n    , denominator.age\n  from dev_coco.quality_measures._int_nqf0053_exclusions_stage_1 as exclusions\n  inner join dev_coco.quality_measures._int_nqf0053_denominator as denominator\n      on exclusions.patient_id = denominator.patient_id\n\n)\n\n, valid_exclusions as (\n\n    select\n        *\n    from combined_exclusions\n    where exclusion_type = 'institutional_snp'\n    and age >= 66\n\n    union all\n\n    select\n        *\n    from combined_exclusions\n    where exclusion_type in\n    (\n        'advanced_illness'\n      , 'dementia'\n    )\n    and age between 66 and 80\n\n    union all\n\n    select\n      *\n    from combined_exclusions\n    where exclusion_type = 'measure specific exclusion for defined window'\n    and age >= 81\n\n    union all\n\n    select\n        *\n    from combined_exclusions\n    where exclusion_type in\n    (\n        'measure specific exclusion for procedure medication'\n      , 'hospice_palliative'\n    )\n\n)\n\n\n, add_data_types as (\n\n    select\n        distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , 1 as exclusion_flag\n    from valid_exclusions\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0053_exclusions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.823100Z", "completed_at": "2024-10-11T23:52:51.832660Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.845268Z", "completed_at": "2024-10-11T23:52:51.845274Z"}], "thread_id": "Thread-7", "execution_time": 0.03632521629333496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_coco.quality_measures._int_nqf2372_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , numerator_flag\n    from dev_coco.quality_measures._int_nqf2372_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n        , exclusion_flag\n    from dev_coco.quality_measures._int_nqf2372_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then denominator.denominator_flag\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null\n            then numerator.numerator_flag\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null\n            then exclusions.exclusion_flag\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, add_rownum as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , row_number() over(\n            partition by\n                  patient_id\n                , performance_period_begin\n                , performance_period_end\n                , measure_id\n                , measure_name\n                order by\n                    case when evidence_date is null then 1 else 0 end,\n                    evidence_date desc\n                  , case when exclusion_date is null then 1 else 0 end,\n                    exclusion_date desc\n          ) as row_num\n    from measure_flags\n\n)\n\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from add_rownum\n    where row_num = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , cast(null as TEXT) as evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf2372_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.833233Z", "completed_at": "2024-10-11T23:52:51.852102Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.858166Z", "completed_at": "2024-10-11T23:52:51.858174Z"}], "thread_id": "Thread-1", "execution_time": 0.02788996696472168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__pqi_num_long", "compiled": true, "compiled_code": "\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '01' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_01_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '03' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_03_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '05' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_05_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '07' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_07_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '08' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_08_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '11' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_11_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '12' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_12_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '14' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_14_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '15' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_15_num as n\n\nunion all\n\nselect\n    n.data_source\n  , n.patient_id\n  , n.year_number\n  , n.encounter_id\n  , '16' as pqi_number\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures._int_pqi_16_num as n", "relation_name": "dev_coco.ahrq_measures.pqi_num_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.846797Z", "completed_at": "2024-10-11T23:52:51.858659Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.859124Z", "completed_at": "2024-10-11T23:52:51.859129Z"}], "thread_id": "Thread-2", "execution_time": 0.026250123977661133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_augmented", "compiled": true, "compiled_code": "\n\n-- Here we list all encounters from the stg_encounter model\n-- and we augment them with extra fields\n-- that are relevant for readmission measures\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_id,\n    aa.ms_drg_code,\n    aa.paid_amount,\n    datediff(\n        day,\n        aa.admit_date,\n        aa.discharge_date\n        ) as length_of_stay,\n    case\n        when bb.encounter_id is not null then 1\n\t    else 0\n    end as index_admission_flag,\n    case\n        when cc.encounter_id is not null then 1\n\t    else 0\n    end as planned_flag,\n    dd.specialty_cohort,\n    case\n        when aa.discharge_disposition_code = '20' then 1\n\t    else 0\n    end as died_flag,\n    ee.diagnosis_ccs,\n    ee.disqualified_encounter_flag,\n    ee.missing_admit_date_flag,\n    ee.missing_discharge_date_flag,\n    ee.admit_after_discharge_flag,\n    ee.missing_discharge_disposition_code_flag,\n    ee.invalid_discharge_disposition_code_flag,\n    ee.missing_primary_diagnosis_flag,\n    ee.invalid_primary_diagnosis_code_flag,\n    ee.no_diagnosis_ccs_flag,\n    ee.overlaps_with_another_encounter_flag,\n    ee.missing_ms_drg_flag,\n    ee.invalid_ms_drg_flag,\n    '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom\n    dev_coco.readmissions._int_encounter aa\n    left join dev_coco.readmissions._int_index_admission bb\n    on aa.encounter_id = bb.encounter_id\n    left join dev_coco.readmissions._int_planned_encounter cc\n    on aa.encounter_id = cc.encounter_id \n    left join dev_coco.readmissions._int_encounter_specialty_cohort dd\n    on aa.encounter_id = dd.encounter_id\n    left join dev_coco.readmissions._int_encounter_data_quality ee\n    on aa.encounter_id = ee.encounter_id", "relation_name": "dev_coco.readmissions.encounter_augmented"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.852372Z", "completed_at": "2024-10-11T23:52:51.860241Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.861313Z", "completed_at": "2024-10-11T23:52:51.861318Z"}], "thread_id": "Thread-5", "execution_time": 0.01491093635559082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0053_long", "compiled": true, "compiled_code": "\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from dev_coco.quality_measures._int_nqf0053_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n        , evidence_value\n    from dev_coco.quality_measures._int_nqf0053_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from dev_coco.quality_measures._int_nqf0053_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          denominator.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null and denominator.patient_id is not null\n            then 1\n            when denominator.patient_id is not null\n            then 0\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , numerator.evidence_value\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , (row_number() over(\n            partition by\n                  denominator.patient_id\n                , denominator.performance_period_begin\n                , denominator.performance_period_end\n                , denominator.measure_id\n                , denominator.measure_name\n              order by\n                  case when numerator.evidence_date is null then 1 else 0 end,\n                  numerator.evidence_date desc\n                , case when exclusions.exclusion_date is null then 1 else 0 end,\n                  exclusions.exclusion_date desc\n          )) as rn\n    from denominator\n        left join numerator\n            on denominator.patient_id = numerator.patient_id\n        left join exclusions\n            on denominator.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , evidence_value\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from measure_flags\n    where rn = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures._int_nqf0053_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.862143Z", "completed_at": "2024-10-11T23:52:51.873210Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.878683Z", "completed_at": "2024-10-11T23:52:51.878690Z"}], "thread_id": "Thread-6", "execution_time": 0.018834829330444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__pqi_rate", "compiled": true, "compiled_code": "\n\nwith num as (\n    select\n        data_source\n      , year_number\n      , pqi_number\n      , count(encounter_id) as num_count\n    from dev_coco.ahrq_measures.pqi_num_long\n    group by\n        data_source\n      , year_number\n      , pqi_number\n)\n\n, denom as (\n    select\n        data_source\n      , year_number\n      , pqi_number\n      , count(patient_id) as denom_count\n    from dev_coco.ahrq_measures.pqi_denom_long as d\n    group by\n        data_source\n      , year_number\n      , pqi_number\n)\n\nselect\n    d.data_source\n  , d.year_number\n  , d.pqi_number\n  , d.denom_count\n  , coalesce(num.num_count, 0) as num_count\n  , coalesce(num.num_count, 0) / d.denom_count * 100000 as rate_per_100_thousand\n  , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom denom as d\nleft join num\n    on d.pqi_number = num.pqi_number\n    and d.year_number = num.year_number\n    and d.data_source = num.data_source", "relation_name": "dev_coco.ahrq_measures.pqi_rate"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.867490Z", "completed_at": "2024-10-11T23:52:51.888148Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.888842Z", "completed_at": "2024-10-11T23:52:51.888850Z"}], "thread_id": "Thread-10", "execution_time": 0.02717304229736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ahrq_measures__pqi_summary", "compiled": true, "compiled_code": "\n\nselect p.pqi_number\n , m.pqi_name\n , e.year_number\n , e.encounter_id\n , e.data_source\n , e.patient_id\n , e.facility_id\n , e.ms_drg_code\n , e.ms_drg_description\n , e.encounter_start_date\n , e.encounter_end_date\n , e.length_of_stay\n , e.paid_amount\n , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.ahrq_measures.pqi_num_long p \ninner join dev_coco.ahrq_measures._stg_pqi_inpatient_encounter e\n    on p.encounter_id = e.encounter_id\n    and p.data_source = e.data_source\ninner join dev_coco.ahrq_measures._value_set_pqi_measures m on cast(p.pqi_number as TEXT)  = m.pqi_number", "relation_name": "dev_coco.ahrq_measures.pqi_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.873461Z", "completed_at": "2024-10-11T23:52:51.889376Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.890010Z", "completed_at": "2024-10-11T23:52:51.890015Z"}], "thread_id": "Thread-4", "execution_time": 0.02385997772216797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__readmission_summary", "compiled": true, "compiled_code": "\n\n-- Here calculate days to readmission for encounters\n-- that had a readmission and create readmission flags\n\n\n-- We create the encounter_sequence integer count\n-- which keeps track of what number of encounter each\n-- encounter is for a given patient\nwith encounter_sequence as (\nselect\n    *,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_seq\nfrom dev_coco.readmissions.encounter_augmented\nwhere disqualified_encounter_flag = 0\n),\n\n\nreadmission_calc as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_id,\n    aa.ms_drg_code,\n    aa.paid_amount,\n    aa.length_of_stay,\n    aa.index_admission_flag,\n    aa.planned_flag,\n    aa.specialty_cohort,\n    aa.died_flag,\n    aa.diagnosis_ccs,\n    case\n        when bb.encounter_id is not null then 1\n\t    else 0\n    end as had_readmission_flag,\n    datediff(\n        day,\n        aa.discharge_date,\n        bb.admit_date\n        ) as days_to_readmit,\n    case\n        when (datediff(\n        day,\n        aa.discharge_date,\n        bb.admit_date\n        )) <= 30  then 1\n\t    else 0\n    end as readmit_30_flag,\n    case\n        when\n\t    ((datediff(\n        day,\n        aa.discharge_date,\n        bb.admit_date\n        )) <= 30) and (bb.planned_flag = 0) then 1\n\t    else 0\n    end as unplanned_readmit_30_flag,\n    bb.encounter_id as readmission_encounter_id,\n    bb.admit_date as readmission_admit_date,\n    bb.discharge_date as readmission_discharge_date,\n    bb.discharge_disposition_code as readmission_discharge_disposition_code,\n    bb.facility_id as readmission_facility,\n    bb.ms_drg_code as readmission_ms_drg,\n    bb.length_of_stay as readmission_length_of_stay,\n    bb.index_admission_flag as readmission_index_admission_flag,\n    bb.planned_flag as readmission_planned_flag,\n    bb.specialty_cohort as readmission_specialty_cohort,\n    bb.died_flag as readmission_died_flag,\n    bb.diagnosis_ccs as readmission_diagnosis_ccs,\n    '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom\n    encounter_sequence aa\n    left join encounter_sequence bb\n    on aa.patient_id = bb.patient_id\n    and aa.encounter_seq + 1 = bb.encounter_seq\n)\n\nselect *\nfrom readmission_calc", "relation_name": "dev_coco.readmissions.readmission_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.892046Z", "completed_at": "2024-10-11T23:52:51.896116Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:51.896418Z", "completed_at": "2024-10-11T23:52:51.896426Z"}], "thread_id": "Thread-1", "execution_time": 0.005115985870361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__readmissions", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM dev_coco.readmissions.readmission_summary\nWHERE index_admission_flag = 1", "relation_name": "dev_coco.data_quality.mart_review__readmissions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:51.879221Z", "completed_at": "2024-10-11T23:52:54.931597Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:54.931889Z", "completed_at": "2024-10-11T23:52:54.931899Z"}], "thread_id": "Thread-9", "execution_time": 3.247654914855957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__summary_long", "compiled": true, "compiled_code": "\n\n/* measures should already be at the full eligibility population grain */\nwith  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom dev_coco.core.patient\n), union_measures as (\n\n    \n\n        (\n            select\n                cast('dev_coco.quality_measures._int_nqf2372_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.quality_measures._int_nqf2372_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.quality_measures._int_nqf0034_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.quality_measures._int_nqf0034_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.quality_measures._int_nqf0059_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.quality_measures._int_nqf0059_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.quality_measures._int_cqm236_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.quality_measures._int_cqm236_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.quality_measures._int_nqf0053_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.quality_measures._int_nqf0053_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.quality_measures._int_cbe0055_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.quality_measures._int_cbe0055_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.quality_measures._int_nqf0097_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.quality_measures._int_nqf0097_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.quality_measures._int_cqm438_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.quality_measures._int_cqm438_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.quality_measures._int_nqf0041_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.quality_measures._int_nqf0041_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.quality_measures._int_cbe0101_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.quality_measures._int_cbe0101_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.quality_measures._int_cqm48_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.quality_measures._int_cqm48_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.quality_measures._int_cqm130_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.quality_measures._int_cqm130_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.quality_measures._int_nqf0420_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.quality_measures._int_nqf0420_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.quality_measures._int_adh_diabetes_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.quality_measures._int_adh_diabetes_long\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('dev_coco.quality_measures._int_adhras_long' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"PATIENT_ID\" as character varying(16777216)) as \"PATIENT_ID\" ,\n                    cast(\"DENOMINATOR_FLAG\" as NUMBER(38,0)) as \"DENOMINATOR_FLAG\" ,\n                    cast(\"NUMERATOR_FLAG\" as NUMBER(38,0)) as \"NUMERATOR_FLAG\" ,\n                    cast(\"EXCLUSION_FLAG\" as NUMBER(38,0)) as \"EXCLUSION_FLAG\" ,\n                    cast(\"EVIDENCE_DATE\" as DATE) as \"EVIDENCE_DATE\" ,\n                    cast(\"EVIDENCE_VALUE\" as character varying(16777216)) as \"EVIDENCE_VALUE\" ,\n                    cast(\"EXCLUSION_DATE\" as DATE) as \"EXCLUSION_DATE\" ,\n                    cast(\"EXCLUSION_REASON\" as character varying(16777216)) as \"EXCLUSION_REASON\" ,\n                    cast(\"PERFORMANCE_PERIOD_BEGIN\" as DATE) as \"PERFORMANCE_PERIOD_BEGIN\" ,\n                    cast(\"PERFORMANCE_PERIOD_END\" as DATE) as \"PERFORMANCE_PERIOD_END\" ,\n                    cast(\"MEASURE_ID\" as character varying(16777216)) as \"MEASURE_ID\" ,\n                    cast(\"MEASURE_NAME\" as character varying(16777216)) as \"MEASURE_NAME\" ,\n                    cast(\"MEASURE_VERSION\" as character varying(16777216)) as \"MEASURE_VERSION\" ,\n                    cast(\"TUVA_LAST_RUN\" as character varying(32)) as \"TUVA_LAST_RUN\" \n\n            from dev_coco.quality_measures._int_adhras_long\n\n            \n        )\n\n        \n\n)\n\n, patient as (\n\n    select distinct patient_id\n    from __dbt__cte__quality_measures__stg_core__patient\n\n)\n\n/* selecting the full patient population as the grain of this table */\n, joined as (\n\n    select distinct\n          patient.patient_id\n        , union_measures.denominator_flag\n        , union_measures.numerator_flag\n        , union_measures.exclusion_flag\n        , case\n            when union_measures.exclusion_flag = 1 then null\n            when union_measures.numerator_flag = 1 then 1\n            when union_measures.denominator_flag = 1 then 0\n            else null\n          end as performance_flag\n        , union_measures.evidence_date\n        , union_measures.evidence_value\n        , union_measures.exclusion_date\n        , union_measures.exclusion_reason\n        , union_measures.performance_period_begin\n        , union_measures.performance_period_end\n        , union_measures.measure_id\n        , union_measures.measure_name\n        , union_measures.measure_version\n    from patient\n        left join union_measures\n            on patient.patient_id = union_measures.patient_id\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(performance_flag as integer) as performance_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(evidence_value as TEXT) as evidence_value\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from joined\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , performance_flag\n    , evidence_date\n    , evidence_value\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures.summary_long"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:55.132871Z", "completed_at": "2024-10-11T23:52:55.171888Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:55.172353Z", "completed_at": "2024-10-11T23:52:55.172366Z"}], "thread_id": "Thread-8", "execution_time": 0.04698610305786133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__analytics_populated", "compiled": true, "compiled_code": "\n\nwith tuva_chronic_condition_long as (\n  select\n      'tuva_chronic_condition_long' as table_name\n    , count(*) as record_count\n  from dev_coco.chronic_conditions.tuva_chronic_conditions_long\n)\n\n, cms_hcc_patient_risk_factors as (\n  select\n      'cms_hcc__patient_risk_factors' as table_name\n    , count(*) as record_count\n  from dev_coco.cms_hcc.patient_risk_factors\n)\n\n, service_category_grouper as (\n  select\n      'service_category__service_category_grouper' as table_name\n    , count(*) as record_count\n  from dev_coco.claims_preprocessing.service_category_grouper\n)\n\n, financial_pmpm_payer as (\n  select\n      'financial_pmpm__pmpm_payer' as table_name\n    , count(*) as record_count\n  from dev_coco.financial_pmpm.pmpm_payer\n)\n\n, readmission_summary as (\n  select\n      'readmissions__readmission_summary' as table_name\n    , count(*) as record_count\n  from dev_coco.readmissions.readmission_summary\n)\n\n, quality_measures_summary_long as (\n  select\n      'quality_measures__summary_long' as table_name\n    , count(*) as record_count\n  from dev_coco.quality_measures.summary_long\n)\n\n, acute_inpatient_visits as (\n  select\n      'acute_inpatient_visits' as table_name\n    , count(*) as record_count\n  from dev_coco.core.encounter\n  where encounter_type = 'acute inpatient'\n)\n\n, ed_visits as (\n  select\n      'ed_visits' as table_name\n    , count(*) as record_count\n  from dev_coco.core.encounter\n  where encounter_type = 'emergency department'\n)\n\n,final as (\nselect * from tuva_chronic_condition_long\nunion all\nselect * from cms_hcc_patient_risk_factors\nunion all\nselect * from service_category_grouper\nunion all\nselect * from financial_pmpm_payer\nunion all\nselect * from readmission_summary\nunion all\nselect * from quality_measures_summary_long\nunion all\nselect * from acute_inpatient_visits\nunion all\nselect * from ed_visits\n)\n\nselect *\n, '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom final", "relation_name": "dev_coco.data_quality.analytics_populated"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:55.164498Z", "completed_at": "2024-10-11T23:52:55.173271Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:55.173664Z", "completed_at": "2024-10-11T23:52:55.173670Z"}], "thread_id": "Thread-7", "execution_time": 0.04317784309387207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__summary_wide", "compiled": true, "compiled_code": "\n\n/*\n    Each measure is pivoted into a boolean column by evaluating the\n    denominator, numerator, and exclusion flags.\n*/\nwith measures_long as (\n\n        select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , performance_flag\n        , measure_id\n    from dev_coco.quality_measures.summary_long\n\n)\n\n, nqf_2372 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'NQF2372'\n\n)\n\n, nqf_0034 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'NQF0034'\n\n)\n\n, nqf_0059 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'NQF0059'\n\n)\n\n, cqm_236 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'CQM236'\n\n)\n\n, nqf_0053 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'NQF0053'\n\n)\n\n, cbe_0055 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'CBE0055'\n\n)\n\n, nqf_0097 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'NQF0097'\n\n)\n\n, cqm_438 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'CQM438'\n\n)\n\n, nqf_0041 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'NQF0041'\n\n)\n\n, cbe_0101 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'CBE0101'\n\n)\n\n, cqm_48 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'CQM48'\n\n)\n\n, cqm_130 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'CQM130'\n\n)\n\n, nqf_0420 as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'NQF0420'\n\n)\n\n, adh_diabetes as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'ADH-Diabetes'\n\n)\n\n, adh_ras as (\n\n    select\n          patient_id\n        , performance_flag\n    from measures_long\n    where measure_id = 'ADH-RAS'\n    \n)\n\n, joined as (\n\n    select\n          measures_long.patient_id\n        , max(nqf_2372.performance_flag) as nqf_2372\n        , max(nqf_0034.performance_flag) as nqf_0034\n        , max(nqf_0059.performance_flag) as nqf_0059\n        , max(cqm_236.performance_flag) as cqm_236\n        , max(nqf_0053.performance_flag) as nqf_0053\n        , max(cbe_0055.performance_flag) as cbe_0055\n        , max(nqf_0097.performance_flag) as nqf_0097\n        , max(cqm_438.performance_flag) as cqm_438\n        , max(nqf_0041.performance_flag) as nqf_0041\n        , max(cbe_0101.performance_flag) as cbe_0101\n        , max(cqm_48.performance_flag) as cqm_48\n        , max(cqm_130.performance_flag) as cqm_130\n        , max(nqf_0420.performance_flag) as nqf_0420\n        , max(adh_diabetes.performance_flag) as adh_diabetes\n        , max(adh_ras.performance_flag) as adh_ras\n    from measures_long\n        left join nqf_2372\n            on measures_long.patient_id = nqf_2372.patient_id\n        left join nqf_0034\n            on measures_long.patient_id = nqf_0034.patient_id\n        left join nqf_0059\n            on measures_long.patient_id = nqf_0059.patient_id\n        left join cqm_236\n            on measures_long.patient_id = cqm_236.patient_id\n        left join nqf_0053\n            on measures_long.patient_id = nqf_0053.patient_id\n        left join cbe_0055\n            on measures_long.patient_id = cbe_0055.patient_id\n        left join nqf_0097\n            on measures_long.patient_id = nqf_0097.patient_id\n        left join cqm_438\n            on measures_long.patient_id = cqm_438.patient_id\n        left join nqf_0041\n            on measures_long.patient_id = nqf_0041.patient_id\n        left join cbe_0101\n            on measures_long.patient_id = cbe_0101.patient_id\n        left join cqm_48\n            on measures_long.patient_id = cqm_48.patient_id\n        left join cqm_130\n            on measures_long.patient_id = cqm_130.patient_id\n        left join nqf_0420\n            on measures_long.patient_id = nqf_0420.patient_id\n        left join adh_diabetes\n            on measures_long.patient_id = adh_diabetes.patient_id\n        left join adh_ras\n            on measures_long.patient_id = adh_ras.patient_id\n    group by measures_long.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(nqf_2372 as integer) as nqf_2372\n        , cast(nqf_0034 as integer) as nqf_0034\n        , cast(nqf_0059 as integer) as nqf_0059\n        , cast(cqm_236 as integer) as cqm_236\n        , cast(nqf_0053 as integer) as nqf_0053\n        , cast(cbe_0055 as integer) as cbe_0055\n        , cast(nqf_0097 as integer) as nqf_0097\n        , cast(cqm_438 as integer) as cqm_438 \n        , cast(nqf_0041 as integer) as nqf_0041\n        , cast(cbe_0101 as integer) as cbe_0101\n        , cast(cqm_48 as integer) as cqm_48\n        , cast(cqm_130 as integer) as cqm_130\n        , cast(nqf_0420 as integer) as nqf_0420\n        , cast(adh_diabetes as integer) as adh_diabetes\n        , cast(adh_ras as integer) as adh_ras\n    from joined\n\n)\n\nselect\n      patient_id\n    , nqf_2372\n    , nqf_0034\n    , nqf_0059\n    , cqm_236\n    , nqf_0053\n    , cbe_0055\n    , nqf_0097\n    , cqm_438\n    , nqf_0041\n    , cbe_0101\n    , cqm_48\n    , cqm_130\n    , nqf_0420\n    , adh_diabetes\n    , adh_ras\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures.summary_wide"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:55.155366Z", "completed_at": "2024-10-11T23:52:55.174392Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:55.174724Z", "completed_at": "2024-10-11T23:52:55.174729Z"}], "thread_id": "Thread-5", "execution_time": 0.045099735260009766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__summary_counts", "compiled": true, "compiled_code": "\n\nwith summary_long as (\n\n    select\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , performance_flag\n    from dev_coco.quality_measures.summary_long\n    where measure_id is not null\n\n)\n\n, calculate_performance_rate  as (\n\n    select\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , sum(denominator_flag) as denominator_sum\n        , sum(numerator_flag) as numerator_sum\n        , sum(exclusion_flag) as exclusion_sum\n        , (\n            cast(sum(performance_flag) as numeric(28,6)) /\n                (cast(count(performance_flag) as numeric(28,6)) )\n          )*100 as performance_rate\n    from summary_long\n    group by\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n\n)\n\n, add_data_types as (\n\n    select\n          cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(denominator_sum as integer) as denominator_sum\n        , cast(numerator_sum as integer) as numerator_sum\n        , cast(exclusion_sum as integer) as exclusion_sum\n        , round(cast(performance_rate as numeric(28,6)),3) as performance_rate\n    from calculate_performance_rate\n\n)\n\nselect\n      measure_id\n    , measure_name\n    , measure_version\n    , performance_period_begin\n    , performance_period_end\n    , denominator_sum\n    , numerator_sum\n    , exclusion_sum\n    , performance_rate\n    , '2024-10-11 23:52:28.343846+00:00' as tuva_last_run\nfrom add_data_types", "relation_name": "dev_coco.quality_measures.summary_counts"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-11T23:52:55.147271Z", "completed_at": "2024-10-11T23:52:55.175309Z"}, {"name": "execute", "started_at": "2024-10-11T23:52:55.175695Z", "completed_at": "2024-10-11T23:52:55.175701Z"}], "thread_id": "Thread-3", "execution_time": 0.04765796661376953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.mart_review__quality_measures_summary_long", "compiled": true, "compiled_code": "\n\n\nselect *\nfrom dev_coco.quality_measures.summary_long s", "relation_name": "dev_coco.data_quality.mart_review__quality_measures_summary_long"}], "elapsed_time": 24.66377902030945, "args": {"log_format": "default", "log_file_max_bytes": 10485760, "static_parser": true, "populate_cache": true, "profiles_dir": "/Users/coco/.dbt", "invocation_command": "dbt docs generate --target-path ../target", "use_colors_file": true, "favor_state": false, "log_path": "/Users/coco/Dropbox/tuva/github/tuva/integration_tests/docs_generate/logs", "which": "generate", "introspect": true, "version_check": true, "empty_catalog": false, "quiet": false, "warn_error_options": {"include": [], "exclude": []}, "exclude": [], "enable_legacy_logger": false, "show_resource_report": false, "project_dir": "/Users/coco/Dropbox/tuva/github/tuva/integration_tests/docs_generate", "vars": {}, "defer": false, "send_anonymous_usage_stats": true, "require_explicit_package_overrides_for_builtin_materializations": true, "use_colors": true, "write_json": true, "log_format_file": "debug", "select": [], "macro_debugging": false, "source_freshness_run_project_hooks": false, "strict_mode": false, "compile": true, "log_level_file": "debug", "static": false, "partial_parse_file_diff": true, "require_resource_names_without_spaces": false, "cache_selected_only": false, "printer_width": 80, "log_level": "info", "partial_parse": true, "indirect_selection": "eager", "target_path": "../target", "print": true}}